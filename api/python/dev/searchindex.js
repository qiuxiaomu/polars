Search.setIndex({"alltitles": {"ABS": [[1332, "abs"]], "ACOS": [[1335, "acos"]], "ACOSD": [[1335, "acosd"]], "ARRAY_AGG": [[1328, "array-agg"]], "ARRAY_CONTAINS": [[1328, "array-contains"]], "ARRAY_GET": [[1328, "array-get"]], "ARRAY_LENGTH": [[1328, "array-length"]], "ARRAY_LOWER": [[1328, "array-lower"]], "ARRAY_MEAN": [[1328, "array-mean"]], "ARRAY_REVERSE": [[1328, "array-reverse"]], "ARRAY_SUM": [[1328, "array-sum"]], "ARRAY_TO_STRING": [[1328, "array-to-string"]], "ARRAY_UNIQUE": [[1328, "array-unique"]], "ARRAY_UPPER": [[1328, "array-upper"]], "ASIN": [[1335, "asin"]], "ASIND": [[1335, "asind"]], "ATAN": [[1335, "atan"]], "ATAN2": [[1335, "atan2"]], "ATAN2D": [[1335, "atan2d"]], "ATAND": [[1335, "atand"]], "AVG": [[1327, "avg"]], "Aggregate": [[1327, null]], "Aggregation": [[175, null], [327, null], [819, null], [926, null]], "Aliases": [[1327, null], [1327, null], [1332, null], [1332, null], [1333, null], [1333, null]], "Array": [[797, null], [1302, null], [1328, null]], "Asserts": [[1341, "asserts"]], "Attributes": [[315, null], [914, null], [1303, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[818, "avro"]], "BIT_AND": [[1329, "bit-and"]], "BIT_COUNT": [[1329, "bit-count"]], "BIT_LENGTH": [[1333, "bit-length"]], "BIT_OR": [[1329, "bit-or"]], "BIT_XOR": [[1329, "bit-xor"]], "Binary": [[798, null], [811, "binary"], [1304, null]], "Boolean": [[799, null], [1305, null]], "CAST": [[1336, "cast"]], "CBRT": [[1332, "cbrt"]], "CEIL": [[1332, "ceil"]], "COALESCE": [[1330, "coalesce"]], "CONCAT": [[1333, "concat"]], "CONCAT_WS": [[1333, "concat-ws"]], "COS": [[1335, "cos"]], "COSD": [[1335, "cosd"]], "COT": [[1335, "cot"]], "COTD": [[1335, "cotd"]], "COUNT": [[1327, "count"]], "CREATE TABLE": [[1340, "create-table"]], "CSV": [[818, "csv"]], "Categories": [[800, null], [1306, null]], "Clipboard": [[818, "clipboard"]], "Cloud Credentials": [[818, "cloud-credentials"]], "Columns / names": [[802, null]], "Comparison": [[811, "comparison"], [1314, "comparison"]], "Computation": [[316, null], [803, null], [1307, null]], "Conditional": [[1330, null]], "Config": [[174, null]], "Config load, save, state": [[174, "config-load-save-state"]], "Config options": [[174, "config-options"]], "Conjunction": [[811, "conjunction"]], "Conversion": [[816, "conversion"]], "DATE": [[1333, "date"]], "DATE_PART": [[1334, "date-part"]], "DEGREES": [[1335, "degrees"]], "DISTINCT": [[1326, "distinct"]], "DIV": [[1332, "div"]], "DROP TABLES": [[1340, "drop-tables"]], "Data types": [[325, null]], "DataFrame": [[320, null]], "DataType": [[325, "datatype"]], "Database": [[818, "database"]], "Delta Lake": [[818, "delta-lake"]], "Descriptive": [[317, null], [915, null], [1308, null]], "Documentation": [[1338, null], [1338, null], [1338, null]], "ENDS_WITH": [[1333, "ends-with"]], "EXCEPT": [[1339, "except"]], "EXP": [[1332, "exp"]], "EXPLAIN": [[1340, "explain"]], "EXTRACT": [[1334, "extract"]], "Errors": [[326, "errors"]], "Examples": [[1, "examples"], [925, "examples"], [1341, "examples"]], "Excel / ODS": [[818, "excel-ods"]], "Exceptions": [[326, null]], "Export": [[318, null], [1309, null]], "Expression SQL": [[1338, "expression-sql"]], "Expressions": [[805, null]], "Extending the API": [[1, null]], "FIRST": [[1327, "first"]], "FLOOR": [[1332, "floor"]], "FROM": [[1326, "from"]], "Feather / IPC": [[818, "feather-ipc"]], "Frame SQL": [[1338, "frame-sql"]], "Functions": [[804, null], [816, null], [925, "functions"]], "GPUEngine": [[916, null]], "GREATEST": [[1330, "greatest"]], "GROUP BY": [[1326, "group-by"]], "Global SQL": [[1338, "global-sql"]], "GroupBy": [[319, null], [917, null]], "HAVING": [[1326, "having"]], "IF": [[1330, "if"]], "IFNULL": [[1330, "ifnull"]], "INITCAP": [[1333, "initcap"]], "INTERSECT": [[1339, "intersect"]], "Iceberg": [[818, "iceberg"]], "Importing": [[925, "importing"]], "InProcessQuery": [[918, null]], "Index": [[0, null]], "Input/output": [[818, null]], "Introduction": [[1338, "introduction"]], "JOIN": [[1326, "join"]], "JSON": [[818, "json"]], "LAST": [[1327, "last"]], "LEAST": [[1330, "least"]], "LEFT": [[1333, "left"]], "LENGTH": [[1333, "length"]], "LIMIT": [[1326, "limit"]], "LN": [[1332, "ln"]], "LOG": [[1332, "log"]], "LOG10": [[1332, "log10"]], "LOG1P": [[1332, "log1p"]], "LOG2": [[1332, "log2"]], "LOWER": [[1333, "lower"]], "LTRIM": [[1333, "ltrim"]], "LazyFrame": [[919, null]], "List": [[806, null], [1311, null]], "MAX": [[1327, "max"]], "MEDIAN": [[1327, "median"]], "MIN": [[1327, "min"]], "MOD": [[1332, "mod"]], "Manipulation/selection": [[322, null], [809, null], [921, null], [1313, null]], "Math": [[1332, null]], "Meta": [[807, null]], "Metadata": [[922, null]], "Methods": [[1338, "methods"]], "Miscellaneous": [[321, null], [808, null], [816, "miscellaneous"], [920, null], [1312, null]], "Multiple Config instances": [[174, "multiple-config-instances"]], "NULLIF": [[1330, "nullif"]], "Name": [[810, null]], "Nested": [[325, "nested"]], "Numeric": [[325, "numeric"], [811, "numeric"], [1314, "numeric"]], "OCTET_LENGTH": [[1333, "octet-length"]], "OFFSET": [[1326, "offset"]], "ORDER BY": [[1326, "order-by"]], "Operators": [[811, null], [1314, null]], "Other": [[325, "other"]], "PI": [[1332, "pi"]], "POW": [[1332, "pow"]], "Panic": [[326, "panic"]], "Parallelization": [[816, "parallelization"]], "Parametric testing": [[1341, "parametric-testing"]], "Parquet": [[818, "parquet"]], "Plot": [[323, null], [1315, null]], "Plugins": [[923, null]], "Polars strategies": [[1341, "polars-strategies"]], "Profiles": [[1341, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[818, "pyarrow-datasets"]], "Python API": [[1338, null]], "Python API reference": [[817, null]], "QUANTILE_CONT": [[1327, "quantile-cont"]], "QUANTILE_DISC": [[1327, "quantile-disc"]], "Querying": [[1338, "querying"]], "RADIANS": [[1335, "radians"]], "REGEXP_LIKE": [[1333, "regexp-like"]], "REPLACE": [[1333, "replace"]], "REVERSE": [[1333, "reverse"]], "RIGHT": [[1333, "right"]], "ROUND": [[1332, "round"]], "RTRIM": [[1333, "rtrim"]], "Random": [[816, "random"]], "SELECT": [[1326, "select"]], "SHOW TABLES": [[1340, "show-tables"]], "SIGN": [[1332, "sign"]], "SIN": [[1335, "sin"]], "SIND": [[1335, "sind"]], "SQL Clauses": [[1326, null]], "SQL Functions": [[1331, null]], "SQL Interface": [[1337, null]], "SQLContext": [[1338, "sqlcontext"]], "SQRT": [[1332, "sqrt"]], "STARTS_WITH": [[1333, "starts-with"]], "STDDEV": [[1327, "stddev"]], "STRFTIME": [[1334, "strftime"]], "STRPOS": [[1333, "strpos"]], "STRPTIME": [[1333, "strptime"]], "SUBSTR": [[1333, "substr"]], "SUM": [[1327, "sum"]], "Schema": [[924, null]], "Selectors": [[925, null]], "Serialization": [[321, "serialization"], [920, "serialization"]], "Series": [[1310, null]], "Set Operations": [[1339, null]], "Set operations": [[925, "set-operations"]], "Strategy helpers": [[1341, "strategy-helpers"]], "String": [[325, "string"], [812, null], [1316, null], [1333, null]], "StringCache": [[816, "stringcache"]], "Struct": [[813, null], [1317, null]], "Style": [[324, null]], "TAN": [[1335, "tan"]], "TAND": [[1335, "tand"]], "TIMESTAMP": [[1333, "timestamp"]], "TRUNCATE": [[1340, "truncate"]], "TRY_CAST": [[1336, "try-cast"]], "Table Operations": [[1340, null]], "Temporal": [[325, "temporal"], [814, null], [1318, null], [1329, null], [1334, null]], "Testing": [[1341, null]], "Trigonometry": [[1335, null]], "Types": [[1336, null]], "UNION": [[1339, "union"]], "UNION ALL": [[1339, "union-all"]], "UNION BY NAME": [[1339, "union-by-name"]], "UNNEST": [[1328, "unnest"], [1340, "unnest"]], "UPPER": [[1333, "upper"]], "Use as a context manager": [[174, "use-as-a-context-manager"]], "Use as a decorator": [[174, "use-as-a-decorator"]], "VARIANCE": [[1327, "variance"]], "WHERE": [[1326, "where"]], "Warnings": [[326, "warnings"]], "Window": [[815, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[176, null]], "polars.DataFrame.__arrow_c_stream__": [[177, null]], "polars.DataFrame.__dataframe__": [[178, null]], "polars.DataFrame.__getitem__": [[179, null]], "polars.DataFrame.approx_n_unique": [[180, null]], "polars.DataFrame.bottom_k": [[181, null]], "polars.DataFrame.cast": [[182, null]], "polars.DataFrame.clear": [[183, null]], "polars.DataFrame.clone": [[184, null]], "polars.DataFrame.collect_schema": [[185, null]], "polars.DataFrame.columns": [[186, null]], "polars.DataFrame.corr": [[187, null]], "polars.DataFrame.count": [[188, null]], "polars.DataFrame.describe": [[189, null]], "polars.DataFrame.deserialize": [[190, null]], "polars.DataFrame.drop": [[191, null]], "polars.DataFrame.drop_in_place": [[192, null]], "polars.DataFrame.drop_nans": [[193, null]], "polars.DataFrame.drop_nulls": [[194, null]], "polars.DataFrame.dtypes": [[195, null]], "polars.DataFrame.equals": [[196, null]], "polars.DataFrame.estimated_size": [[197, null]], "polars.DataFrame.explode": [[198, null]], "polars.DataFrame.extend": [[199, null]], "polars.DataFrame.fill_nan": [[200, null]], "polars.DataFrame.fill_null": [[201, null]], "polars.DataFrame.filter": [[202, null]], "polars.DataFrame.flags": [[203, null]], "polars.DataFrame.fold": [[204, null]], "polars.DataFrame.gather_every": [[205, null]], "polars.DataFrame.get_column": [[206, null]], "polars.DataFrame.get_column_index": [[207, null]], "polars.DataFrame.get_columns": [[208, null]], "polars.DataFrame.glimpse": [[209, null]], "polars.DataFrame.group_by": [[210, null]], "polars.DataFrame.group_by_dynamic": [[211, null]], "polars.DataFrame.hash_rows": [[212, null]], "polars.DataFrame.head": [[213, null]], "polars.DataFrame.height": [[214, null]], "polars.DataFrame.hstack": [[215, null]], "polars.DataFrame.insert_column": [[216, null]], "polars.DataFrame.interpolate": [[217, null]], "polars.DataFrame.is_duplicated": [[218, null]], "polars.DataFrame.is_empty": [[219, null]], "polars.DataFrame.is_unique": [[220, null]], "polars.DataFrame.item": [[221, null]], "polars.DataFrame.iter_columns": [[222, null]], "polars.DataFrame.iter_rows": [[223, null]], "polars.DataFrame.iter_slices": [[224, null]], "polars.DataFrame.join": [[225, null]], "polars.DataFrame.join_asof": [[226, null]], "polars.DataFrame.join_where": [[227, null]], "polars.DataFrame.lazy": [[228, null]], "polars.DataFrame.limit": [[229, null]], "polars.DataFrame.map_rows": [[230, null]], "polars.DataFrame.max": [[231, null]], "polars.DataFrame.max_horizontal": [[232, null]], "polars.DataFrame.mean": [[233, null]], "polars.DataFrame.mean_horizontal": [[234, null]], "polars.DataFrame.median": [[235, null]], "polars.DataFrame.melt": [[236, null]], "polars.DataFrame.merge_sorted": [[237, null]], "polars.DataFrame.min": [[238, null]], "polars.DataFrame.min_horizontal": [[239, null]], "polars.DataFrame.n_chunks": [[240, null]], "polars.DataFrame.n_unique": [[241, null]], "polars.DataFrame.null_count": [[242, null]], "polars.DataFrame.partition_by": [[243, null]], "polars.DataFrame.pipe": [[244, null]], "polars.DataFrame.pivot": [[245, null]], "polars.DataFrame.product": [[246, null]], "polars.DataFrame.quantile": [[247, null]], "polars.DataFrame.rechunk": [[248, null]], "polars.DataFrame.rename": [[249, null]], "polars.DataFrame.replace_column": [[250, null]], "polars.DataFrame.reverse": [[251, null]], "polars.DataFrame.rolling": [[252, null]], "polars.DataFrame.row": [[253, null]], "polars.DataFrame.rows": [[254, null]], "polars.DataFrame.rows_by_key": [[255, null]], "polars.DataFrame.sample": [[256, null]], "polars.DataFrame.schema": [[257, null]], "polars.DataFrame.select": [[258, null]], "polars.DataFrame.select_seq": [[259, null]], "polars.DataFrame.serialize": [[260, null]], "polars.DataFrame.set_sorted": [[261, null]], "polars.DataFrame.shape": [[262, null]], "polars.DataFrame.shift": [[263, null]], "polars.DataFrame.shrink_to_fit": [[264, null]], "polars.DataFrame.slice": [[265, null]], "polars.DataFrame.sort": [[266, null]], "polars.DataFrame.sql": [[267, null]], "polars.DataFrame.std": [[268, null]], "polars.DataFrame.sum": [[269, null]], "polars.DataFrame.sum_horizontal": [[270, null]], "polars.DataFrame.tail": [[271, null]], "polars.DataFrame.to_arrow": [[272, null]], "polars.DataFrame.to_dict": [[273, null]], "polars.DataFrame.to_dicts": [[274, null]], "polars.DataFrame.to_dummies": [[275, null]], "polars.DataFrame.to_init_repr": [[276, null]], "polars.DataFrame.to_jax": [[277, null]], "polars.DataFrame.to_numpy": [[278, null]], "polars.DataFrame.to_pandas": [[279, null]], "polars.DataFrame.to_series": [[280, null]], "polars.DataFrame.to_struct": [[281, null]], "polars.DataFrame.to_torch": [[282, null]], "polars.DataFrame.top_k": [[283, null]], "polars.DataFrame.transpose": [[284, null]], "polars.DataFrame.unique": [[285, null]], "polars.DataFrame.unnest": [[286, null]], "polars.DataFrame.unpivot": [[287, null]], "polars.DataFrame.unstack": [[288, null]], "polars.DataFrame.update": [[289, null]], "polars.DataFrame.upsample": [[290, null]], "polars.DataFrame.var": [[291, null]], "polars.DataFrame.vstack": [[292, null]], "polars.DataFrame.width": [[293, null]], "polars.DataFrame.with_columns": [[294, null]], "polars.DataFrame.with_columns_seq": [[295, null]], "polars.DataFrame.with_row_count": [[296, null]], "polars.DataFrame.with_row_index": [[297, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_ipc": [[41, null]], "polars.DataFrame.write_ipc_stream": [[42, null]], "polars.DataFrame.write_json": [[43, null]], "polars.DataFrame.write_ndjson": [[44, null]], "polars.DataFrame.write_parquet": [[45, null]], "polars.Expr.abs": [[328, null]], "polars.Expr.add": [[329, null]], "polars.Expr.agg_groups": [[330, null]], "polars.Expr.alias": [[331, null]], "polars.Expr.all": [[332, null]], "polars.Expr.and_": [[333, null]], "polars.Expr.any": [[334, null]], "polars.Expr.append": [[335, null]], "polars.Expr.approx_n_unique": [[336, null]], "polars.Expr.arccos": [[337, null]], "polars.Expr.arccosh": [[338, null]], "polars.Expr.arcsin": [[339, null]], "polars.Expr.arcsinh": [[340, null]], "polars.Expr.arctan": [[341, null]], "polars.Expr.arctanh": [[342, null]], "polars.Expr.arg_max": [[343, null]], "polars.Expr.arg_min": [[344, null]], "polars.Expr.arg_sort": [[345, null]], "polars.Expr.arg_true": [[346, null]], "polars.Expr.arg_unique": [[347, null]], "polars.Expr.arr.all": [[348, null]], "polars.Expr.arr.any": [[349, null]], "polars.Expr.arr.arg_max": [[350, null]], "polars.Expr.arr.arg_min": [[351, null]], "polars.Expr.arr.contains": [[352, null]], "polars.Expr.arr.count_matches": [[353, null]], "polars.Expr.arr.explode": [[354, null]], "polars.Expr.arr.first": [[355, null]], "polars.Expr.arr.get": [[356, null]], "polars.Expr.arr.join": [[357, null]], "polars.Expr.arr.last": [[358, null]], "polars.Expr.arr.max": [[359, null]], "polars.Expr.arr.median": [[360, null]], "polars.Expr.arr.min": [[361, null]], "polars.Expr.arr.n_unique": [[362, null]], "polars.Expr.arr.reverse": [[363, null]], "polars.Expr.arr.shift": [[364, null]], "polars.Expr.arr.sort": [[365, null]], "polars.Expr.arr.std": [[366, null]], "polars.Expr.arr.sum": [[367, null]], "polars.Expr.arr.to_list": [[368, null]], "polars.Expr.arr.to_struct": [[369, null]], "polars.Expr.arr.unique": [[370, null]], "polars.Expr.arr.var": [[371, null]], "polars.Expr.backward_fill": [[372, null]], "polars.Expr.bin.contains": [[373, null]], "polars.Expr.bin.decode": [[374, null]], "polars.Expr.bin.encode": [[375, null]], "polars.Expr.bin.ends_with": [[376, null]], "polars.Expr.bin.reinterpret": [[377, null]], "polars.Expr.bin.size": [[378, null]], "polars.Expr.bin.starts_with": [[379, null]], "polars.Expr.bitwise_and": [[380, null]], "polars.Expr.bitwise_count_ones": [[381, null]], "polars.Expr.bitwise_count_zeros": [[382, null]], "polars.Expr.bitwise_leading_ones": [[383, null]], "polars.Expr.bitwise_leading_zeros": [[384, null]], "polars.Expr.bitwise_or": [[385, null]], "polars.Expr.bitwise_trailing_ones": [[386, null]], "polars.Expr.bitwise_trailing_zeros": [[387, null]], "polars.Expr.bitwise_xor": [[388, null]], "polars.Expr.bottom_k": [[389, null]], "polars.Expr.bottom_k_by": [[390, null]], "polars.Expr.cast": [[391, null]], "polars.Expr.cat.get_categories": [[392, null]], "polars.Expr.cat.len_bytes": [[393, null]], "polars.Expr.cat.len_chars": [[394, null]], "polars.Expr.cbrt": [[395, null]], "polars.Expr.ceil": [[396, null]], "polars.Expr.clip": [[397, null]], "polars.Expr.cos": [[398, null]], "polars.Expr.cosh": [[399, null]], "polars.Expr.cot": [[400, null]], "polars.Expr.count": [[401, null]], "polars.Expr.cum_count": [[402, null]], "polars.Expr.cum_max": [[403, null]], "polars.Expr.cum_min": [[404, null]], "polars.Expr.cum_prod": [[405, null]], "polars.Expr.cum_sum": [[406, null]], "polars.Expr.cumulative_eval": [[407, null]], "polars.Expr.cut": [[408, null]], "polars.Expr.degrees": [[409, null]], "polars.Expr.deserialize": [[410, null]], "polars.Expr.diff": [[411, null]], "polars.Expr.dot": [[412, null]], "polars.Expr.drop_nans": [[413, null]], "polars.Expr.drop_nulls": [[414, null]], "polars.Expr.dt.add_business_days": [[415, null]], "polars.Expr.dt.base_utc_offset": [[416, null]], "polars.Expr.dt.cast_time_unit": [[417, null]], "polars.Expr.dt.century": [[418, null]], "polars.Expr.dt.combine": [[419, null]], "polars.Expr.dt.convert_time_zone": [[420, null]], "polars.Expr.dt.date": [[421, null]], "polars.Expr.dt.datetime": [[422, null]], "polars.Expr.dt.day": [[423, null]], "polars.Expr.dt.dst_offset": [[424, null]], "polars.Expr.dt.epoch": [[425, null]], "polars.Expr.dt.hour": [[426, null]], "polars.Expr.dt.is_leap_year": [[427, null]], "polars.Expr.dt.iso_year": [[428, null]], "polars.Expr.dt.microsecond": [[429, null]], "polars.Expr.dt.millennium": [[430, null]], "polars.Expr.dt.millisecond": [[431, null]], "polars.Expr.dt.minute": [[432, null]], "polars.Expr.dt.month": [[433, null]], "polars.Expr.dt.month_end": [[434, null]], "polars.Expr.dt.month_start": [[435, null]], "polars.Expr.dt.nanosecond": [[436, null]], "polars.Expr.dt.offset_by": [[437, null]], "polars.Expr.dt.ordinal_day": [[438, null]], "polars.Expr.dt.quarter": [[439, null]], "polars.Expr.dt.replace": [[440, null]], "polars.Expr.dt.replace_time_zone": [[441, null]], "polars.Expr.dt.round": [[442, null]], "polars.Expr.dt.second": [[443, null]], "polars.Expr.dt.strftime": [[444, null]], "polars.Expr.dt.time": [[445, null]], "polars.Expr.dt.timestamp": [[446, null]], "polars.Expr.dt.to_string": [[447, null]], "polars.Expr.dt.total_days": [[448, null]], "polars.Expr.dt.total_hours": [[449, null]], "polars.Expr.dt.total_microseconds": [[450, null]], "polars.Expr.dt.total_milliseconds": [[451, null]], "polars.Expr.dt.total_minutes": [[452, null]], "polars.Expr.dt.total_nanoseconds": [[453, null]], "polars.Expr.dt.total_seconds": [[454, null]], "polars.Expr.dt.truncate": [[455, null]], "polars.Expr.dt.week": [[456, null]], "polars.Expr.dt.weekday": [[457, null]], "polars.Expr.dt.with_time_unit": [[458, null]], "polars.Expr.dt.year": [[459, null]], "polars.Expr.entropy": [[460, null]], "polars.Expr.eq": [[461, null]], "polars.Expr.eq_missing": [[462, null]], "polars.Expr.ewm_mean": [[463, null]], "polars.Expr.ewm_mean_by": [[464, null]], "polars.Expr.ewm_std": [[465, null]], "polars.Expr.ewm_var": [[466, null]], "polars.Expr.exclude": [[467, null]], "polars.Expr.exp": [[468, null]], "polars.Expr.explode": [[469, null]], "polars.Expr.extend_constant": [[470, null]], "polars.Expr.fill_nan": [[471, null]], "polars.Expr.fill_null": [[472, null]], "polars.Expr.filter": [[473, null]], "polars.Expr.first": [[474, null]], "polars.Expr.flatten": [[475, null]], "polars.Expr.floor": [[476, null]], "polars.Expr.floordiv": [[477, null]], "polars.Expr.forward_fill": [[478, null]], "polars.Expr.from_json": [[479, null]], "polars.Expr.gather": [[480, null]], "polars.Expr.gather_every": [[481, null]], "polars.Expr.ge": [[482, null]], "polars.Expr.get": [[483, null]], "polars.Expr.gt": [[484, null]], "polars.Expr.has_nulls": [[485, null]], "polars.Expr.hash": [[486, null]], "polars.Expr.head": [[487, null]], "polars.Expr.hist": [[488, null]], "polars.Expr.implode": [[489, null]], "polars.Expr.inspect": [[490, null]], "polars.Expr.interpolate": [[491, null]], "polars.Expr.interpolate_by": [[492, null]], "polars.Expr.is_between": [[493, null]], "polars.Expr.is_duplicated": [[494, null]], "polars.Expr.is_finite": [[495, null]], "polars.Expr.is_first_distinct": [[496, null]], "polars.Expr.is_in": [[497, null]], "polars.Expr.is_infinite": [[498, null]], "polars.Expr.is_last_distinct": [[499, null]], "polars.Expr.is_nan": [[500, null]], "polars.Expr.is_not_nan": [[501, null]], "polars.Expr.is_not_null": [[502, null]], "polars.Expr.is_null": [[503, null]], "polars.Expr.is_unique": [[504, null]], "polars.Expr.kurtosis": [[505, null]], "polars.Expr.last": [[506, null]], "polars.Expr.le": [[507, null]], "polars.Expr.len": [[508, null]], "polars.Expr.limit": [[509, null]], "polars.Expr.list.all": [[510, null]], "polars.Expr.list.any": [[511, null]], "polars.Expr.list.arg_max": [[512, null]], "polars.Expr.list.arg_min": [[513, null]], "polars.Expr.list.concat": [[514, null]], "polars.Expr.list.contains": [[515, null]], "polars.Expr.list.count_matches": [[516, null]], "polars.Expr.list.diff": [[517, null]], "polars.Expr.list.drop_nulls": [[518, null]], "polars.Expr.list.eval": [[519, null]], "polars.Expr.list.explode": [[520, null]], "polars.Expr.list.first": [[521, null]], "polars.Expr.list.gather": [[522, null]], "polars.Expr.list.gather_every": [[523, null]], "polars.Expr.list.get": [[524, null]], "polars.Expr.list.head": [[525, null]], "polars.Expr.list.join": [[526, null]], "polars.Expr.list.last": [[527, null]], "polars.Expr.list.len": [[528, null]], "polars.Expr.list.max": [[529, null]], "polars.Expr.list.mean": [[530, null]], "polars.Expr.list.median": [[531, null]], "polars.Expr.list.min": [[532, null]], "polars.Expr.list.n_unique": [[533, null]], "polars.Expr.list.reverse": [[534, null]], "polars.Expr.list.sample": [[535, null]], "polars.Expr.list.set_difference": [[536, null]], "polars.Expr.list.set_intersection": [[537, null]], "polars.Expr.list.set_symmetric_difference": [[538, null]], "polars.Expr.list.set_union": [[539, null]], "polars.Expr.list.shift": [[540, null]], "polars.Expr.list.slice": [[541, null]], "polars.Expr.list.sort": [[542, null]], "polars.Expr.list.std": [[543, null]], "polars.Expr.list.sum": [[544, null]], "polars.Expr.list.tail": [[545, null]], "polars.Expr.list.to_array": [[546, null]], "polars.Expr.list.to_struct": [[547, null]], "polars.Expr.list.unique": [[548, null]], "polars.Expr.list.var": [[549, null]], "polars.Expr.log": [[550, null]], "polars.Expr.log10": [[551, null]], "polars.Expr.log1p": [[552, null]], "polars.Expr.lower_bound": [[553, null]], "polars.Expr.lt": [[554, null]], "polars.Expr.map_batches": [[555, null]], "polars.Expr.map_elements": [[556, null]], "polars.Expr.max": [[557, null]], "polars.Expr.mean": [[558, null]], "polars.Expr.median": [[559, null]], "polars.Expr.meta.eq": [[560, null]], "polars.Expr.meta.has_multiple_outputs": [[561, null]], "polars.Expr.meta.is_column": [[562, null]], "polars.Expr.meta.is_column_selection": [[563, null]], "polars.Expr.meta.is_literal": [[564, null]], "polars.Expr.meta.is_regex_projection": [[565, null]], "polars.Expr.meta.ne": [[566, null]], "polars.Expr.meta.output_name": [[567, null]], "polars.Expr.meta.pop": [[568, null]], "polars.Expr.meta.root_names": [[569, null]], "polars.Expr.meta.serialize": [[570, null]], "polars.Expr.meta.show_graph": [[571, null]], "polars.Expr.meta.tree_format": [[572, null]], "polars.Expr.meta.undo_aliases": [[573, null]], "polars.Expr.meta.write_json": [[574, null]], "polars.Expr.min": [[575, null]], "polars.Expr.mod": [[576, null]], "polars.Expr.mode": [[577, null]], "polars.Expr.mul": [[578, null]], "polars.Expr.n_unique": [[579, null]], "polars.Expr.name.keep": [[580, null]], "polars.Expr.name.map": [[581, null]], "polars.Expr.name.map_fields": [[582, null]], "polars.Expr.name.prefix": [[583, null]], "polars.Expr.name.prefix_fields": [[584, null]], "polars.Expr.name.suffix": [[585, null]], "polars.Expr.name.suffix_fields": [[586, null]], "polars.Expr.name.to_lowercase": [[587, null]], "polars.Expr.name.to_uppercase": [[588, null]], "polars.Expr.nan_max": [[589, null]], "polars.Expr.nan_min": [[590, null]], "polars.Expr.ne": [[591, null]], "polars.Expr.ne_missing": [[592, null]], "polars.Expr.neg": [[593, null]], "polars.Expr.not_": [[594, null]], "polars.Expr.null_count": [[595, null]], "polars.Expr.or_": [[596, null]], "polars.Expr.over": [[597, null]], "polars.Expr.pct_change": [[598, null]], "polars.Expr.peak_max": [[599, null]], "polars.Expr.peak_min": [[600, null]], "polars.Expr.pipe": [[601, null]], "polars.Expr.pow": [[602, null]], "polars.Expr.product": [[603, null]], "polars.Expr.qcut": [[604, null]], "polars.Expr.quantile": [[605, null]], "polars.Expr.radians": [[606, null]], "polars.Expr.rank": [[607, null]], "polars.Expr.rechunk": [[608, null]], "polars.Expr.reinterpret": [[609, null]], "polars.Expr.repeat_by": [[610, null]], "polars.Expr.replace": [[611, null]], "polars.Expr.replace_strict": [[612, null]], "polars.Expr.reshape": [[613, null]], "polars.Expr.reverse": [[614, null]], "polars.Expr.rle": [[615, null]], "polars.Expr.rle_id": [[616, null]], "polars.Expr.rolling": [[617, null]], "polars.Expr.rolling_map": [[618, null]], "polars.Expr.rolling_max": [[619, null]], "polars.Expr.rolling_max_by": [[620, null]], "polars.Expr.rolling_mean": [[621, null]], "polars.Expr.rolling_mean_by": [[622, null]], "polars.Expr.rolling_median": [[623, null]], "polars.Expr.rolling_median_by": [[624, null]], "polars.Expr.rolling_min": [[625, null]], "polars.Expr.rolling_min_by": [[626, null]], "polars.Expr.rolling_quantile": [[627, null]], "polars.Expr.rolling_quantile_by": [[628, null]], "polars.Expr.rolling_skew": [[629, null]], "polars.Expr.rolling_std": [[630, null]], "polars.Expr.rolling_std_by": [[631, null]], "polars.Expr.rolling_sum": [[632, null]], "polars.Expr.rolling_sum_by": [[633, null]], "polars.Expr.rolling_var": [[634, null]], "polars.Expr.rolling_var_by": [[635, null]], "polars.Expr.round": [[636, null]], "polars.Expr.round_sig_figs": [[637, null]], "polars.Expr.sample": [[638, null]], "polars.Expr.search_sorted": [[639, null]], "polars.Expr.set_sorted": [[640, null]], "polars.Expr.shift": [[641, null]], "polars.Expr.shrink_dtype": [[642, null]], "polars.Expr.shuffle": [[643, null]], "polars.Expr.sign": [[644, null]], "polars.Expr.sin": [[645, null]], "polars.Expr.sinh": [[646, null]], "polars.Expr.skew": [[647, null]], "polars.Expr.slice": [[648, null]], "polars.Expr.sort": [[649, null]], "polars.Expr.sort_by": [[650, null]], "polars.Expr.sqrt": [[651, null]], "polars.Expr.std": [[652, null]], "polars.Expr.str.concat": [[653, null]], "polars.Expr.str.contains": [[654, null]], "polars.Expr.str.contains_any": [[655, null]], "polars.Expr.str.count_matches": [[656, null]], "polars.Expr.str.decode": [[657, null]], "polars.Expr.str.encode": [[658, null]], "polars.Expr.str.ends_with": [[659, null]], "polars.Expr.str.escape_regex": [[660, null]], "polars.Expr.str.explode": [[661, null]], "polars.Expr.str.extract": [[662, null]], "polars.Expr.str.extract_all": [[663, null]], "polars.Expr.str.extract_groups": [[664, null]], "polars.Expr.str.extract_many": [[665, null]], "polars.Expr.str.find": [[666, null]], "polars.Expr.str.find_many": [[667, null]], "polars.Expr.str.head": [[668, null]], "polars.Expr.str.join": [[669, null]], "polars.Expr.str.json_decode": [[670, null]], "polars.Expr.str.json_path_match": [[671, null]], "polars.Expr.str.len_bytes": [[672, null]], "polars.Expr.str.len_chars": [[673, null]], "polars.Expr.str.pad_end": [[674, null]], "polars.Expr.str.pad_start": [[675, null]], "polars.Expr.str.replace": [[676, null]], "polars.Expr.str.replace_all": [[677, null]], "polars.Expr.str.replace_many": [[678, null]], "polars.Expr.str.reverse": [[679, null]], "polars.Expr.str.slice": [[680, null]], "polars.Expr.str.split": [[681, null]], "polars.Expr.str.split_exact": [[682, null]], "polars.Expr.str.splitn": [[683, null]], "polars.Expr.str.starts_with": [[684, null]], "polars.Expr.str.strip_chars": [[685, null]], "polars.Expr.str.strip_chars_end": [[686, null]], "polars.Expr.str.strip_chars_start": [[687, null]], "polars.Expr.str.strip_prefix": [[688, null]], "polars.Expr.str.strip_suffix": [[689, null]], "polars.Expr.str.strptime": [[690, null]], "polars.Expr.str.tail": [[691, null]], "polars.Expr.str.to_date": [[692, null]], "polars.Expr.str.to_datetime": [[693, null]], "polars.Expr.str.to_decimal": [[694, null]], "polars.Expr.str.to_integer": [[695, null]], "polars.Expr.str.to_lowercase": [[696, null]], "polars.Expr.str.to_time": [[697, null]], "polars.Expr.str.to_titlecase": [[698, null]], "polars.Expr.str.to_uppercase": [[699, null]], "polars.Expr.str.zfill": [[700, null]], "polars.Expr.struct.field": [[701, null]], "polars.Expr.struct.json_encode": [[702, null]], "polars.Expr.struct.rename_fields": [[703, null]], "polars.Expr.struct.unnest": [[704, null]], "polars.Expr.struct.with_fields": [[705, null]], "polars.Expr.sub": [[706, null]], "polars.Expr.sum": [[707, null]], "polars.Expr.tail": [[708, null]], "polars.Expr.tan": [[709, null]], "polars.Expr.tanh": [[710, null]], "polars.Expr.to_physical": [[711, null]], "polars.Expr.top_k": [[712, null]], "polars.Expr.top_k_by": [[713, null]], "polars.Expr.truediv": [[714, null]], "polars.Expr.unique": [[715, null]], "polars.Expr.unique_counts": [[716, null]], "polars.Expr.upper_bound": [[717, null]], "polars.Expr.value_counts": [[718, null]], "polars.Expr.var": [[719, null]], "polars.Expr.where": [[720, null]], "polars.Expr.xor": [[721, null]], "polars.LazyFrame.approx_n_unique": [[820, null]], "polars.LazyFrame.bottom_k": [[821, null]], "polars.LazyFrame.cache": [[822, null]], "polars.LazyFrame.cast": [[823, null]], "polars.LazyFrame.clear": [[824, null]], "polars.LazyFrame.clone": [[825, null]], "polars.LazyFrame.collect": [[826, null]], "polars.LazyFrame.collect_async": [[827, null]], "polars.LazyFrame.collect_schema": [[828, null]], "polars.LazyFrame.columns": [[829, null]], "polars.LazyFrame.count": [[830, null]], "polars.LazyFrame.describe": [[831, null]], "polars.LazyFrame.deserialize": [[832, null]], "polars.LazyFrame.drop": [[833, null]], "polars.LazyFrame.drop_nans": [[834, null]], "polars.LazyFrame.drop_nulls": [[835, null]], "polars.LazyFrame.dtypes": [[836, null]], "polars.LazyFrame.explain": [[837, null]], "polars.LazyFrame.explode": [[838, null]], "polars.LazyFrame.fill_nan": [[839, null]], "polars.LazyFrame.fill_null": [[840, null]], "polars.LazyFrame.filter": [[841, null]], "polars.LazyFrame.first": [[842, null]], "polars.LazyFrame.gather_every": [[843, null]], "polars.LazyFrame.group_by": [[844, null]], "polars.LazyFrame.group_by_dynamic": [[845, null]], "polars.LazyFrame.head": [[846, null]], "polars.LazyFrame.inspect": [[847, null]], "polars.LazyFrame.interpolate": [[848, null]], "polars.LazyFrame.join": [[849, null]], "polars.LazyFrame.join_asof": [[850, null]], "polars.LazyFrame.join_where": [[851, null]], "polars.LazyFrame.last": [[852, null]], "polars.LazyFrame.lazy": [[853, null]], "polars.LazyFrame.limit": [[854, null]], "polars.LazyFrame.map_batches": [[855, null]], "polars.LazyFrame.max": [[856, null]], "polars.LazyFrame.mean": [[857, null]], "polars.LazyFrame.median": [[858, null]], "polars.LazyFrame.melt": [[859, null]], "polars.LazyFrame.merge_sorted": [[860, null]], "polars.LazyFrame.min": [[861, null]], "polars.LazyFrame.null_count": [[862, null]], "polars.LazyFrame.pipe": [[863, null]], "polars.LazyFrame.profile": [[864, null]], "polars.LazyFrame.quantile": [[865, null]], "polars.LazyFrame.rename": [[866, null]], "polars.LazyFrame.reverse": [[867, null]], "polars.LazyFrame.rolling": [[868, null]], "polars.LazyFrame.schema": [[869, null]], "polars.LazyFrame.select": [[870, null]], "polars.LazyFrame.select_seq": [[871, null]], "polars.LazyFrame.serialize": [[872, null]], "polars.LazyFrame.set_sorted": [[873, null]], "polars.LazyFrame.shift": [[874, null]], "polars.LazyFrame.show_graph": [[875, null]], "polars.LazyFrame.sink_csv": [[46, null]], "polars.LazyFrame.sink_ipc": [[47, null]], "polars.LazyFrame.sink_ndjson": [[48, null]], "polars.LazyFrame.sink_parquet": [[49, null]], "polars.LazyFrame.slice": [[876, null]], "polars.LazyFrame.sort": [[877, null]], "polars.LazyFrame.sql": [[878, null]], "polars.LazyFrame.std": [[879, null]], "polars.LazyFrame.sum": [[880, null]], "polars.LazyFrame.tail": [[881, null]], "polars.LazyFrame.top_k": [[882, null]], "polars.LazyFrame.unique": [[883, null]], "polars.LazyFrame.unnest": [[884, null]], "polars.LazyFrame.unpivot": [[885, null]], "polars.LazyFrame.update": [[886, null]], "polars.LazyFrame.var": [[887, null]], "polars.LazyFrame.width": [[888, null]], "polars.LazyFrame.with_columns": [[889, null]], "polars.LazyFrame.with_columns_seq": [[890, null]], "polars.LazyFrame.with_context": [[891, null]], "polars.LazyFrame.with_row_count": [[892, null]], "polars.LazyFrame.with_row_index": [[893, null]], "polars.SQLContext.execute": [[1319, null]], "polars.SQLContext.execute_global": [[1320, null]], "polars.SQLContext.register": [[1321, null]], "polars.SQLContext.register_globals": [[1322, null]], "polars.SQLContext.register_many": [[1323, null]], "polars.SQLContext.tables": [[1324, null]], "polars.SQLContext.unregister": [[1325, null]], "polars.Series.__array__": [[927, null]], "polars.Series.__arrow_c_stream__": [[928, null]], "polars.Series.__getitem__": [[929, null]], "polars.Series.abs": [[930, null]], "polars.Series.alias": [[931, null]], "polars.Series.all": [[932, null]], "polars.Series.any": [[933, null]], "polars.Series.append": [[934, null]], "polars.Series.approx_n_unique": [[935, null]], "polars.Series.arccos": [[936, null]], "polars.Series.arccosh": [[937, null]], "polars.Series.arcsin": [[938, null]], "polars.Series.arcsinh": [[939, null]], "polars.Series.arctan": [[940, null]], "polars.Series.arctanh": [[941, null]], "polars.Series.arg_max": [[942, null]], "polars.Series.arg_min": [[943, null]], "polars.Series.arg_sort": [[944, null]], "polars.Series.arg_true": [[945, null]], "polars.Series.arg_unique": [[946, null]], "polars.Series.arr.all": [[947, null]], "polars.Series.arr.any": [[948, null]], "polars.Series.arr.arg_max": [[949, null]], "polars.Series.arr.arg_min": [[950, null]], "polars.Series.arr.contains": [[951, null]], "polars.Series.arr.count_matches": [[952, null]], "polars.Series.arr.explode": [[953, null]], "polars.Series.arr.first": [[954, null]], "polars.Series.arr.get": [[955, null]], "polars.Series.arr.join": [[956, null]], "polars.Series.arr.last": [[957, null]], "polars.Series.arr.max": [[958, null]], "polars.Series.arr.median": [[959, null]], "polars.Series.arr.min": [[960, null]], "polars.Series.arr.n_unique": [[961, null]], "polars.Series.arr.reverse": [[962, null]], "polars.Series.arr.shift": [[963, null]], "polars.Series.arr.sort": [[964, null]], "polars.Series.arr.std": [[965, null]], "polars.Series.arr.sum": [[966, null]], "polars.Series.arr.to_list": [[967, null]], "polars.Series.arr.to_struct": [[968, null]], "polars.Series.arr.unique": [[969, null]], "polars.Series.arr.var": [[970, null]], "polars.Series.bin.contains": [[971, null]], "polars.Series.bin.decode": [[972, null]], "polars.Series.bin.encode": [[973, null]], "polars.Series.bin.ends_with": [[974, null]], "polars.Series.bin.reinterpret": [[975, null]], "polars.Series.bin.size": [[976, null]], "polars.Series.bin.starts_with": [[977, null]], "polars.Series.bitwise_and": [[978, null]], "polars.Series.bitwise_count_ones": [[979, null]], "polars.Series.bitwise_count_zeros": [[980, null]], "polars.Series.bitwise_leading_ones": [[981, null]], "polars.Series.bitwise_leading_zeros": [[982, null]], "polars.Series.bitwise_or": [[983, null]], "polars.Series.bitwise_trailing_ones": [[984, null]], "polars.Series.bitwise_trailing_zeros": [[985, null]], "polars.Series.bitwise_xor": [[986, null]], "polars.Series.bottom_k": [[987, null]], "polars.Series.cast": [[988, null]], "polars.Series.cat.get_categories": [[989, null]], "polars.Series.cat.is_local": [[990, null]], "polars.Series.cat.len_bytes": [[991, null]], "polars.Series.cat.len_chars": [[992, null]], "polars.Series.cat.to_local": [[993, null]], "polars.Series.cat.uses_lexical_ordering": [[994, null]], "polars.Series.cbrt": [[995, null]], "polars.Series.ceil": [[996, null]], "polars.Series.chunk_lengths": [[997, null]], "polars.Series.clear": [[998, null]], "polars.Series.clip": [[999, null]], "polars.Series.clone": [[1000, null]], "polars.Series.cos": [[1001, null]], "polars.Series.cosh": [[1002, null]], "polars.Series.cot": [[1003, null]], "polars.Series.count": [[1004, null]], "polars.Series.cum_count": [[1005, null]], "polars.Series.cum_max": [[1006, null]], "polars.Series.cum_min": [[1007, null]], "polars.Series.cum_prod": [[1008, null]], "polars.Series.cum_sum": [[1009, null]], "polars.Series.cumulative_eval": [[1010, null]], "polars.Series.cut": [[1011, null]], "polars.Series.describe": [[1012, null]], "polars.Series.diff": [[1013, null]], "polars.Series.dot": [[1014, null]], "polars.Series.drop_nans": [[1015, null]], "polars.Series.drop_nulls": [[1016, null]], "polars.Series.dt.add_business_days": [[1017, null]], "polars.Series.dt.base_utc_offset": [[1018, null]], "polars.Series.dt.cast_time_unit": [[1019, null]], "polars.Series.dt.century": [[1020, null]], "polars.Series.dt.combine": [[1021, null]], "polars.Series.dt.convert_time_zone": [[1022, null]], "polars.Series.dt.date": [[1023, null]], "polars.Series.dt.datetime": [[1024, null]], "polars.Series.dt.day": [[1025, null]], "polars.Series.dt.dst_offset": [[1026, null]], "polars.Series.dt.epoch": [[1027, null]], "polars.Series.dt.hour": [[1028, null]], "polars.Series.dt.is_leap_year": [[1029, null]], "polars.Series.dt.iso_year": [[1030, null]], "polars.Series.dt.max": [[1031, null]], "polars.Series.dt.mean": [[1032, null]], "polars.Series.dt.median": [[1033, null]], "polars.Series.dt.microsecond": [[1034, null]], "polars.Series.dt.millennium": [[1035, null]], "polars.Series.dt.millisecond": [[1036, null]], "polars.Series.dt.min": [[1037, null]], "polars.Series.dt.minute": [[1038, null]], "polars.Series.dt.month": [[1039, null]], "polars.Series.dt.month_end": [[1040, null]], "polars.Series.dt.month_start": [[1041, null]], "polars.Series.dt.nanosecond": [[1042, null]], "polars.Series.dt.offset_by": [[1043, null]], "polars.Series.dt.ordinal_day": [[1044, null]], "polars.Series.dt.quarter": [[1045, null]], "polars.Series.dt.replace": [[1046, null]], "polars.Series.dt.replace_time_zone": [[1047, null]], "polars.Series.dt.round": [[1048, null]], "polars.Series.dt.second": [[1049, null]], "polars.Series.dt.strftime": [[1050, null]], "polars.Series.dt.time": [[1051, null]], "polars.Series.dt.timestamp": [[1052, null]], "polars.Series.dt.to_string": [[1053, null]], "polars.Series.dt.total_days": [[1054, null]], "polars.Series.dt.total_hours": [[1055, null]], "polars.Series.dt.total_microseconds": [[1056, null]], "polars.Series.dt.total_milliseconds": [[1057, null]], "polars.Series.dt.total_minutes": [[1058, null]], "polars.Series.dt.total_nanoseconds": [[1059, null]], "polars.Series.dt.total_seconds": [[1060, null]], "polars.Series.dt.truncate": [[1061, null]], "polars.Series.dt.week": [[1062, null]], "polars.Series.dt.weekday": [[1063, null]], "polars.Series.dt.with_time_unit": [[1064, null]], "polars.Series.dt.year": [[1065, null]], "polars.Series.dtype": [[1066, null]], "polars.Series.entropy": [[1067, null]], "polars.Series.eq": [[1068, null]], "polars.Series.eq_missing": [[1069, null]], "polars.Series.equals": [[1070, null]], "polars.Series.estimated_size": [[1071, null]], "polars.Series.ewm_mean": [[1072, null]], "polars.Series.ewm_mean_by": [[1073, null]], "polars.Series.ewm_std": [[1074, null]], "polars.Series.ewm_var": [[1075, null]], "polars.Series.exp": [[1076, null]], "polars.Series.explode": [[1077, null]], "polars.Series.extend": [[1078, null]], "polars.Series.extend_constant": [[1079, null]], "polars.Series.fill_nan": [[1080, null]], "polars.Series.fill_null": [[1081, null]], "polars.Series.filter": [[1082, null]], "polars.Series.first": [[1083, null]], "polars.Series.flags": [[1084, null]], "polars.Series.floor": [[1085, null]], "polars.Series.gather": [[1086, null]], "polars.Series.gather_every": [[1087, null]], "polars.Series.ge": [[1088, null]], "polars.Series.get_chunks": [[1089, null]], "polars.Series.gt": [[1090, null]], "polars.Series.has_nulls": [[1091, null]], "polars.Series.has_validity": [[1092, null]], "polars.Series.hash": [[1093, null]], "polars.Series.head": [[1094, null]], "polars.Series.hist": [[1095, null]], "polars.Series.implode": [[1096, null]], "polars.Series.interpolate": [[1097, null]], "polars.Series.interpolate_by": [[1098, null]], "polars.Series.is_between": [[1099, null]], "polars.Series.is_duplicated": [[1100, null]], "polars.Series.is_empty": [[1101, null]], "polars.Series.is_finite": [[1102, null]], "polars.Series.is_first_distinct": [[1103, null]], "polars.Series.is_in": [[1104, null]], "polars.Series.is_infinite": [[1105, null]], "polars.Series.is_last_distinct": [[1106, null]], "polars.Series.is_nan": [[1107, null]], "polars.Series.is_not_nan": [[1108, null]], "polars.Series.is_not_null": [[1109, null]], "polars.Series.is_null": [[1110, null]], "polars.Series.is_sorted": [[1111, null]], "polars.Series.is_unique": [[1112, null]], "polars.Series.item": [[1113, null]], "polars.Series.kurtosis": [[1114, null]], "polars.Series.last": [[1115, null]], "polars.Series.le": [[1116, null]], "polars.Series.len": [[1117, null]], "polars.Series.limit": [[1118, null]], "polars.Series.list.all": [[1119, null]], "polars.Series.list.any": [[1120, null]], "polars.Series.list.arg_max": [[1121, null]], "polars.Series.list.arg_min": [[1122, null]], "polars.Series.list.concat": [[1123, null]], "polars.Series.list.contains": [[1124, null]], "polars.Series.list.count_matches": [[1125, null]], "polars.Series.list.diff": [[1126, null]], "polars.Series.list.drop_nulls": [[1127, null]], "polars.Series.list.eval": [[1128, null]], "polars.Series.list.explode": [[1129, null]], "polars.Series.list.first": [[1130, null]], "polars.Series.list.gather": [[1131, null]], "polars.Series.list.gather_every": [[1132, null]], "polars.Series.list.get": [[1133, null]], "polars.Series.list.head": [[1134, null]], "polars.Series.list.join": [[1135, null]], "polars.Series.list.last": [[1136, null]], "polars.Series.list.len": [[1137, null]], "polars.Series.list.max": [[1138, null]], "polars.Series.list.mean": [[1139, null]], "polars.Series.list.median": [[1140, null]], "polars.Series.list.min": [[1141, null]], "polars.Series.list.n_unique": [[1142, null]], "polars.Series.list.reverse": [[1143, null]], "polars.Series.list.sample": [[1144, null]], "polars.Series.list.set_difference": [[1145, null]], "polars.Series.list.set_intersection": [[1146, null]], "polars.Series.list.set_symmetric_difference": [[1147, null]], "polars.Series.list.set_union": [[1148, null]], "polars.Series.list.shift": [[1149, null]], "polars.Series.list.slice": [[1150, null]], "polars.Series.list.sort": [[1151, null]], "polars.Series.list.std": [[1152, null]], "polars.Series.list.sum": [[1153, null]], "polars.Series.list.tail": [[1154, null]], "polars.Series.list.to_array": [[1155, null]], "polars.Series.list.to_struct": [[1156, null]], "polars.Series.list.unique": [[1157, null]], "polars.Series.list.var": [[1158, null]], "polars.Series.log": [[1159, null]], "polars.Series.log10": [[1160, null]], "polars.Series.log1p": [[1161, null]], "polars.Series.lower_bound": [[1162, null]], "polars.Series.lt": [[1163, null]], "polars.Series.map_elements": [[1164, null]], "polars.Series.max": [[1165, null]], "polars.Series.mean": [[1166, null]], "polars.Series.median": [[1167, null]], "polars.Series.min": [[1168, null]], "polars.Series.mode": [[1169, null]], "polars.Series.n_chunks": [[1170, null]], "polars.Series.n_unique": [[1171, null]], "polars.Series.name": [[1172, null]], "polars.Series.nan_max": [[1173, null]], "polars.Series.nan_min": [[1174, null]], "polars.Series.ne": [[1175, null]], "polars.Series.ne_missing": [[1176, null]], "polars.Series.new_from_index": [[1177, null]], "polars.Series.not_": [[1178, null]], "polars.Series.null_count": [[1179, null]], "polars.Series.pct_change": [[1180, null]], "polars.Series.peak_max": [[1181, null]], "polars.Series.peak_min": [[1182, null]], "polars.Series.pow": [[1183, null]], "polars.Series.product": [[1184, null]], "polars.Series.qcut": [[1185, null]], "polars.Series.quantile": [[1186, null]], "polars.Series.rank": [[1187, null]], "polars.Series.rechunk": [[1188, null]], "polars.Series.reinterpret": [[1189, null]], "polars.Series.rename": [[1190, null]], "polars.Series.replace": [[1191, null]], "polars.Series.replace_strict": [[1192, null]], "polars.Series.reshape": [[1193, null]], "polars.Series.reverse": [[1194, null]], "polars.Series.rle": [[1195, null]], "polars.Series.rle_id": [[1196, null]], "polars.Series.rolling_map": [[1197, null]], "polars.Series.rolling_max": [[1198, null]], "polars.Series.rolling_mean": [[1199, null]], "polars.Series.rolling_median": [[1200, null]], "polars.Series.rolling_min": [[1201, null]], "polars.Series.rolling_quantile": [[1202, null]], "polars.Series.rolling_skew": [[1203, null]], "polars.Series.rolling_std": [[1204, null]], "polars.Series.rolling_sum": [[1205, null]], "polars.Series.rolling_var": [[1206, null]], "polars.Series.round": [[1207, null]], "polars.Series.round_sig_figs": [[1208, null]], "polars.Series.sample": [[1209, null]], "polars.Series.scatter": [[1210, null]], "polars.Series.search_sorted": [[1211, null]], "polars.Series.set": [[1212, null]], "polars.Series.set_sorted": [[1213, null]], "polars.Series.shape": [[1214, null]], "polars.Series.shift": [[1215, null]], "polars.Series.shrink_dtype": [[1216, null]], "polars.Series.shrink_to_fit": [[1217, null]], "polars.Series.shuffle": [[1218, null]], "polars.Series.sign": [[1219, null]], "polars.Series.sin": [[1220, null]], "polars.Series.sinh": [[1221, null]], "polars.Series.skew": [[1222, null]], "polars.Series.slice": [[1223, null]], "polars.Series.sort": [[1224, null]], "polars.Series.sqrt": [[1225, null]], "polars.Series.std": [[1226, null]], "polars.Series.str.concat": [[1227, null]], "polars.Series.str.contains": [[1228, null]], "polars.Series.str.contains_any": [[1229, null]], "polars.Series.str.count_matches": [[1230, null]], "polars.Series.str.decode": [[1231, null]], "polars.Series.str.encode": [[1232, null]], "polars.Series.str.ends_with": [[1233, null]], "polars.Series.str.escape_regex": [[1234, null]], "polars.Series.str.explode": [[1235, null]], "polars.Series.str.extract": [[1236, null]], "polars.Series.str.extract_all": [[1237, null]], "polars.Series.str.extract_groups": [[1238, null]], "polars.Series.str.extract_many": [[1239, null]], "polars.Series.str.find": [[1240, null]], "polars.Series.str.find_many": [[1241, null]], "polars.Series.str.head": [[1242, null]], "polars.Series.str.join": [[1243, null]], "polars.Series.str.json_decode": [[1244, null]], "polars.Series.str.json_path_match": [[1245, null]], "polars.Series.str.len_bytes": [[1246, null]], "polars.Series.str.len_chars": [[1247, null]], "polars.Series.str.pad_end": [[1248, null]], "polars.Series.str.pad_start": [[1249, null]], "polars.Series.str.replace": [[1250, null]], "polars.Series.str.replace_all": [[1251, null]], "polars.Series.str.replace_many": [[1252, null]], "polars.Series.str.reverse": [[1253, null]], "polars.Series.str.slice": [[1254, null]], "polars.Series.str.split": [[1255, null]], "polars.Series.str.split_exact": [[1256, null]], "polars.Series.str.splitn": [[1257, null]], "polars.Series.str.starts_with": [[1258, null]], "polars.Series.str.strip_chars": [[1259, null]], "polars.Series.str.strip_chars_end": [[1260, null]], "polars.Series.str.strip_chars_start": [[1261, null]], "polars.Series.str.strip_prefix": [[1262, null]], "polars.Series.str.strip_suffix": [[1263, null]], "polars.Series.str.strptime": [[1264, null]], "polars.Series.str.tail": [[1265, null]], "polars.Series.str.to_date": [[1266, null]], "polars.Series.str.to_datetime": [[1267, null]], "polars.Series.str.to_decimal": [[1268, null]], "polars.Series.str.to_integer": [[1269, null]], "polars.Series.str.to_lowercase": [[1270, null]], "polars.Series.str.to_time": [[1271, null]], "polars.Series.str.to_titlecase": [[1272, null]], "polars.Series.str.to_uppercase": [[1273, null]], "polars.Series.str.zfill": [[1274, null]], "polars.Series.struct.field": [[1275, null]], "polars.Series.struct.fields": [[1276, null]], "polars.Series.struct.json_encode": [[1277, null]], "polars.Series.struct.rename_fields": [[1278, null]], "polars.Series.struct.schema": [[1279, null]], "polars.Series.struct.unnest": [[1280, null]], "polars.Series.sum": [[1281, null]], "polars.Series.tail": [[1282, null]], "polars.Series.tan": [[1283, null]], "polars.Series.tanh": [[1284, null]], "polars.Series.to_arrow": [[1285, null]], "polars.Series.to_dummies": [[1286, null]], "polars.Series.to_frame": [[1287, null]], "polars.Series.to_init_repr": [[1288, null]], "polars.Series.to_jax": [[1289, null]], "polars.Series.to_list": [[1290, null]], "polars.Series.to_numpy": [[1291, null]], "polars.Series.to_pandas": [[1292, null]], "polars.Series.to_physical": [[1293, null]], "polars.Series.to_torch": [[1294, null]], "polars.Series.top_k": [[1295, null]], "polars.Series.unique": [[1296, null]], "polars.Series.unique_counts": [[1297, null]], "polars.Series.upper_bound": [[1298, null]], "polars.Series.value_counts": [[1299, null]], "polars.Series.var": [[1300, null]], "polars.Series.zip_with": [[1301, null]], "polars.StringCache": [[50, null]], "polars.align_frames": [[51, null]], "polars.all": [[722, null]], "polars.all_horizontal": [[723, null]], "polars.any": [[724, null]], "polars.any_horizontal": [[725, null]], "polars.api.register_dataframe_namespace": [[52, null]], "polars.api.register_expr_namespace": [[53, null]], "polars.api.register_lazyframe_namespace": [[54, null]], "polars.api.register_series_namespace": [[55, null]], "polars.approx_n_unique": [[726, null]], "polars.arange": [[727, null]], "polars.arctan2": [[728, null]], "polars.arctan2d": [[729, null]], "polars.arg_sort_by": [[730, null]], "polars.arg_where": [[731, null]], "polars.build_info": [[56, null]], "polars.business_day_count": [[732, null]], "polars.coalesce": [[733, null]], "polars.col": [[801, null]], "polars.collect_all": [[57, null]], "polars.collect_all_async": [[58, null]], "polars.concat": [[59, null]], "polars.concat_arr": [[734, null]], "polars.concat_list": [[735, null]], "polars.concat_str": [[736, null]], "polars.corr": [[737, null]], "polars.count": [[738, null]], "polars.cov": [[739, null]], "polars.cum_count": [[740, null]], "polars.cum_fold": [[741, null]], "polars.cum_reduce": [[742, null]], "polars.cum_sum": [[743, null]], "polars.cum_sum_horizontal": [[744, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[298, null]], "polars.dataframe.group_by.GroupBy.agg": [[299, null]], "polars.dataframe.group_by.GroupBy.all": [[300, null]], "polars.dataframe.group_by.GroupBy.count": [[301, null]], "polars.dataframe.group_by.GroupBy.first": [[302, null]], "polars.dataframe.group_by.GroupBy.head": [[303, null]], "polars.dataframe.group_by.GroupBy.last": [[304, null]], "polars.dataframe.group_by.GroupBy.len": [[305, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[306, null]], "polars.dataframe.group_by.GroupBy.max": [[307, null]], "polars.dataframe.group_by.GroupBy.mean": [[308, null]], "polars.dataframe.group_by.GroupBy.median": [[309, null]], "polars.dataframe.group_by.GroupBy.min": [[310, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[311, null]], "polars.dataframe.group_by.GroupBy.quantile": [[312, null]], "polars.dataframe.group_by.GroupBy.sum": [[313, null]], "polars.dataframe.group_by.GroupBy.tail": [[314, null]], "polars.datatypes.Array": [[60, null]], "polars.datatypes.Binary": [[61, null]], "polars.datatypes.Boolean": [[62, null]], "polars.datatypes.Categorical": [[63, null]], "polars.datatypes.DataType": [[64, null]], "polars.datatypes.Date": [[65, null]], "polars.datatypes.Datetime": [[66, null]], "polars.datatypes.Decimal": [[67, null]], "polars.datatypes.Duration": [[68, null]], "polars.datatypes.Enum": [[69, null]], "polars.datatypes.Float32": [[70, null]], "polars.datatypes.Float64": [[71, null]], "polars.datatypes.Int128": [[72, null]], "polars.datatypes.Int16": [[73, null]], "polars.datatypes.Int32": [[74, null]], "polars.datatypes.Int64": [[75, null]], "polars.datatypes.Int8": [[76, null]], "polars.datatypes.List": [[77, null]], "polars.datatypes.Null": [[78, null]], "polars.datatypes.Object": [[79, null]], "polars.datatypes.String": [[80, null]], "polars.datatypes.Struct": [[81, null]], "polars.datatypes.Time": [[82, null]], "polars.datatypes.UInt16": [[83, null]], "polars.datatypes.UInt32": [[84, null]], "polars.datatypes.UInt64": [[85, null]], "polars.datatypes.UInt8": [[86, null]], "polars.datatypes.Unknown": [[87, null]], "polars.datatypes.Utf8": [[88, null]], "polars.date": [[745, null]], "polars.date_range": [[746, null]], "polars.date_ranges": [[747, null]], "polars.datetime": [[748, null]], "polars.datetime_range": [[749, null]], "polars.datetime_ranges": [[750, null]], "polars.disable_string_cache": [[89, null]], "polars.duration": [[751, null]], "polars.element": [[752, null]], "polars.enable_string_cache": [[90, null]], "polars.escape_regex": [[91, null]], "polars.exceptions.CategoricalRemappingWarning": [[92, null]], "polars.exceptions.ChronoFormatWarning": [[93, null]], "polars.exceptions.ColumnNotFoundError": [[94, null]], "polars.exceptions.ComputeError": [[95, null]], "polars.exceptions.CustomUFuncWarning": [[96, null]], "polars.exceptions.DataOrientationWarning": [[97, null]], "polars.exceptions.DuplicateError": [[98, null]], "polars.exceptions.InvalidOperationError": [[99, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[100, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[101, null]], "polars.exceptions.NoDataError": [[102, null]], "polars.exceptions.NoRowsReturnedError": [[103, null]], "polars.exceptions.OutOfBoundsError": [[104, null]], "polars.exceptions.PanicException": [[105, null]], "polars.exceptions.ParameterCollisionError": [[106, null]], "polars.exceptions.PerformanceWarning": [[107, null]], "polars.exceptions.PolarsError": [[108, null]], "polars.exceptions.PolarsInefficientMapWarning": [[109, null]], "polars.exceptions.PolarsWarning": [[110, null]], "polars.exceptions.RowsError": [[111, null]], "polars.exceptions.SQLInterfaceError": [[112, null]], "polars.exceptions.SQLSyntaxError": [[113, null]], "polars.exceptions.SchemaError": [[114, null]], "polars.exceptions.SchemaFieldNotFoundError": [[115, null]], "polars.exceptions.ShapeError": [[116, null]], "polars.exceptions.StringCacheMismatchError": [[117, null]], "polars.exceptions.StructFieldNotFoundError": [[118, null]], "polars.exceptions.TooManyRowsReturnedError": [[119, null]], "polars.exceptions.UnstableWarning": [[120, null]], "polars.exceptions.UnsuitableSQLError": [[121, null]], "polars.exclude": [[753, null]], "polars.first": [[754, null]], "polars.fold": [[755, null]], "polars.format": [[756, null]], "polars.from_arrow": [[122, null]], "polars.from_dataframe": [[123, null]], "polars.from_dict": [[124, null]], "polars.from_dicts": [[125, null]], "polars.from_epoch": [[757, null]], "polars.from_numpy": [[126, null]], "polars.from_pandas": [[127, null]], "polars.from_records": [[128, null]], "polars.from_repr": [[129, null]], "polars.get_index_type": [[130, null]], "polars.groups": [[758, null]], "polars.head": [[759, null]], "polars.implode": [[760, null]], "polars.int_range": [[761, null]], "polars.int_ranges": [[762, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[131, null]], "polars.json_normalize": [[132, null]], "polars.last": [[763, null]], "polars.lazyframe.engine_config.GPUEngine": [[894, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[895, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[896, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[897, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[898, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[900, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[901, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[902, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[903, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[904, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[905, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[906, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[907, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[908, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[909, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[910, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[911, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[912, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[913, null]], "polars.len": [[764, null]], "polars.lit": [[765, null]], "polars.map_batches": [[766, null]], "polars.map_groups": [[767, null]], "polars.max": [[768, null]], "polars.max_horizontal": [[769, null]], "polars.mean": [[770, null]], "polars.mean_horizontal": [[771, null]], "polars.median": [[772, null]], "polars.min": [[773, null]], "polars.min_horizontal": [[774, null]], "polars.n_unique": [[775, null]], "polars.nth": [[776, null]], "polars.ones": [[777, null]], "polars.quantile": [[778, null]], "polars.read_avro": [[133, null]], "polars.read_clipboard": [[134, null]], "polars.read_csv": [[135, null]], "polars.read_csv_batched": [[136, null]], "polars.read_database": [[137, null]], "polars.read_database_uri": [[138, null]], "polars.read_delta": [[139, null]], "polars.read_excel": [[140, null]], "polars.read_ipc": [[141, null]], "polars.read_ipc_schema": [[142, null]], "polars.read_ipc_stream": [[143, null]], "polars.read_json": [[144, null]], "polars.read_ndjson": [[145, null]], "polars.read_ods": [[146, null]], "polars.read_parquet": [[147, null]], "polars.read_parquet_schema": [[148, null]], "polars.reduce": [[779, null]], "polars.repeat": [[780, null]], "polars.rolling_corr": [[781, null]], "polars.rolling_cov": [[782, null]], "polars.scan_csv": [[149, null]], "polars.scan_delta": [[150, null]], "polars.scan_iceberg": [[151, null]], "polars.scan_ipc": [[152, null]], "polars.scan_ndjson": [[153, null]], "polars.scan_parquet": [[154, null]], "polars.scan_pyarrow_dataset": [[155, null]], "polars.select": [[783, null]], "polars.set_random_seed": [[156, null]], "polars.show_versions": [[157, null]], "polars.sql": [[784, null]], "polars.sql_expr": [[785, null]], "polars.std": [[786, null]], "polars.struct": [[787, null]], "polars.sum": [[788, null]], "polars.sum_horizontal": [[789, null]], "polars.tail": [[790, null]], "polars.testing.assert_frame_equal": [[158, null]], "polars.testing.assert_frame_not_equal": [[159, null]], "polars.testing.assert_series_equal": [[160, null]], "polars.testing.assert_series_not_equal": [[161, null]], "polars.testing.parametric.column": [[162, null]], "polars.testing.parametric.columns": [[163, null]], "polars.testing.parametric.create_list_strategy": [[164, null]], "polars.testing.parametric.dataframes": [[165, null]], "polars.testing.parametric.dtypes": [[166, null]], "polars.testing.parametric.lists": [[167, null]], "polars.testing.parametric.load_profile": [[168, null]], "polars.testing.parametric.series": [[169, null]], "polars.testing.parametric.set_profile": [[170, null]], "polars.thread_pool_size": [[171, null]], "polars.threadpool_size": [[172, null]], "polars.time": [[791, null]], "polars.time_range": [[792, null]], "polars.time_ranges": [[793, null]], "polars.using_string_cache": [[173, null]], "polars.var": [[794, null]], "polars.when": [[795, null]], "polars.zeros": [[796, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[176, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[927, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[177, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[928, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[178, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1338, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1338, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[179, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[929, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[60, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[61, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[62, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[63, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[64, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[65, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[66, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[67, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[68, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[69, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[70, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[71, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[72, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[73, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[74, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[75, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[76, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[77, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[78, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[79, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[80, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[81, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[82, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[83, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[84, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[85, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[86, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[87, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[894, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1338, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[162, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[328, "polars.Expr.abs", false]], "abs() (polars.series method)": [[930, "polars.Series.abs", false]], "add() (polars.expr method)": [[329, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[415, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1017, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[330, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[331, "polars.Expr.alias", false]], "alias() (polars.series method)": [[931, "polars.Series.alias", false]], "align_frames() (in module polars)": [[51, "polars.align_frames", false]], "all() (in module polars)": [[722, "polars.all", false]], "all() (in module polars.selectors)": [[925, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[332, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[348, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[510, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[932, "polars.Series.all", false]], "all() (polars.series.arr method)": [[947, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1119, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[723, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[925, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[925, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[333, "polars.Expr.and_", false]], "any() (in module polars)": [[724, "polars.any", false]], "any() (polars.expr method)": [[334, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[349, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[511, "polars.Expr.list.any", false]], "any() (polars.series method)": [[933, "polars.Series.any", false]], "any() (polars.series.arr method)": [[948, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1120, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[725, "polars.any_horizontal", false]], "append() (polars.expr method)": [[335, "polars.Expr.append", false]], "append() (polars.series method)": [[934, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[726, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[336, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[820, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[935, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[727, "polars.arange", false]], "arccos() (polars.expr method)": [[337, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[936, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[338, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[937, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[339, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[938, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[340, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[939, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[341, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[940, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[728, "polars.arctan2", false]], "arctan2d() (in module polars)": [[729, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[342, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[941, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[343, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[350, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[512, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[942, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[949, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1121, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[344, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[351, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[513, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[943, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[950, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1122, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[345, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[944, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[730, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[346, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[945, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[347, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[946, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[731, "polars.arg_where", false]], "array (class in polars.datatypes)": [[60, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[158, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[159, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[160, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[161, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[372, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[416, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1018, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[61, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[925, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[380, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[978, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[381, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[979, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[382, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[980, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[383, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[981, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[384, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[982, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[385, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[983, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[386, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[984, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[387, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[985, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[388, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[986, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[62, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[925, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[181, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[389, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[821, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[987, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[390, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[56, "polars.build_info", false]], "business_day_count() (in module polars)": [[732, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[925, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[925, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[925, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[822, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[911, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[182, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[391, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[823, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[988, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[417, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1019, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[63, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[925, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[92, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[395, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[995, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[396, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[996, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[418, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1020, "polars.Series.dt.century", false]], "chronoformatwarning": [[93, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[997, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[183, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[824, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[998, "polars.Series.clear", false]], "clip() (polars.expr method)": [[397, "polars.Expr.clip", false]], "clip() (polars.series method)": [[999, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[184, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[825, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1000, "polars.Series.clone", false]], "coalesce() (in module polars)": [[733, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[826, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[57, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[58, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[827, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[185, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[828, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[162, "polars.testing.parametric.column", false]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[186, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[829, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[419, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1021, "polars.Series.dt.combine", false]], "computeerror": [[95, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[59, "polars.concat", false]], "concat() (polars.expr.list method)": [[514, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[653, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1123, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1227, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[734, "polars.concat_arr", false]], "concat_list() (in module polars)": [[735, "polars.concat_list", false]], "concat_str() (in module polars)": [[736, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[925, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[352, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[373, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[515, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[654, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[951, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[971, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1124, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1228, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[655, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1229, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[420, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1022, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[737, "polars.corr", false]], "corr() (polars.dataframe method)": [[187, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[398, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1001, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[399, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1002, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[400, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1003, "polars.Series.cot", false]], "count() (in module polars)": [[738, "polars.count", false]], "count() (polars.dataframe method)": [[188, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[401, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[830, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1004, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[353, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[516, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[656, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[952, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1125, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1230, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[739, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[740, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[402, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1005, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[741, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[403, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1006, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[404, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1007, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[405, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1008, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[742, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[743, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[406, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1009, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[744, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[407, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1010, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[96, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[408, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1011, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[97, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[64, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[65, "polars.datatypes.Date", false]], "date() (in module polars)": [[745, "polars.date", false]], "date() (in module polars.selectors)": [[925, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[421, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1023, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[746, "polars.date_range", false]], "date_ranges() (in module polars)": [[747, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[66, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[748, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[925, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[422, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1024, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[749, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[750, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[423, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1025, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[67, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[925, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[374, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[657, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[972, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1231, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[409, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[189, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[831, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1012, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[190, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[410, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[832, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[411, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[517, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1013, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1126, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[925, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[89, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[412, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1014, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[191, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[833, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[192, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[193, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[413, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[834, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1015, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[194, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[414, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[518, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[835, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1016, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1127, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[424, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1026, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1066, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[195, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[836, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[98, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[68, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[751, "polars.duration", false]], "duration() (in module polars.selectors)": [[925, "polars.selectors.duration", false]], "element() (in module polars)": [[752, "polars.element", false]], "enable_string_cache() (in module polars)": [[90, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[375, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[658, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[973, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1232, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[925, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[376, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[659, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[974, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1233, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[460, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1067, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[69, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[425, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1027, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[461, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[560, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1068, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[462, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1069, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[196, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1070, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[91, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[660, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1234, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[197, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1071, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[519, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1128, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[463, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1072, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[464, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1073, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[465, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1074, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[466, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1075, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[753, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[925, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[467, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1319, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1320, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[468, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1076, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[925, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[837, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[198, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[469, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[354, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[520, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[661, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[838, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1077, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[953, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1129, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1235, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[199, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1078, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[470, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1079, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[662, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1236, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[663, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1237, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[664, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1238, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[665, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1239, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[912, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[913, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[701, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1275, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1276, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[200, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[471, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[839, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1080, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[201, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[472, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[840, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1081, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[202, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[473, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[841, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1082, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[666, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1240, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[667, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1241, "polars.Series.str.find_many", false]], "first() (in module polars)": [[754, "polars.first", false]], "first() (in module polars.selectors)": [[925, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[474, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[355, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[521, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[842, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1083, "polars.Series.first", false]], "first() (polars.series.arr method)": [[954, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1130, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[203, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1084, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[475, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[925, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[70, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[71, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[476, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1085, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[477, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[755, "polars.fold", false]], "fold() (polars.dataframe method)": [[204, "polars.DataFrame.fold", false]], "format() (in module polars)": [[756, "polars.format", false]], "forward_fill() (polars.expr method)": [[478, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[122, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[123, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[124, "polars.from_dict", false]], "from_dicts() (in module polars)": [[125, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[757, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[479, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[126, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[127, "polars.from_pandas", false]], "from_records() (in module polars)": [[128, "polars.from_records", false]], "from_repr() (in module polars)": [[129, "polars.from_repr", false]], "gather() (polars.expr method)": [[480, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[522, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1086, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1131, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[205, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[481, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[523, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[843, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1087, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1132, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[482, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1088, "polars.Series.ge", false]], "get() (polars.expr method)": [[483, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[356, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[524, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[955, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1133, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[392, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[989, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1089, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[206, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[207, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[208, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[130, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[209, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[894, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[210, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[844, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[211, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[845, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[758, "polars.groups", false]], "gt() (polars.expr method)": [[484, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1090, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[561, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[485, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1091, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1092, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[486, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1093, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[212, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[759, "polars.head", false]], "head() (polars.dataframe method)": [[213, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[487, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[525, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[668, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[846, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1094, "polars.Series.head", false]], "head() (polars.series.list method)": [[1134, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1242, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[214, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[488, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1095, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[426, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1028, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[215, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[760, "polars.implode", false]], "implode() (polars.expr method)": [[489, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1096, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[216, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[490, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[847, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[72, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[73, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[74, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[75, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[76, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[761, "polars.int_range", false]], "int_ranges() (in module polars)": [[762, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[925, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[217, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[491, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[848, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1097, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[492, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1098, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[99, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[493, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1099, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[562, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[563, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[218, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[494, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1100, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[219, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1101, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[495, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1102, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[496, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1103, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[497, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1104, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[498, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1105, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[499, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1106, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[427, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1029, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[564, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[990, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[500, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1107, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[501, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1108, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[502, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1109, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[503, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1110, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[565, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[925, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1111, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[220, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[504, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1112, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[428, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1030, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[221, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1113, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[222, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[223, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[224, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[225, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[357, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[526, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[669, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[849, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[956, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1135, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1243, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[226, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[850, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[227, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[851, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[670, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1244, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[702, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1277, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[132, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[671, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1245, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[580, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[505, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1114, "polars.Series.kurtosis", false]], "last() (in module polars)": [[763, "polars.last", false]], "last() (in module polars.selectors)": [[925, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[506, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[358, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[527, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[852, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1115, "polars.Series.last", false]], "last() (polars.series.arr method)": [[957, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1136, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[228, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[853, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[507, "polars.Expr.le", false]], "le() (polars.series method)": [[1116, "polars.Series.le", false]], "len() (in module polars)": [[764, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[508, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[528, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1117, "polars.Series.len", false]], "len() (polars.series.list method)": [[1137, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[393, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[672, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[991, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1246, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[394, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[673, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[992, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1247, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[229, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[509, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[854, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1118, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[77, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[765, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[550, "polars.Expr.log", false]], "log() (polars.series method)": [[1159, "polars.Series.log", false]], "log10() (polars.expr method)": [[551, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1160, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[552, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1161, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[553, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1162, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[554, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1163, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[581, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[766, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[555, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[855, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[556, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1164, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[582, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[767, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[230, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[100, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[925, "polars.selectors.matches", false]], "max() (in module polars)": [[768, "polars.max", false]], "max() (polars.dataframe method)": [[231, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[557, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[359, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[529, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[856, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1165, "polars.Series.max", false]], "max() (polars.series.arr method)": [[958, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1031, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1138, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[769, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[770, "polars.mean", false]], "mean() (polars.dataframe method)": [[233, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[558, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[530, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[857, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1166, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1032, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1139, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[771, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[234, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[772, "polars.median", false]], "median() (polars.dataframe method)": [[235, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[559, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[360, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[531, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[858, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1167, "polars.Series.median", false]], "median() (polars.series.arr method)": [[959, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1033, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1140, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[236, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[859, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[237, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[860, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[429, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1034, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[430, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1035, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[431, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1036, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[773, "polars.min", false]], "min() (polars.dataframe method)": [[238, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[575, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[361, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[532, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[861, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1168, "polars.Series.min", false]], "min() (polars.series.arr method)": [[960, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1037, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1141, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[774, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[239, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[432, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1038, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[576, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[577, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1169, "polars.Series.mode", false]], "module": [[923, "module-polars.plugins", false], [925, "module-polars.selectors", false]], "moduleupgraderequirederror": [[101, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[433, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1039, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[434, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1040, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[435, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1041, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[578, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[240, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1170, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[775, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[241, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[579, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[362, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[533, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1171, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[961, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1142, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1172, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[589, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1173, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[590, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1174, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[436, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1042, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[591, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[566, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1175, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[592, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1176, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[593, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1177, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[131, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[102, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[103, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[594, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1178, "polars.Series.not_", false]], "nth() (in module polars)": [[776, "polars.nth", false]], "null (class in polars.datatypes)": [[78, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[242, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[595, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[862, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1179, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[925, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[79, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[437, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1043, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[777, "polars.ones", false]], "or_() (polars.expr method)": [[596, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[438, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1044, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[104, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[567, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[597, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[674, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1248, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[675, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1249, "polars.Series.str.pad_start", false]], "panicexception": [[105, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[106, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[243, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[598, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1180, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[599, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1181, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[600, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1182, "polars.Series.peak_min", false]], "performancewarning": [[107, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[244, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[601, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[863, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[245, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[323, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1315, "polars.Series.plot", false]], "polars.plugins": [[923, "module-polars.plugins", false]], "polars.selectors": [[925, "module-polars.selectors", false]], "polarserror": [[108, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[109, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[110, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[568, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[602, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1183, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[583, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[584, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[246, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[603, "polars.Expr.product", false]], "product() (polars.series method)": [[1184, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[864, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[604, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1185, "polars.Series.qcut", false]], "quantile() (in module polars)": [[778, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[247, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[605, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[865, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1186, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[439, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1045, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[606, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[607, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1187, "polars.Series.rank", false]], "read_avro() (in module polars)": [[133, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[134, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[135, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[136, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[137, "polars.read_database", false]], "read_database_uri() (in module polars)": [[138, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[139, "polars.read_delta", false]], "read_excel() (in module polars)": [[140, "polars.read_excel", false]], "read_ipc() (in module polars)": [[141, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[142, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[143, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[144, "polars.read_json", false]], "read_ndjson() (in module polars)": [[145, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[146, "polars.read_ods", false]], "read_parquet() (in module polars)": [[147, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[148, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[248, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[608, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1188, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[779, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1321, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[52, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[53, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1322, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[54, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1323, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[923, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[55, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[609, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[377, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1189, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[975, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[249, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[866, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1190, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[703, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1278, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[780, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[610, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[611, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[440, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[676, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1191, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1046, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1250, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[677, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1251, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[250, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[678, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1252, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[612, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1192, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[441, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1047, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[613, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1193, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[251, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[614, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[363, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[534, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[679, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[867, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1194, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[962, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1143, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1253, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[615, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1195, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[616, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1196, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[252, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[617, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[868, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[781, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[782, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[618, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1197, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[619, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1198, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[620, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[621, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1199, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[622, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[623, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1200, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[624, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[625, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1201, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[626, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[627, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1202, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[628, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[629, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1203, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[630, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1204, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[631, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[632, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1205, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[633, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[634, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1206, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[635, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[569, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[636, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[442, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1207, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1048, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[637, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1208, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[253, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[254, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[255, "polars.DataFrame.rows_by_key", false]], "rowserror": [[111, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[256, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[638, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[535, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1209, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1144, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[149, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[150, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[151, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[152, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[153, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[154, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[155, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1210, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[257, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[869, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1279, "polars.Series.struct.schema", false]], "schemaerror": [[114, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[115, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[639, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1211, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[443, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1049, "polars.Series.dt.second", false]], "select() (in module polars)": [[783, "polars.select", false]], "select() (polars.dataframe method)": [[258, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[870, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[259, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[871, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[260, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[570, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[872, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1212, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[536, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1145, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[537, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1146, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[156, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[261, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[640, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[873, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1213, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[538, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1147, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[539, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1148, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[262, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1214, "polars.Series.shape", false]], "shapeerror": [[116, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[263, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[641, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[364, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[540, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[874, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1215, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[963, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1149, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[571, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[875, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[157, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[642, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1216, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[264, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1217, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[643, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1218, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[644, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1219, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[925, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[645, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1220, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[646, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1221, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[378, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[976, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[647, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1222, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[265, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[648, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[541, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[680, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[876, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1223, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1150, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1254, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[266, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[649, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[365, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[542, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[877, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1224, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[964, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1151, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[650, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[681, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1255, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[682, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1256, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[683, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1257, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[784, "polars.sql", false]], "sql() (polars.dataframe method)": [[267, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[878, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[785, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1338, "polars.SQLContext", false]], "sqlinterfaceerror": [[112, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[113, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[651, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1225, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[925, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[379, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[684, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[977, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1258, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[786, "polars.std", false]], "std() (polars.dataframe method)": [[268, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[652, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[366, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[543, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[879, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1226, "polars.Series.std", false]], "std() (polars.series.arr method)": [[965, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1152, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[444, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1050, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[80, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[925, "polars.selectors.string", false]], "stringcache (class in polars)": [[50, "polars.StringCache", false]], "stringcachemismatcherror": [[117, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[685, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1259, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[686, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1260, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[687, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1261, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[688, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1262, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[689, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1263, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[690, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1264, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[81, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[787, "polars.struct", false]], "structfieldnotfounderror": [[118, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[324, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[706, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[585, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[586, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[788, "polars.sum", false]], "sum() (polars.dataframe method)": [[269, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[707, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[367, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[544, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[880, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1281, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[966, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1153, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[789, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[270, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1324, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[790, "polars.tail", false]], "tail() (polars.dataframe method)": [[271, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[314, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[708, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[545, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[691, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[881, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1282, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1154, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1265, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[709, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1283, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[710, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1284, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[925, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[171, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[172, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[82, "polars.datatypes.Time", false]], "time() (in module polars)": [[791, "polars.time", false]], "time() (in module polars.selectors)": [[925, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[445, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1051, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[792, "polars.time_range", false]], "time_ranges() (in module polars)": [[793, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[446, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1052, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[546, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1155, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[272, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1285, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[692, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1266, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[693, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1267, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[694, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1268, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[273, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[274, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[275, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1286, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1287, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[276, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1288, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[695, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1269, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[277, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1289, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[368, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1290, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[967, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[993, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[587, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[696, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1270, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[278, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1291, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[279, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1292, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[711, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1293, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[280, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[447, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1053, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[281, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[369, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[547, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[968, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1156, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[697, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1271, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[698, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1272, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[282, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1294, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[588, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[699, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1273, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[119, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[283, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[712, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[882, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1295, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[713, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[448, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1054, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[449, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1055, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[450, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1056, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[451, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1057, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[452, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1058, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[453, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1059, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[454, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1060, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[284, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[572, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[714, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[455, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1061, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[83, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[84, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[85, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[86, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[573, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[285, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[715, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[370, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[548, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[883, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1296, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[969, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1157, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[716, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1297, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[87, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[286, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[704, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[884, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1280, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[287, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[885, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1325, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[925, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[120, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[288, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[121, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[289, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[886, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[717, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1298, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[290, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[994, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[173, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[88, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[718, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1299, "polars.Series.value_counts", false]], "var() (in module polars)": [[794, "polars.var", false]], "var() (polars.dataframe method)": [[291, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[719, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[371, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[549, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[887, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1300, "polars.Series.var", false]], "var() (polars.series.arr method)": [[970, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1158, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[292, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[456, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1062, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[457, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1063, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[795, "polars.when", false]], "where() (polars.expr method)": [[720, "polars.Expr.where", false]], "width (polars.dataframe property)": [[293, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[888, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[294, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[889, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[295, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[890, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[891, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[705, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[296, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[892, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[297, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[893, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[458, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1064, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[574, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[721, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[459, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1065, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[796, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[700, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1274, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1301, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderAzure"], [34, 1, 1, "", "CredentialProviderGCP"], [1338, 1, 1, "", "SQLContext"], [50, 1, 1, "", "StringCache"], [51, 4, 1, "", "align_frames"], [722, 4, 1, "", "all"], [723, 4, 1, "", "all_horizontal"], [724, 4, 1, "", "any"], [725, 4, 1, "", "any_horizontal"], [726, 4, 1, "", "approx_n_unique"], [727, 4, 1, "", "arange"], [728, 4, 1, "", "arctan2"], [729, 4, 1, "", "arctan2d"], [730, 4, 1, "", "arg_sort_by"], [731, 4, 1, "", "arg_where"], [56, 4, 1, "", "build_info"], [732, 4, 1, "", "business_day_count"], [733, 4, 1, "", "coalesce"], [57, 4, 1, "", "collect_all"], [58, 4, 1, "", "collect_all_async"], [59, 4, 1, "", "concat"], [734, 4, 1, "", "concat_arr"], [735, 4, 1, "", "concat_list"], [736, 4, 1, "", "concat_str"], [737, 4, 1, "", "corr"], [738, 4, 1, "", "count"], [739, 4, 1, "", "cov"], [740, 4, 1, "", "cum_count"], [741, 4, 1, "", "cum_fold"], [742, 4, 1, "", "cum_reduce"], [743, 4, 1, "", "cum_sum"], [744, 4, 1, "", "cum_sum_horizontal"], [745, 4, 1, "", "date"], [746, 4, 1, "", "date_range"], [747, 4, 1, "", "date_ranges"], [748, 4, 1, "", "datetime"], [749, 4, 1, "", "datetime_range"], [750, 4, 1, "", "datetime_ranges"], [89, 4, 1, "", "disable_string_cache"], [751, 4, 1, "", "duration"], [752, 4, 1, "", "element"], [90, 4, 1, "", "enable_string_cache"], [91, 4, 1, "", "escape_regex"], [753, 4, 1, "", "exclude"], [754, 4, 1, "", "first"], [755, 4, 1, "", "fold"], [756, 4, 1, "", "format"], [122, 4, 1, "", "from_arrow"], [123, 4, 1, "", "from_dataframe"], [124, 4, 1, "", "from_dict"], [125, 4, 1, "", "from_dicts"], [757, 4, 1, "", "from_epoch"], [126, 4, 1, "", "from_numpy"], [127, 4, 1, "", "from_pandas"], [128, 4, 1, "", "from_records"], [129, 4, 1, "", "from_repr"], [130, 4, 1, "", "get_index_type"], [758, 4, 1, "", "groups"], [759, 4, 1, "", "head"], [760, 4, 1, "", "implode"], [761, 4, 1, "", "int_range"], [762, 4, 1, "", "int_ranges"], [132, 4, 1, "", "json_normalize"], [763, 4, 1, "", "last"], [764, 4, 1, "", "len"], [765, 4, 1, "", "lit"], [766, 4, 1, "", "map_batches"], [767, 4, 1, "", "map_groups"], [768, 4, 1, "", "max"], [769, 4, 1, "", "max_horizontal"], [770, 4, 1, "", "mean"], [771, 4, 1, "", "mean_horizontal"], [772, 4, 1, "", "median"], [773, 4, 1, "", "min"], [774, 4, 1, "", "min_horizontal"], [775, 4, 1, "", "n_unique"], [776, 4, 1, "", "nth"], [777, 4, 1, "", "ones"], [923, 6, 0, "-", "plugins"], [778, 4, 1, "", "quantile"], [133, 4, 1, "", "read_avro"], [134, 4, 1, "", "read_clipboard"], [135, 4, 1, "", "read_csv"], [136, 4, 1, "", "read_csv_batched"], [137, 4, 1, "", "read_database"], [138, 4, 1, "", "read_database_uri"], [139, 4, 1, "", "read_delta"], [140, 4, 1, "", "read_excel"], [141, 4, 1, "", "read_ipc"], [142, 4, 1, "", "read_ipc_schema"], [143, 4, 1, "", "read_ipc_stream"], [144, 4, 1, "", "read_json"], [145, 4, 1, "", "read_ndjson"], [146, 4, 1, "", "read_ods"], [147, 4, 1, "", "read_parquet"], [148, 4, 1, "", "read_parquet_schema"], [779, 4, 1, "", "reduce"], [780, 4, 1, "", "repeat"], [781, 4, 1, "", "rolling_corr"], [782, 4, 1, "", "rolling_cov"], [149, 4, 1, "", "scan_csv"], [150, 4, 1, "", "scan_delta"], [151, 4, 1, "", "scan_iceberg"], [152, 4, 1, "", "scan_ipc"], [153, 4, 1, "", "scan_ndjson"], [154, 4, 1, "", "scan_parquet"], [155, 4, 1, "", "scan_pyarrow_dataset"], [783, 4, 1, "", "select"], [925, 6, 0, "-", "selectors"], [156, 4, 1, "", "set_random_seed"], [157, 4, 1, "", "show_versions"], [784, 4, 1, "", "sql"], [785, 4, 1, "", "sql_expr"], [786, 4, 1, "", "std"], [787, 4, 1, "", "struct"], [788, 4, 1, "", "sum"], [789, 4, 1, "", "sum_horizontal"], [790, 4, 1, "", "tail"], [171, 4, 1, "", "thread_pool_size"], [172, 4, 1, "", "threadpool_size"], [791, 4, 1, "", "time"], [792, 4, 1, "", "time_range"], [793, 4, 1, "", "time_ranges"], [173, 4, 1, "", "using_string_cache"], [794, 4, 1, "", "var"], [795, 4, 1, "", "when"], [796, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 0, 1, "", "__init__"]], "polars.DataFrame": [[176, 0, 1, "", "__array__"], [177, 0, 1, "", "__arrow_c_stream__"], [178, 0, 1, "", "__dataframe__"], [179, 0, 1, "", "__getitem__"], [180, 0, 1, "", "approx_n_unique"], [181, 0, 1, "", "bottom_k"], [182, 0, 1, "", "cast"], [183, 0, 1, "", "clear"], [184, 0, 1, "", "clone"], [185, 0, 1, "", "collect_schema"], [186, 2, 1, "", "columns"], [187, 0, 1, "", "corr"], [188, 0, 1, "", "count"], [189, 0, 1, "", "describe"], [190, 0, 1, "", "deserialize"], [191, 0, 1, "", "drop"], [192, 0, 1, "", "drop_in_place"], [193, 0, 1, "", "drop_nans"], [194, 0, 1, "", "drop_nulls"], [195, 2, 1, "", "dtypes"], [196, 0, 1, "", "equals"], [197, 0, 1, "", "estimated_size"], [198, 0, 1, "", "explode"], [199, 0, 1, "", "extend"], [200, 0, 1, "", "fill_nan"], [201, 0, 1, "", "fill_null"], [202, 0, 1, "", "filter"], [203, 2, 1, "", "flags"], [204, 0, 1, "", "fold"], [205, 0, 1, "", "gather_every"], [206, 0, 1, "", "get_column"], [207, 0, 1, "", "get_column_index"], [208, 0, 1, "", "get_columns"], [209, 0, 1, "", "glimpse"], [210, 0, 1, "", "group_by"], [211, 0, 1, "", "group_by_dynamic"], [212, 0, 1, "", "hash_rows"], [213, 0, 1, "", "head"], [214, 2, 1, "", "height"], [215, 0, 1, "", "hstack"], [216, 0, 1, "", "insert_column"], [217, 0, 1, "", "interpolate"], [218, 0, 1, "", "is_duplicated"], [219, 0, 1, "", "is_empty"], [220, 0, 1, "", "is_unique"], [221, 0, 1, "", "item"], [222, 0, 1, "", "iter_columns"], [223, 0, 1, "", "iter_rows"], [224, 0, 1, "", "iter_slices"], [225, 0, 1, "", "join"], [226, 0, 1, "", "join_asof"], [227, 0, 1, "", "join_where"], [228, 0, 1, "", "lazy"], [229, 0, 1, "", "limit"], [230, 0, 1, "", "map_rows"], [231, 0, 1, "", "max"], [232, 0, 1, "", "max_horizontal"], [233, 0, 1, "", "mean"], [234, 0, 1, "", "mean_horizontal"], [235, 0, 1, "", "median"], [236, 0, 1, "", "melt"], [237, 0, 1, "", "merge_sorted"], [238, 0, 1, "", "min"], [239, 0, 1, "", "min_horizontal"], [240, 0, 1, "", "n_chunks"], [241, 0, 1, "", "n_unique"], [242, 0, 1, "", "null_count"], [243, 0, 1, "", "partition_by"], [244, 0, 1, "", "pipe"], [245, 0, 1, "", "pivot"], [323, 2, 1, "", "plot"], [246, 0, 1, "", "product"], [247, 0, 1, "", "quantile"], [248, 0, 1, "", "rechunk"], [249, 0, 1, "", "rename"], [250, 0, 1, "", "replace_column"], [251, 0, 1, "", "reverse"], [252, 0, 1, "", "rolling"], [253, 0, 1, "", "row"], [254, 0, 1, "", "rows"], [255, 0, 1, "", "rows_by_key"], [256, 0, 1, "", "sample"], [257, 2, 1, "", "schema"], [258, 0, 1, "", "select"], [259, 0, 1, "", "select_seq"], [260, 0, 1, "", "serialize"], [261, 0, 1, "", "set_sorted"], [262, 2, 1, "", "shape"], [263, 0, 1, "", "shift"], [264, 0, 1, "", "shrink_to_fit"], [265, 0, 1, "", "slice"], [266, 0, 1, "", "sort"], [267, 0, 1, "", "sql"], [268, 0, 1, "", "std"], [324, 2, 1, "", "style"], [269, 0, 1, "", "sum"], [270, 0, 1, "", "sum_horizontal"], [271, 0, 1, "", "tail"], [272, 0, 1, "", "to_arrow"], [273, 0, 1, "", "to_dict"], [274, 0, 1, "", "to_dicts"], [275, 0, 1, "", "to_dummies"], [276, 0, 1, "", "to_init_repr"], [277, 0, 1, "", "to_jax"], [278, 0, 1, "", "to_numpy"], [279, 0, 1, "", "to_pandas"], [280, 0, 1, "", "to_series"], [281, 0, 1, "", "to_struct"], [282, 0, 1, "", "to_torch"], [283, 0, 1, "", "top_k"], [284, 0, 1, "", "transpose"], [285, 0, 1, "", "unique"], [286, 0, 1, "", "unnest"], [287, 0, 1, "", "unpivot"], [288, 0, 1, "", "unstack"], [289, 0, 1, "", "update"], [290, 0, 1, "", "upsample"], [291, 0, 1, "", "var"], [292, 0, 1, "", "vstack"], [293, 2, 1, "", "width"], [294, 0, 1, "", "with_columns"], [295, 0, 1, "", "with_columns_seq"], [296, 0, 1, "", "with_row_count"], [297, 0, 1, "", "with_row_index"], [35, 0, 1, "", "write_avro"], [36, 0, 1, "", "write_clipboard"], [37, 0, 1, "", "write_csv"], [38, 0, 1, "", "write_database"], [39, 0, 1, "", "write_delta"], [40, 0, 1, "", "write_excel"], [41, 0, 1, "", "write_ipc"], [42, 0, 1, "", "write_ipc_stream"], [43, 0, 1, "", "write_json"], [44, 0, 1, "", "write_ndjson"], [45, 0, 1, "", "write_parquet"]], "polars.Expr": [[328, 0, 1, "", "abs"], [329, 0, 1, "", "add"], [330, 0, 1, "", "agg_groups"], [331, 0, 1, "", "alias"], [332, 0, 1, "", "all"], [333, 0, 1, "", "and_"], [334, 0, 1, "", "any"], [335, 0, 1, "", "append"], [336, 0, 1, "", "approx_n_unique"], [337, 0, 1, "", "arccos"], [338, 0, 1, "", "arccosh"], [339, 0, 1, "", "arcsin"], [340, 0, 1, "", "arcsinh"], [341, 0, 1, "", "arctan"], [342, 0, 1, "", "arctanh"], [343, 0, 1, "", "arg_max"], [344, 0, 1, "", "arg_min"], [345, 0, 1, "", "arg_sort"], [346, 0, 1, "", "arg_true"], [347, 0, 1, "", "arg_unique"], [372, 0, 1, "", "backward_fill"], [380, 0, 1, "", "bitwise_and"], [381, 0, 1, "", "bitwise_count_ones"], [382, 0, 1, "", "bitwise_count_zeros"], [383, 0, 1, "", "bitwise_leading_ones"], [384, 0, 1, "", "bitwise_leading_zeros"], [385, 0, 1, "", "bitwise_or"], [386, 0, 1, "", "bitwise_trailing_ones"], [387, 0, 1, "", "bitwise_trailing_zeros"], [388, 0, 1, "", "bitwise_xor"], [389, 0, 1, "", "bottom_k"], [390, 0, 1, "", "bottom_k_by"], [391, 0, 1, "", "cast"], [395, 0, 1, "", "cbrt"], [396, 0, 1, "", "ceil"], [397, 0, 1, "", "clip"], [398, 0, 1, "", "cos"], [399, 0, 1, "", "cosh"], [400, 0, 1, "", "cot"], [401, 0, 1, "", "count"], [402, 0, 1, "", "cum_count"], [403, 0, 1, "", "cum_max"], [404, 0, 1, "", "cum_min"], [405, 0, 1, "", "cum_prod"], [406, 0, 1, "", "cum_sum"], [407, 0, 1, "", "cumulative_eval"], [408, 0, 1, "", "cut"], [409, 0, 1, "", "degrees"], [410, 0, 1, "", "deserialize"], [411, 0, 1, "", "diff"], [412, 0, 1, "", "dot"], [413, 0, 1, "", "drop_nans"], [414, 0, 1, "", "drop_nulls"], [460, 0, 1, "", "entropy"], [461, 0, 1, "", "eq"], [462, 0, 1, "", "eq_missing"], [463, 0, 1, "", "ewm_mean"], [464, 0, 1, "", "ewm_mean_by"], [465, 0, 1, "", "ewm_std"], [466, 0, 1, "", "ewm_var"], [467, 0, 1, "", "exclude"], [468, 0, 1, "", "exp"], [469, 0, 1, "", "explode"], [470, 0, 1, "", "extend_constant"], [471, 0, 1, "", "fill_nan"], [472, 0, 1, "", "fill_null"], [473, 0, 1, "", "filter"], [474, 0, 1, "", "first"], [475, 0, 1, "", "flatten"], [476, 0, 1, "", "floor"], [477, 0, 1, "", "floordiv"], [478, 0, 1, "", "forward_fill"], [479, 0, 1, "", "from_json"], [480, 0, 1, "", "gather"], [481, 0, 1, "", "gather_every"], [482, 0, 1, "", "ge"], [483, 0, 1, "", "get"], [484, 0, 1, "", "gt"], [485, 0, 1, "", "has_nulls"], [486, 0, 1, "", "hash"], [487, 0, 1, "", "head"], [488, 0, 1, "", "hist"], [489, 0, 1, "", "implode"], [490, 0, 1, "", "inspect"], [491, 0, 1, "", "interpolate"], [492, 0, 1, "", "interpolate_by"], [493, 0, 1, "", "is_between"], [494, 0, 1, "", "is_duplicated"], [495, 0, 1, "", "is_finite"], [496, 0, 1, "", "is_first_distinct"], [497, 0, 1, "", "is_in"], [498, 0, 1, "", "is_infinite"], [499, 0, 1, "", "is_last_distinct"], [500, 0, 1, "", "is_nan"], [501, 0, 1, "", "is_not_nan"], [502, 0, 1, "", "is_not_null"], [503, 0, 1, "", "is_null"], [504, 0, 1, "", "is_unique"], [505, 0, 1, "", "kurtosis"], [506, 0, 1, "", "last"], [507, 0, 1, "", "le"], [508, 0, 1, "", "len"], [509, 0, 1, "", "limit"], [550, 0, 1, "", "log"], [551, 0, 1, "", "log10"], [552, 0, 1, "", "log1p"], [553, 0, 1, "", "lower_bound"], [554, 0, 1, "", "lt"], [555, 0, 1, "", "map_batches"], [556, 0, 1, "", "map_elements"], [557, 0, 1, "", "max"], [558, 0, 1, "", "mean"], [559, 0, 1, "", "median"], [575, 0, 1, "", "min"], [576, 0, 1, "", "mod"], [577, 0, 1, "", "mode"], [578, 0, 1, "", "mul"], [579, 0, 1, "", "n_unique"], [589, 0, 1, "", "nan_max"], [590, 0, 1, "", "nan_min"], [591, 0, 1, "", "ne"], [592, 0, 1, "", "ne_missing"], [593, 0, 1, "", "neg"], [594, 0, 1, "", "not_"], [595, 0, 1, "", "null_count"], [596, 0, 1, "", "or_"], [597, 0, 1, "", "over"], [598, 0, 1, "", "pct_change"], [599, 0, 1, "", "peak_max"], [600, 0, 1, "", "peak_min"], [601, 0, 1, "", "pipe"], [602, 0, 1, "", "pow"], [603, 0, 1, "", "product"], [604, 0, 1, "", "qcut"], [605, 0, 1, "", "quantile"], [606, 0, 1, "", "radians"], [607, 0, 1, "", "rank"], [608, 0, 1, "", "rechunk"], [609, 0, 1, "", "reinterpret"], [610, 0, 1, "", "repeat_by"], [611, 0, 1, "", "replace"], [612, 0, 1, "", "replace_strict"], [613, 0, 1, "", "reshape"], [614, 0, 1, "", "reverse"], [615, 0, 1, "", "rle"], [616, 0, 1, "", "rle_id"], [617, 0, 1, "", "rolling"], [618, 0, 1, "", "rolling_map"], [619, 0, 1, "", "rolling_max"], [620, 0, 1, "", "rolling_max_by"], [621, 0, 1, "", "rolling_mean"], [622, 0, 1, "", "rolling_mean_by"], [623, 0, 1, "", "rolling_median"], [624, 0, 1, "", "rolling_median_by"], [625, 0, 1, "", "rolling_min"], [626, 0, 1, "", "rolling_min_by"], [627, 0, 1, "", "rolling_quantile"], [628, 0, 1, "", "rolling_quantile_by"], [629, 0, 1, "", "rolling_skew"], [630, 0, 1, "", "rolling_std"], [631, 0, 1, "", "rolling_std_by"], [632, 0, 1, "", "rolling_sum"], [633, 0, 1, "", "rolling_sum_by"], [634, 0, 1, "", "rolling_var"], [635, 0, 1, "", "rolling_var_by"], [636, 0, 1, "", "round"], [637, 0, 1, "", "round_sig_figs"], [638, 0, 1, "", "sample"], [639, 0, 1, "", "search_sorted"], [640, 0, 1, "", "set_sorted"], [641, 0, 1, "", "shift"], [642, 0, 1, "", "shrink_dtype"], [643, 0, 1, "", "shuffle"], [644, 0, 1, "", "sign"], [645, 0, 1, "", "sin"], [646, 0, 1, "", "sinh"], [647, 0, 1, "", "skew"], [648, 0, 1, "", "slice"], [649, 0, 1, "", "sort"], [650, 0, 1, "", "sort_by"], [651, 0, 1, "", "sqrt"], [652, 0, 1, "", "std"], [706, 0, 1, "", "sub"], [707, 0, 1, "", "sum"], [708, 0, 1, "", "tail"], [709, 0, 1, "", "tan"], [710, 0, 1, "", "tanh"], [711, 0, 1, "", "to_physical"], [712, 0, 1, "", "top_k"], [713, 0, 1, "", "top_k_by"], [714, 0, 1, "", "truediv"], [715, 0, 1, "", "unique"], [716, 0, 1, "", "unique_counts"], [717, 0, 1, "", "upper_bound"], [718, 0, 1, "", "value_counts"], [719, 0, 1, "", "var"], [720, 0, 1, "", "where"], [721, 0, 1, "", "xor"]], "polars.Expr.arr": [[348, 0, 1, "", "all"], [349, 0, 1, "", "any"], [350, 0, 1, "", "arg_max"], [351, 0, 1, "", "arg_min"], [352, 0, 1, "", "contains"], [353, 0, 1, "", "count_matches"], [354, 0, 1, "", "explode"], [355, 0, 1, "", "first"], [356, 0, 1, "", "get"], [357, 0, 1, "", "join"], [358, 0, 1, "", "last"], [359, 0, 1, "", "max"], [360, 0, 1, "", "median"], [361, 0, 1, "", "min"], [362, 0, 1, "", "n_unique"], [363, 0, 1, "", "reverse"], [364, 0, 1, "", "shift"], [365, 0, 1, "", "sort"], [366, 0, 1, "", "std"], [367, 0, 1, "", "sum"], [368, 0, 1, "", "to_list"], [369, 0, 1, "", "to_struct"], [370, 0, 1, "", "unique"], [371, 0, 1, "", "var"]], "polars.Expr.bin": [[373, 0, 1, "", "contains"], [374, 0, 1, "", "decode"], [375, 0, 1, "", "encode"], [376, 0, 1, "", "ends_with"], [377, 0, 1, "", "reinterpret"], [378, 0, 1, "", "size"], [379, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[392, 0, 1, "", "get_categories"], [393, 0, 1, "", "len_bytes"], [394, 0, 1, "", "len_chars"]], "polars.Expr.dt": [[415, 0, 1, "", "add_business_days"], [416, 0, 1, "", "base_utc_offset"], [417, 0, 1, "", "cast_time_unit"], [418, 0, 1, "", "century"], [419, 0, 1, "", "combine"], [420, 0, 1, "", "convert_time_zone"], [421, 0, 1, "", "date"], [422, 0, 1, "", "datetime"], [423, 0, 1, "", "day"], [424, 0, 1, "", "dst_offset"], [425, 0, 1, "", "epoch"], [426, 0, 1, "", "hour"], [427, 0, 1, "", "is_leap_year"], [428, 0, 1, "", "iso_year"], [429, 0, 1, "", "microsecond"], [430, 0, 1, "", "millennium"], [431, 0, 1, "", "millisecond"], [432, 0, 1, "", "minute"], [433, 0, 1, "", "month"], [434, 0, 1, "", "month_end"], [435, 0, 1, "", "month_start"], [436, 0, 1, "", "nanosecond"], [437, 0, 1, "", "offset_by"], [438, 0, 1, "", "ordinal_day"], [439, 0, 1, "", "quarter"], [440, 0, 1, "", "replace"], [441, 0, 1, "", "replace_time_zone"], [442, 0, 1, "", "round"], [443, 0, 1, "", "second"], [444, 0, 1, "", "strftime"], [445, 0, 1, "", "time"], [446, 0, 1, "", "timestamp"], [447, 0, 1, "", "to_string"], [448, 0, 1, "", "total_days"], [449, 0, 1, "", "total_hours"], [450, 0, 1, "", "total_microseconds"], [451, 0, 1, "", "total_milliseconds"], [452, 0, 1, "", "total_minutes"], [453, 0, 1, "", "total_nanoseconds"], [454, 0, 1, "", "total_seconds"], [455, 0, 1, "", "truncate"], [456, 0, 1, "", "week"], [457, 0, 1, "", "weekday"], [458, 0, 1, "", "with_time_unit"], [459, 0, 1, "", "year"]], "polars.Expr.list": [[510, 0, 1, "", "all"], [511, 0, 1, "", "any"], [512, 0, 1, "", "arg_max"], [513, 0, 1, "", "arg_min"], [514, 0, 1, "", "concat"], [515, 0, 1, "", "contains"], [516, 0, 1, "", "count_matches"], [517, 0, 1, "", "diff"], [518, 0, 1, "", "drop_nulls"], [519, 0, 1, "", "eval"], [520, 0, 1, "", "explode"], [521, 0, 1, "", "first"], [522, 0, 1, "", "gather"], [523, 0, 1, "", "gather_every"], [524, 0, 1, "", "get"], [525, 0, 1, "", "head"], [526, 0, 1, "", "join"], [527, 0, 1, "", "last"], [528, 0, 1, "", "len"], [529, 0, 1, "", "max"], [530, 0, 1, "", "mean"], [531, 0, 1, "", "median"], [532, 0, 1, "", "min"], [533, 0, 1, "", "n_unique"], [534, 0, 1, "", "reverse"], [535, 0, 1, "", "sample"], [536, 0, 1, "", "set_difference"], [537, 0, 1, "", "set_intersection"], [538, 0, 1, "", "set_symmetric_difference"], [539, 0, 1, "", "set_union"], [540, 0, 1, "", "shift"], [541, 0, 1, "", "slice"], [542, 0, 1, "", "sort"], [543, 0, 1, "", "std"], [544, 0, 1, "", "sum"], [545, 0, 1, "", "tail"], [546, 0, 1, "", "to_array"], [547, 0, 1, "", "to_struct"], [548, 0, 1, "", "unique"], [549, 0, 1, "", "var"]], "polars.Expr.meta": [[560, 0, 1, "", "eq"], [561, 0, 1, "", "has_multiple_outputs"], [562, 0, 1, "", "is_column"], [563, 0, 1, "", "is_column_selection"], [564, 0, 1, "", "is_literal"], [565, 0, 1, "", "is_regex_projection"], [566, 0, 1, "", "ne"], [567, 0, 1, "", "output_name"], [568, 0, 1, "", "pop"], [569, 0, 1, "", "root_names"], [570, 0, 1, "", "serialize"], [571, 0, 1, "", "show_graph"], [572, 0, 1, "", "tree_format"], [573, 0, 1, "", "undo_aliases"], [574, 0, 1, "", "write_json"]], "polars.Expr.name": [[580, 0, 1, "", "keep"], [581, 0, 1, "", "map"], [582, 0, 1, "", "map_fields"], [583, 0, 1, "", "prefix"], [584, 0, 1, "", "prefix_fields"], [585, 0, 1, "", "suffix"], [586, 0, 1, "", "suffix_fields"], [587, 0, 1, "", "to_lowercase"], [588, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[653, 0, 1, "", "concat"], [654, 0, 1, "", "contains"], [655, 0, 1, "", "contains_any"], [656, 0, 1, "", "count_matches"], [657, 0, 1, "", "decode"], [658, 0, 1, "", "encode"], [659, 0, 1, "", "ends_with"], [660, 0, 1, "", "escape_regex"], [661, 0, 1, "", "explode"], [662, 0, 1, "", "extract"], [663, 0, 1, "", "extract_all"], [664, 0, 1, "", "extract_groups"], [665, 0, 1, "", "extract_many"], [666, 0, 1, "", "find"], [667, 0, 1, "", "find_many"], [668, 0, 1, "", "head"], [669, 0, 1, "", "join"], [670, 0, 1, "", "json_decode"], [671, 0, 1, "", "json_path_match"], [672, 0, 1, "", "len_bytes"], [673, 0, 1, "", "len_chars"], [674, 0, 1, "", "pad_end"], [675, 0, 1, "", "pad_start"], [676, 0, 1, "", "replace"], [677, 0, 1, "", "replace_all"], [678, 0, 1, "", "replace_many"], [679, 0, 1, "", "reverse"], [680, 0, 1, "", "slice"], [681, 0, 1, "", "split"], [682, 0, 1, "", "split_exact"], [683, 0, 1, "", "splitn"], [684, 0, 1, "", "starts_with"], [685, 0, 1, "", "strip_chars"], [686, 0, 1, "", "strip_chars_end"], [687, 0, 1, "", "strip_chars_start"], [688, 0, 1, "", "strip_prefix"], [689, 0, 1, "", "strip_suffix"], [690, 0, 1, "", "strptime"], [691, 0, 1, "", "tail"], [692, 0, 1, "", "to_date"], [693, 0, 1, "", "to_datetime"], [694, 0, 1, "", "to_decimal"], [695, 0, 1, "", "to_integer"], [696, 0, 1, "", "to_lowercase"], [697, 0, 1, "", "to_time"], [698, 0, 1, "", "to_titlecase"], [699, 0, 1, "", "to_uppercase"], [700, 0, 1, "", "zfill"]], "polars.Expr.struct": [[701, 0, 1, "", "field"], [702, 0, 1, "", "json_encode"], [703, 0, 1, "", "rename_fields"], [704, 0, 1, "", "unnest"], [705, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[820, 0, 1, "", "approx_n_unique"], [821, 0, 1, "", "bottom_k"], [822, 0, 1, "", "cache"], [823, 0, 1, "", "cast"], [824, 0, 1, "", "clear"], [825, 0, 1, "", "clone"], [826, 0, 1, "", "collect"], [827, 0, 1, "", "collect_async"], [828, 0, 1, "", "collect_schema"], [829, 2, 1, "", "columns"], [830, 0, 1, "", "count"], [831, 0, 1, "", "describe"], [832, 0, 1, "", "deserialize"], [833, 0, 1, "", "drop"], [834, 0, 1, "", "drop_nans"], [835, 0, 1, "", "drop_nulls"], [836, 2, 1, "", "dtypes"], [837, 0, 1, "", "explain"], [838, 0, 1, "", "explode"], [839, 0, 1, "", "fill_nan"], [840, 0, 1, "", "fill_null"], [841, 0, 1, "", "filter"], [842, 0, 1, "", "first"], [843, 0, 1, "", "gather_every"], [844, 0, 1, "", "group_by"], [845, 0, 1, "", "group_by_dynamic"], [846, 0, 1, "", "head"], [847, 0, 1, "", "inspect"], [848, 0, 1, "", "interpolate"], [849, 0, 1, "", "join"], [850, 0, 1, "", "join_asof"], [851, 0, 1, "", "join_where"], [852, 0, 1, "", "last"], [853, 0, 1, "", "lazy"], [854, 0, 1, "", "limit"], [855, 0, 1, "", "map_batches"], [856, 0, 1, "", "max"], [857, 0, 1, "", "mean"], [858, 0, 1, "", "median"], [859, 0, 1, "", "melt"], [860, 0, 1, "", "merge_sorted"], [861, 0, 1, "", "min"], [862, 0, 1, "", "null_count"], [863, 0, 1, "", "pipe"], [864, 0, 1, "", "profile"], [865, 0, 1, "", "quantile"], [866, 0, 1, "", "rename"], [867, 0, 1, "", "reverse"], [868, 0, 1, "", "rolling"], [869, 2, 1, "", "schema"], [870, 0, 1, "", "select"], [871, 0, 1, "", "select_seq"], [872, 0, 1, "", "serialize"], [873, 0, 1, "", "set_sorted"], [874, 0, 1, "", "shift"], [875, 0, 1, "", "show_graph"], [46, 0, 1, "", "sink_csv"], [47, 0, 1, "", "sink_ipc"], [48, 0, 1, "", "sink_ndjson"], [49, 0, 1, "", "sink_parquet"], [876, 0, 1, "", "slice"], [877, 0, 1, "", "sort"], [878, 0, 1, "", "sql"], [879, 0, 1, "", "std"], [880, 0, 1, "", "sum"], [881, 0, 1, "", "tail"], [882, 0, 1, "", "top_k"], [883, 0, 1, "", "unique"], [884, 0, 1, "", "unnest"], [885, 0, 1, "", "unpivot"], [886, 0, 1, "", "update"], [887, 0, 1, "", "var"], [888, 2, 1, "", "width"], [889, 0, 1, "", "with_columns"], [890, 0, 1, "", "with_columns_seq"], [891, 0, 1, "", "with_context"], [892, 0, 1, "", "with_row_count"], [893, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1338, 0, 1, "", "__enter__"], [1338, 0, 1, "", "__exit__"], [1338, 0, 1, "", "__init__"], [1319, 0, 1, "", "execute"], [1320, 0, 1, "", "execute_global"], [1321, 0, 1, "", "register"], [1322, 0, 1, "", "register_globals"], [1323, 0, 1, "", "register_many"], [1324, 0, 1, "", "tables"], [1325, 0, 1, "", "unregister"]], "polars.Series": [[927, 0, 1, "", "__array__"], [928, 0, 1, "", "__arrow_c_stream__"], [929, 0, 1, "", "__getitem__"], [930, 0, 1, "", "abs"], [931, 0, 1, "", "alias"], [932, 0, 1, "", "all"], [933, 0, 1, "", "any"], [934, 0, 1, "", "append"], [935, 0, 1, "", "approx_n_unique"], [936, 0, 1, "", "arccos"], [937, 0, 1, "", "arccosh"], [938, 0, 1, "", "arcsin"], [939, 0, 1, "", "arcsinh"], [940, 0, 1, "", "arctan"], [941, 0, 1, "", "arctanh"], [942, 0, 1, "", "arg_max"], [943, 0, 1, "", "arg_min"], [944, 0, 1, "", "arg_sort"], [945, 0, 1, "", "arg_true"], [946, 0, 1, "", "arg_unique"], [978, 0, 1, "", "bitwise_and"], [979, 0, 1, "", "bitwise_count_ones"], [980, 0, 1, "", "bitwise_count_zeros"], [981, 0, 1, "", "bitwise_leading_ones"], [982, 0, 1, "", "bitwise_leading_zeros"], [983, 0, 1, "", "bitwise_or"], [984, 0, 1, "", "bitwise_trailing_ones"], [985, 0, 1, "", "bitwise_trailing_zeros"], [986, 0, 1, "", "bitwise_xor"], [987, 0, 1, "", "bottom_k"], [988, 0, 1, "", "cast"], [995, 0, 1, "", "cbrt"], [996, 0, 1, "", "ceil"], [997, 0, 1, "", "chunk_lengths"], [998, 0, 1, "", "clear"], [999, 0, 1, "", "clip"], [1000, 0, 1, "", "clone"], [1001, 0, 1, "", "cos"], [1002, 0, 1, "", "cosh"], [1003, 0, 1, "", "cot"], [1004, 0, 1, "", "count"], [1005, 0, 1, "", "cum_count"], [1006, 0, 1, "", "cum_max"], [1007, 0, 1, "", "cum_min"], [1008, 0, 1, "", "cum_prod"], [1009, 0, 1, "", "cum_sum"], [1010, 0, 1, "", "cumulative_eval"], [1011, 0, 1, "", "cut"], [1012, 0, 1, "", "describe"], [1013, 0, 1, "", "diff"], [1014, 0, 1, "", "dot"], [1015, 0, 1, "", "drop_nans"], [1016, 0, 1, "", "drop_nulls"], [1066, 2, 1, "", "dtype"], [1067, 0, 1, "", "entropy"], [1068, 0, 1, "", "eq"], [1069, 0, 1, "", "eq_missing"], [1070, 0, 1, "", "equals"], [1071, 0, 1, "", "estimated_size"], [1072, 0, 1, "", "ewm_mean"], [1073, 0, 1, "", "ewm_mean_by"], [1074, 0, 1, "", "ewm_std"], [1075, 0, 1, "", "ewm_var"], [1076, 0, 1, "", "exp"], [1077, 0, 1, "", "explode"], [1078, 0, 1, "", "extend"], [1079, 0, 1, "", "extend_constant"], [1080, 0, 1, "", "fill_nan"], [1081, 0, 1, "", "fill_null"], [1082, 0, 1, "", "filter"], [1083, 0, 1, "", "first"], [1084, 2, 1, "", "flags"], [1085, 0, 1, "", "floor"], [1086, 0, 1, "", "gather"], [1087, 0, 1, "", "gather_every"], [1088, 0, 1, "", "ge"], [1089, 0, 1, "", "get_chunks"], [1090, 0, 1, "", "gt"], [1091, 0, 1, "", "has_nulls"], [1092, 0, 1, "", "has_validity"], [1093, 0, 1, "", "hash"], [1094, 0, 1, "", "head"], [1095, 0, 1, "", "hist"], [1096, 0, 1, "", "implode"], [1097, 0, 1, "", "interpolate"], [1098, 0, 1, "", "interpolate_by"], [1099, 0, 1, "", "is_between"], [1100, 0, 1, "", "is_duplicated"], [1101, 0, 1, "", "is_empty"], [1102, 0, 1, "", "is_finite"], [1103, 0, 1, "", "is_first_distinct"], [1104, 0, 1, "", "is_in"], [1105, 0, 1, "", "is_infinite"], [1106, 0, 1, "", "is_last_distinct"], [1107, 0, 1, "", "is_nan"], [1108, 0, 1, "", "is_not_nan"], [1109, 0, 1, "", "is_not_null"], [1110, 0, 1, "", "is_null"], [1111, 0, 1, "", "is_sorted"], [1112, 0, 1, "", "is_unique"], [1113, 0, 1, "", "item"], [1114, 0, 1, "", "kurtosis"], [1115, 0, 1, "", "last"], [1116, 0, 1, "", "le"], [1117, 0, 1, "", "len"], [1118, 0, 1, "", "limit"], [1159, 0, 1, "", "log"], [1160, 0, 1, "", "log10"], [1161, 0, 1, "", "log1p"], [1162, 0, 1, "", "lower_bound"], [1163, 0, 1, "", "lt"], [1164, 0, 1, "", "map_elements"], [1165, 0, 1, "", "max"], [1166, 0, 1, "", "mean"], [1167, 0, 1, "", "median"], [1168, 0, 1, "", "min"], [1169, 0, 1, "", "mode"], [1170, 0, 1, "", "n_chunks"], [1171, 0, 1, "", "n_unique"], [1172, 2, 1, "", "name"], [1173, 0, 1, "", "nan_max"], [1174, 0, 1, "", "nan_min"], [1175, 0, 1, "", "ne"], [1176, 0, 1, "", "ne_missing"], [1177, 0, 1, "", "new_from_index"], [1178, 0, 1, "", "not_"], [1179, 0, 1, "", "null_count"], [1180, 0, 1, "", "pct_change"], [1181, 0, 1, "", "peak_max"], [1182, 0, 1, "", "peak_min"], [1315, 2, 1, "", "plot"], [1183, 0, 1, "", "pow"], [1184, 0, 1, "", "product"], [1185, 0, 1, "", "qcut"], [1186, 0, 1, "", "quantile"], [1187, 0, 1, "", "rank"], [1188, 0, 1, "", "rechunk"], [1189, 0, 1, "", "reinterpret"], [1190, 0, 1, "", "rename"], [1191, 0, 1, "", "replace"], [1192, 0, 1, "", "replace_strict"], [1193, 0, 1, "", "reshape"], [1194, 0, 1, "", "reverse"], [1195, 0, 1, "", "rle"], [1196, 0, 1, "", "rle_id"], [1197, 0, 1, "", "rolling_map"], [1198, 0, 1, "", "rolling_max"], [1199, 0, 1, "", "rolling_mean"], [1200, 0, 1, "", "rolling_median"], [1201, 0, 1, "", "rolling_min"], [1202, 0, 1, "", "rolling_quantile"], [1203, 0, 1, "", "rolling_skew"], [1204, 0, 1, "", "rolling_std"], [1205, 0, 1, "", "rolling_sum"], [1206, 0, 1, "", "rolling_var"], [1207, 0, 1, "", "round"], [1208, 0, 1, "", "round_sig_figs"], [1209, 0, 1, "", "sample"], [1210, 0, 1, "", "scatter"], [1211, 0, 1, "", "search_sorted"], [1212, 0, 1, "", "set"], [1213, 0, 1, "", "set_sorted"], [1214, 2, 1, "", "shape"], [1215, 0, 1, "", "shift"], [1216, 0, 1, "", "shrink_dtype"], [1217, 0, 1, "", "shrink_to_fit"], [1218, 0, 1, "", "shuffle"], [1219, 0, 1, "", "sign"], [1220, 0, 1, "", "sin"], [1221, 0, 1, "", "sinh"], [1222, 0, 1, "", "skew"], [1223, 0, 1, "", "slice"], [1224, 0, 1, "", "sort"], [1225, 0, 1, "", "sqrt"], [1226, 0, 1, "", "std"], [1281, 0, 1, "", "sum"], [1282, 0, 1, "", "tail"], [1283, 0, 1, "", "tan"], [1284, 0, 1, "", "tanh"], [1285, 0, 1, "", "to_arrow"], [1286, 0, 1, "", "to_dummies"], [1287, 0, 1, "", "to_frame"], [1288, 0, 1, "", "to_init_repr"], [1289, 0, 1, "", "to_jax"], [1290, 0, 1, "", "to_list"], [1291, 0, 1, "", "to_numpy"], [1292, 0, 1, "", "to_pandas"], [1293, 0, 1, "", "to_physical"], [1294, 0, 1, "", "to_torch"], [1295, 0, 1, "", "top_k"], [1296, 0, 1, "", "unique"], [1297, 0, 1, "", "unique_counts"], [1298, 0, 1, "", "upper_bound"], [1299, 0, 1, "", "value_counts"], [1300, 0, 1, "", "var"], [1301, 0, 1, "", "zip_with"]], "polars.Series.arr": [[947, 0, 1, "", "all"], [948, 0, 1, "", "any"], [949, 0, 1, "", "arg_max"], [950, 0, 1, "", "arg_min"], [951, 0, 1, "", "contains"], [952, 0, 1, "", "count_matches"], [953, 0, 1, "", "explode"], [954, 0, 1, "", "first"], [955, 0, 1, "", "get"], [956, 0, 1, "", "join"], [957, 0, 1, "", "last"], [958, 0, 1, "", "max"], [959, 0, 1, "", "median"], [960, 0, 1, "", "min"], [961, 0, 1, "", "n_unique"], [962, 0, 1, "", "reverse"], [963, 0, 1, "", "shift"], [964, 0, 1, "", "sort"], [965, 0, 1, "", "std"], [966, 0, 1, "", "sum"], [967, 0, 1, "", "to_list"], [968, 0, 1, "", "to_struct"], [969, 0, 1, "", "unique"], [970, 0, 1, "", "var"]], "polars.Series.bin": [[971, 0, 1, "", "contains"], [972, 0, 1, "", "decode"], [973, 0, 1, "", "encode"], [974, 0, 1, "", "ends_with"], [975, 0, 1, "", "reinterpret"], [976, 0, 1, "", "size"], [977, 0, 1, "", "starts_with"]], "polars.Series.cat": [[989, 0, 1, "", "get_categories"], [990, 0, 1, "", "is_local"], [991, 0, 1, "", "len_bytes"], [992, 0, 1, "", "len_chars"], [993, 0, 1, "", "to_local"], [994, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1017, 0, 1, "", "add_business_days"], [1018, 0, 1, "", "base_utc_offset"], [1019, 0, 1, "", "cast_time_unit"], [1020, 0, 1, "", "century"], [1021, 0, 1, "", "combine"], [1022, 0, 1, "", "convert_time_zone"], [1023, 0, 1, "", "date"], [1024, 0, 1, "", "datetime"], [1025, 0, 1, "", "day"], [1026, 0, 1, "", "dst_offset"], [1027, 0, 1, "", "epoch"], [1028, 0, 1, "", "hour"], [1029, 0, 1, "", "is_leap_year"], [1030, 0, 1, "", "iso_year"], [1031, 0, 1, "", "max"], [1032, 0, 1, "", "mean"], [1033, 0, 1, "", "median"], [1034, 0, 1, "", "microsecond"], [1035, 0, 1, "", "millennium"], [1036, 0, 1, "", "millisecond"], [1037, 0, 1, "", "min"], [1038, 0, 1, "", "minute"], [1039, 0, 1, "", "month"], [1040, 0, 1, "", "month_end"], [1041, 0, 1, "", "month_start"], [1042, 0, 1, "", "nanosecond"], [1043, 0, 1, "", "offset_by"], [1044, 0, 1, "", "ordinal_day"], [1045, 0, 1, "", "quarter"], [1046, 0, 1, "", "replace"], [1047, 0, 1, "", "replace_time_zone"], [1048, 0, 1, "", "round"], [1049, 0, 1, "", "second"], [1050, 0, 1, "", "strftime"], [1051, 0, 1, "", "time"], [1052, 0, 1, "", "timestamp"], [1053, 0, 1, "", "to_string"], [1054, 0, 1, "", "total_days"], [1055, 0, 1, "", "total_hours"], [1056, 0, 1, "", "total_microseconds"], [1057, 0, 1, "", "total_milliseconds"], [1058, 0, 1, "", "total_minutes"], [1059, 0, 1, "", "total_nanoseconds"], [1060, 0, 1, "", "total_seconds"], [1061, 0, 1, "", "truncate"], [1062, 0, 1, "", "week"], [1063, 0, 1, "", "weekday"], [1064, 0, 1, "", "with_time_unit"], [1065, 0, 1, "", "year"]], "polars.Series.list": [[1119, 0, 1, "", "all"], [1120, 0, 1, "", "any"], [1121, 0, 1, "", "arg_max"], [1122, 0, 1, "", "arg_min"], [1123, 0, 1, "", "concat"], [1124, 0, 1, "", "contains"], [1125, 0, 1, "", "count_matches"], [1126, 0, 1, "", "diff"], [1127, 0, 1, "", "drop_nulls"], [1128, 0, 1, "", "eval"], [1129, 0, 1, "", "explode"], [1130, 0, 1, "", "first"], [1131, 0, 1, "", "gather"], [1132, 0, 1, "", "gather_every"], [1133, 0, 1, "", "get"], [1134, 0, 1, "", "head"], [1135, 0, 1, "", "join"], [1136, 0, 1, "", "last"], [1137, 0, 1, "", "len"], [1138, 0, 1, "", "max"], [1139, 0, 1, "", "mean"], [1140, 0, 1, "", "median"], [1141, 0, 1, "", "min"], [1142, 0, 1, "", "n_unique"], [1143, 0, 1, "", "reverse"], [1144, 0, 1, "", "sample"], [1145, 0, 1, "", "set_difference"], [1146, 0, 1, "", "set_intersection"], [1147, 0, 1, "", "set_symmetric_difference"], [1148, 0, 1, "", "set_union"], [1149, 0, 1, "", "shift"], [1150, 0, 1, "", "slice"], [1151, 0, 1, "", "sort"], [1152, 0, 1, "", "std"], [1153, 0, 1, "", "sum"], [1154, 0, 1, "", "tail"], [1155, 0, 1, "", "to_array"], [1156, 0, 1, "", "to_struct"], [1157, 0, 1, "", "unique"], [1158, 0, 1, "", "var"]], "polars.Series.str": [[1227, 0, 1, "", "concat"], [1228, 0, 1, "", "contains"], [1229, 0, 1, "", "contains_any"], [1230, 0, 1, "", "count_matches"], [1231, 0, 1, "", "decode"], [1232, 0, 1, "", "encode"], [1233, 0, 1, "", "ends_with"], [1234, 0, 1, "", "escape_regex"], [1235, 0, 1, "", "explode"], [1236, 0, 1, "", "extract"], [1237, 0, 1, "", "extract_all"], [1238, 0, 1, "", "extract_groups"], [1239, 0, 1, "", "extract_many"], [1240, 0, 1, "", "find"], [1241, 0, 1, "", "find_many"], [1242, 0, 1, "", "head"], [1243, 0, 1, "", "join"], [1244, 0, 1, "", "json_decode"], [1245, 0, 1, "", "json_path_match"], [1246, 0, 1, "", "len_bytes"], [1247, 0, 1, "", "len_chars"], [1248, 0, 1, "", "pad_end"], [1249, 0, 1, "", "pad_start"], [1250, 0, 1, "", "replace"], [1251, 0, 1, "", "replace_all"], [1252, 0, 1, "", "replace_many"], [1253, 0, 1, "", "reverse"], [1254, 0, 1, "", "slice"], [1255, 0, 1, "", "split"], [1256, 0, 1, "", "split_exact"], [1257, 0, 1, "", "splitn"], [1258, 0, 1, "", "starts_with"], [1259, 0, 1, "", "strip_chars"], [1260, 0, 1, "", "strip_chars_end"], [1261, 0, 1, "", "strip_chars_start"], [1262, 0, 1, "", "strip_prefix"], [1263, 0, 1, "", "strip_suffix"], [1264, 0, 1, "", "strptime"], [1265, 0, 1, "", "tail"], [1266, 0, 1, "", "to_date"], [1267, 0, 1, "", "to_datetime"], [1268, 0, 1, "", "to_decimal"], [1269, 0, 1, "", "to_integer"], [1270, 0, 1, "", "to_lowercase"], [1271, 0, 1, "", "to_time"], [1272, 0, 1, "", "to_titlecase"], [1273, 0, 1, "", "to_uppercase"], [1274, 0, 1, "", "zfill"]], "polars.Series.struct": [[1275, 0, 1, "", "field"], [1276, 3, 1, "", "fields"], [1277, 0, 1, "", "json_encode"], [1278, 0, 1, "", "rename_fields"], [1279, 3, 1, "", "schema"], [1280, 0, 1, "", "unnest"]], "polars.StringCache": [[50, 0, 1, "", "__init__"]], "polars.api": [[52, 4, 1, "", "register_dataframe_namespace"], [53, 4, 1, "", "register_expr_namespace"], [54, 4, 1, "", "register_lazyframe_namespace"], [55, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[298, 0, 1, "", "__iter__"], [299, 0, 1, "", "agg"], [300, 0, 1, "", "all"], [301, 0, 1, "", "count"], [302, 0, 1, "", "first"], [303, 0, 1, "", "head"], [304, 0, 1, "", "last"], [305, 0, 1, "", "len"], [306, 0, 1, "", "map_groups"], [307, 0, 1, "", "max"], [308, 0, 1, "", "mean"], [309, 0, 1, "", "median"], [310, 0, 1, "", "min"], [311, 0, 1, "", "n_unique"], [312, 0, 1, "", "quantile"], [313, 0, 1, "", "sum"], [314, 0, 1, "", "tail"]], "polars.datatypes": [[60, 1, 1, "", "Array"], [61, 1, 1, "", "Binary"], [62, 1, 1, "", "Boolean"], [63, 1, 1, "", "Categorical"], [64, 1, 1, "", "DataType"], [65, 1, 1, "", "Date"], [66, 1, 1, "", "Datetime"], [67, 1, 1, "", "Decimal"], [68, 1, 1, "", "Duration"], [69, 1, 1, "", "Enum"], [70, 1, 1, "", "Float32"], [71, 1, 1, "", "Float64"], [72, 1, 1, "", "Int128"], [73, 1, 1, "", "Int16"], [74, 1, 1, "", "Int32"], [75, 1, 1, "", "Int64"], [76, 1, 1, "", "Int8"], [77, 1, 1, "", "List"], [78, 1, 1, "", "Null"], [79, 1, 1, "", "Object"], [80, 1, 1, "", "String"], [81, 1, 1, "", "Struct"], [82, 1, 1, "", "Time"], [83, 1, 1, "", "UInt16"], [84, 1, 1, "", "UInt32"], [85, 1, 1, "", "UInt64"], [86, 1, 1, "", "UInt8"], [87, 1, 1, "", "Unknown"], [88, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[63, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int128": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[76, 0, 1, "", "__init__"]], "polars.datatypes.List": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[78, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[79, 0, 1, "", "__init__"]], "polars.datatypes.String": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[82, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[86, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[87, 0, 1, "", "__init__"]], "polars.exceptions": [[92, 5, 1, "", "CategoricalRemappingWarning"], [93, 5, 1, "", "ChronoFormatWarning"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "CustomUFuncWarning"], [97, 5, 1, "", "DataOrientationWarning"], [98, 5, 1, "", "DuplicateError"], [99, 5, 1, "", "InvalidOperationError"], [100, 5, 1, "", "MapWithoutReturnDtypeWarning"], [101, 5, 1, "", "ModuleUpgradeRequiredError"], [102, 5, 1, "", "NoDataError"], [103, 5, 1, "", "NoRowsReturnedError"], [104, 5, 1, "", "OutOfBoundsError"], [105, 5, 1, "", "PanicException"], [106, 5, 1, "", "ParameterCollisionError"], [107, 5, 1, "", "PerformanceWarning"], [108, 5, 1, "", "PolarsError"], [109, 5, 1, "", "PolarsInefficientMapWarning"], [110, 5, 1, "", "PolarsWarning"], [111, 5, 1, "", "RowsError"], [112, 5, 1, "", "SQLInterfaceError"], [113, 5, 1, "", "SQLSyntaxError"], [114, 5, 1, "", "SchemaError"], [115, 5, 1, "", "SchemaFieldNotFoundError"], [116, 5, 1, "", "ShapeError"], [117, 5, 1, "", "StringCacheMismatchError"], [118, 5, 1, "", "StructFieldNotFoundError"], [119, 5, 1, "", "TooManyRowsReturnedError"], [120, 5, 1, "", "UnstableWarning"], [121, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[131, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[894, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[894, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[895, 0, 1, "", "agg"], [896, 0, 1, "", "all"], [897, 0, 1, "", "count"], [898, 0, 1, "", "first"], [899, 0, 1, "", "head"], [900, 0, 1, "", "last"], [901, 0, 1, "", "len"], [902, 0, 1, "", "map_groups"], [903, 0, 1, "", "max"], [904, 0, 1, "", "mean"], [905, 0, 1, "", "median"], [906, 0, 1, "", "min"], [907, 0, 1, "", "n_unique"], [908, 0, 1, "", "quantile"], [909, 0, 1, "", "sum"], [910, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[911, 0, 1, "", "cancel"], [912, 0, 1, "", "fetch"], [913, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[923, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[925, 4, 1, "", "all"], [925, 4, 1, "", "alpha"], [925, 4, 1, "", "alphanumeric"], [925, 4, 1, "", "binary"], [925, 4, 1, "", "boolean"], [925, 4, 1, "", "by_dtype"], [925, 4, 1, "", "by_index"], [925, 4, 1, "", "by_name"], [925, 4, 1, "", "categorical"], [925, 4, 1, "", "contains"], [925, 4, 1, "", "date"], [925, 4, 1, "", "datetime"], [925, 4, 1, "", "decimal"], [925, 4, 1, "", "digit"], [925, 4, 1, "", "duration"], [925, 4, 1, "", "ends_with"], [925, 4, 1, "", "exclude"], [925, 4, 1, "", "expand_selector"], [925, 4, 1, "", "first"], [925, 4, 1, "", "float"], [925, 4, 1, "", "integer"], [925, 4, 1, "", "is_selector"], [925, 4, 1, "", "last"], [925, 4, 1, "", "matches"], [925, 4, 1, "", "numeric"], [925, 4, 1, "", "signed_integer"], [925, 4, 1, "", "starts_with"], [925, 4, 1, "", "string"], [925, 4, 1, "", "temporal"], [925, 4, 1, "", "time"], [925, 4, 1, "", "unsigned_integer"]], "polars.testing": [[158, 4, 1, "", "assert_frame_equal"], [159, 4, 1, "", "assert_frame_not_equal"], [160, 4, 1, "", "assert_series_equal"], [161, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[162, 1, 1, "", "column"], [163, 4, 1, "", "columns"], [164, 4, 1, "", "create_list_strategy"], [165, 4, 1, "", "dataframes"], [166, 4, 1, "", "dtypes"], [167, 4, 1, "", "lists"], [168, 4, 1, "", "load_profile"], [169, 4, 1, "", "series"], [170, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[162, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 45, 46, 55, 60, 81, 91, 93, 99, 122, 129, 135, 136, 137, 138, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 169, 181, 182, 193, 194, 197, 202, 205, 210, 211, 216, 222, 225, 226, 236, 243, 245, 250, 252, 255, 258, 259, 266, 275, 278, 283, 285, 286, 287, 288, 289, 294, 295, 320, 357, 390, 420, 425, 444, 447, 467, 473, 477, 505, 526, 555, 556, 568, 577, 582, 589, 590, 597, 598, 609, 616, 650, 654, 662, 663, 664, 666, 668, 676, 677, 680, 681, 683, 690, 691, 692, 693, 697, 701, 703, 705, 713, 722, 723, 724, 725, 730, 737, 740, 743, 744, 753, 754, 756, 757, 763, 766, 767, 768, 769, 771, 773, 774, 776, 783, 785, 787, 788, 789, 795, 801, 805, 821, 823, 834, 835, 844, 845, 850, 859, 870, 871, 877, 882, 883, 884, 885, 886, 889, 890, 902, 919, 924, 925, 929, 930, 931, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1044, 1046, 1048, 1049, 1050, 1053, 1061, 1063, 1064, 1065, 1066, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1091, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1310, 1315, 1319, 1323, 1326, 1333, 1334], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 38, 39, 40, 45, 49, 51, 52, 53, 55, 59, 67, 77, 123, 132, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 162, 163, 164, 165, 166, 167, 169, 172, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 216, 217, 221, 223, 224, 225, 228, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 265, 266, 267, 268, 270, 275, 276, 277, 278, 279, 280, 282, 284, 288, 290, 291, 294, 296, 297, 299, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 320, 323, 324, 328, 330, 331, 333, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 353, 356, 366, 369, 371, 378, 380, 385, 388, 391, 395, 396, 397, 398, 399, 400, 407, 408, 409, 413, 414, 415, 421, 422, 426, 429, 431, 432, 436, 440, 443, 445, 447, 450, 451, 453, 454, 458, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 476, 477, 479, 481, 482, 484, 486, 488, 491, 492, 495, 498, 500, 501, 502, 503, 505, 507, 512, 513, 516, 519, 522, 523, 524, 530, 531, 543, 547, 549, 550, 551, 552, 554, 555, 557, 558, 559, 563, 568, 571, 574, 575, 576, 578, 580, 589, 590, 591, 592, 593, 595, 596, 598, 601, 602, 604, 605, 606, 607, 611, 612, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 651, 652, 653, 656, 661, 662, 663, 666, 667, 705, 706, 707, 709, 710, 711, 714, 719, 720, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 741, 748, 752, 755, 761, 762, 764, 767, 770, 771, 772, 776, 778, 779, 783, 784, 791, 792, 793, 794, 795, 796, 801, 805, 820, 823, 824, 825, 828, 830, 831, 833, 834, 836, 837, 839, 840, 841, 843, 844, 845, 848, 849, 853, 855, 858, 859, 862, 864, 865, 869, 870, 875, 877, 878, 879, 887, 889, 891, 892, 893, 895, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 919, 924, 925, 929, 936, 937, 938, 939, 940, 941, 942, 944, 946, 949, 955, 965, 968, 970, 976, 988, 993, 995, 996, 998, 1001, 1002, 1003, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1024, 1028, 1032, 1033, 1034, 1036, 1038, 1042, 1046, 1049, 1053, 1056, 1057, 1059, 1060, 1064, 1067, 1072, 1073, 1074, 1075, 1080, 1085, 1087, 1092, 1093, 1095, 1097, 1098, 1102, 1105, 1107, 1108, 1109, 1110, 1113, 1114, 1121, 1122, 1125, 1128, 1131, 1132, 1133, 1139, 1140, 1152, 1156, 1158, 1159, 1160, 1161, 1162, 1166, 1167, 1173, 1174, 1180, 1183, 1185, 1186, 1187, 1191, 1192, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1211, 1219, 1220, 1221, 1222, 1225, 1226, 1227, 1230, 1235, 1236, 1237, 1240, 1241, 1245, 1250, 1283, 1284, 1286, 1289, 1291, 1292, 1293, 1294, 1298, 1300, 1310, 1315, 1319, 1325, 1327, 1328, 1329, 1332, 1335, 1336, 1338, 1340, 1341], "00": [27, 40, 66, 182, 189, 211, 290, 320, 416, 417, 420, 424, 434, 435, 437, 441, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 620, 622, 624, 626, 628, 631, 633, 635, 690, 693, 697, 748, 749, 750, 751, 791, 792, 793, 805, 823, 831, 845, 919, 925, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1250, 1264, 1267, 1271, 1333], "000": [9, 10, 27, 40, 320, 1250, 1341], "0000": [282, 320, 1294, 1310, 1341], "000000": [374, 375, 447, 657, 972, 973, 1231], "00000001": [11, 721, 805], "00000010": [721, 805], "00000011": [721, 805], "00000100": [721, 805], "00001000": [721, 805], "00001010": [721, 805], "00001011": [721, 805], "0000e": 11, "0000ff": [374, 375, 657, 972, 973, 1231], "0001": 447, "000100": 447, "000101": 447, "0005": 925, "00050": 925, "000800": 1053, "001": [53, 700, 751, 1056, 1057, 1059, 1274], "002": [751, 1056, 1057, 1059], "005": [1067, 1310], "00prefix": 925, "00z": [690, 693, 1264, 1267], "01": [28, 51, 65, 66, 165, 182, 189, 209, 211, 226, 252, 290, 320, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 690, 692, 693, 697, 732, 745, 746, 747, 748, 749, 750, 751, 805, 823, 831, 845, 850, 868, 919, 925, 1017, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1033, 1034, 1038, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1264, 1266, 1267, 1271, 1333, 1336], "010": [9, 695, 1269], "01000": 28, "01000010": [721, 805], "01000110": [721, 805], "012": [637, 805, 1208, 1310], "0123": [700, 1274], "01234": [637, 805, 1208, 1310], "012345": 1053, "015625": [1183, 1310], "02": [51, 182, 189, 209, 211, 252, 290, 320, 415, 417, 419, 425, 434, 435, 437, 441, 446, 447, 449, 452, 454, 458, 617, 620, 622, 624, 626, 628, 631, 633, 635, 636, 690, 692, 693, 697, 732, 745, 746, 747, 748, 749, 750, 751, 805, 823, 831, 845, 868, 919, 925, 968, 1019, 1021, 1023, 1024, 1027, 1028, 1033, 1034, 1038, 1040, 1041, 1042, 1046, 1047, 1048, 1051, 1052, 1055, 1058, 1060, 1061, 1156, 1264, 1266, 1267, 1271, 1333, 1334], "03": [51, 129, 135, 182, 211, 226, 252, 290, 320, 417, 419, 420, 425, 434, 435, 437, 440, 441, 442, 444, 446, 447, 448, 449, 452, 454, 455, 458, 464, 477, 617, 620, 622, 624, 626, 628, 631, 633, 635, 692, 697, 745, 746, 747, 748, 749, 750, 751, 805, 823, 845, 850, 868, 919, 925, 1019, 1021, 1022, 1027, 1028, 1033, 1034, 1040, 1041, 1042, 1047, 1048, 1050, 1052, 1054, 1055, 1058, 1060, 1266, 1271], "037037": [1183, 1310], "04": [155, 182, 189, 211, 290, 320, 419, 420, 434, 435, 440, 441, 442, 444, 448, 449, 452, 454, 458, 620, 622, 624, 626, 628, 631, 633, 635, 690, 732, 745, 748, 749, 751, 805, 823, 831, 845, 919, 925, 1022, 1034, 1038, 1040, 1041, 1042, 1047, 1050, 1054, 1055, 1058, 1060, 1064, 1264, 1333], "047198": 1335, "05": [16, 155, 158, 159, 160, 161, 165, 182, 189, 290, 320, 415, 418, 419, 420, 421, 422, 426, 429, 430, 431, 432, 434, 435, 436, 441, 443, 444, 445, 447, 448, 732, 745, 746, 748, 749, 823, 831, 919, 925, 1021, 1022, 1023, 1024, 1047, 1048, 1050, 1051, 1053, 1054, 1061, 1333, 1334, 1336], "050545": 129, "0522623626787952": [1114, 1310], "0545": [1023, 1024, 1051], "05t10": 1053, "06": [165, 182, 290, 320, 415, 419, 433, 439, 441, 442, 443, 455, 456, 745, 748, 823, 919, 925, 1017, 1047, 1048, 1053, 1061], "060": [421, 422, 426, 429, 431, 432, 436, 443, 445], "0601749420166": [197, 320], "06293300616044681": [1067, 1310], "07": [16, 135, 165, 189, 320, 415, 418, 419, 430, 441, 442, 447, 455, 690, 745, 746, 748, 749, 757, 831, 919, 925, 1017, 1021, 1047, 1053, 1264, 1333, 1336], "071068": [189, 320, 831, 919], "08": [135, 158, 159, 160, 161, 189, 226, 252, 267, 320, 415, 419, 434, 435, 442, 447, 617, 690, 749, 751, 805, 831, 850, 868, 919, 925, 1017, 1048, 1061, 1264, 1333, 1334], "085537": [1076, 1310], "09": [51, 135, 189, 252, 320, 415, 419, 434, 435, 447, 597, 617, 694, 745, 746, 748, 793, 805, 831, 868, 919, 925, 1017, 1268], "090909": [598, 805], "094395": 1335, "098612": [552, 805, 1159, 1161, 1310, 1332], "0999": [418, 430], "0_": [40, 320], "0m": [424, 1026], "0x11bc0ad80": 924, "0\u00b5": 447, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 59, 60, 77, 81, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 169, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 677, 678, 682, 683, 684, 685, 686, 687, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 801, 805, 820, 821, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 925, 929, 930, 931, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 976, 987, 988, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1236, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1256, 1257, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341], "10": [13, 16, 17, 27, 35, 37, 39, 40, 41, 42, 45, 49, 51, 59, 129, 135, 136, 138, 149, 157, 184, 189, 193, 199, 208, 209, 211, 213, 215, 216, 217, 222, 226, 229, 240, 244, 246, 250, 252, 258, 267, 271, 294, 299, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 331, 335, 343, 344, 345, 347, 397, 403, 406, 411, 415, 416, 418, 419, 421, 422, 424, 426, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 445, 447, 455, 458, 464, 485, 486, 487, 491, 497, 509, 517, 523, 525, 531, 541, 543, 545, 549, 551, 567, 569, 580, 595, 597, 598, 601, 611, 612, 617, 648, 695, 705, 708, 721, 732, 733, 741, 746, 748, 749, 752, 755, 757, 759, 765, 766, 790, 793, 805, 826, 827, 831, 834, 845, 846, 848, 850, 854, 863, 864, 868, 870, 880, 881, 889, 895, 898, 900, 903, 904, 905, 906, 907, 908, 909, 919, 925, 999, 1013, 1017, 1018, 1020, 1021, 1026, 1035, 1047, 1053, 1061, 1064, 1067, 1073, 1094, 1104, 1118, 1126, 1134, 1140, 1150, 1152, 1154, 1158, 1160, 1164, 1180, 1192, 1210, 1212, 1269, 1282, 1289, 1291, 1294, 1310, 1319, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1341], "100": [10, 17, 27, 40, 125, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 227, 245, 263, 320, 447, 611, 612, 641, 655, 665, 667, 670, 678, 694, 750, 805, 851, 874, 919, 925, 1069, 1160, 1176, 1191, 1192, 1198, 1199, 1201, 1215, 1229, 1241, 1244, 1252, 1268, 1310, 1330, 1341], "1000": [137, 197, 276, 297, 320, 336, 805, 893, 919, 1056, 1160, 1288, 1310, 1341], "10000": [135, 224, 320], "100000": [10, 27], "1000000": [11, 1059], "1001": [297, 320, 893, 919], "1002": [297, 320, 893, 919], "10047419486152048166": [212, 320], "1005": [336, 805], "100_000": [783, 855, 919], "100\u00b5": 447, "101": [9, 27, 227, 320, 419, 447, 695, 851, 919, 925, 1269, 1341], "101000": 419, "10101": [27, 1336], "1010101": 9, "101514": [189, 320, 831, 919], "102": [227, 320, 851, 919], "1024": [37, 45, 46, 49, 135, 136, 137, 145, 153, 320, 378, 919, 976], "1040361802642726": [1114, 1310], "107149": 1335, "10734580197236529959": [1093, 1310], "1073741824": [642, 805], "10783150408545073287": [212, 320], "107_930_000": 1319, "10_000": [40, 320], "10i": [211, 320, 845, 919], "10m": [442, 455, 1048, 1061], "10t00": 447, "11": [10, 16, 45, 49, 157, 165, 180, 189, 226, 252, 320, 331, 434, 435, 437, 442, 455, 479, 491, 523, 574, 598, 607, 617, 618, 632, 648, 721, 788, 793, 801, 805, 820, 826, 827, 831, 846, 850, 854, 864, 868, 881, 919, 925, 1043, 1048, 1061, 1164, 1197, 1310, 1328], "110": [193, 320, 678, 695, 834, 919, 1269], "1101441246220388612": [486, 805], "111": [10, 1330], "11111": 1049, "111110": 1049, "11111001": [721, 805], "11111010": [721, 805], "11111111": 10, "112": [642, 805, 1341], "11330": 164, "1152921504606846976": [1189, 1310], "116": 164, "11638928888656214026": [486, 805], "118034": [879, 919], "11aa": 1333, "11aabb": 1333, "11h": [416, 1018], "12": [26, 40, 51, 129, 135, 157, 165, 189, 211, 222, 226, 227, 252, 267, 290, 320, 331, 405, 416, 418, 419, 423, 430, 433, 434, 435, 437, 438, 439, 440, 442, 447, 455, 456, 457, 464, 491, 523, 555, 571, 598, 606, 617, 632, 642, 656, 676, 694, 742, 745, 748, 749, 750, 766, 791, 792, 793, 805, 831, 845, 846, 850, 851, 854, 868, 875, 881, 919, 925, 1018, 1020, 1021, 1032, 1033, 1035, 1039, 1046, 1048, 1053, 1061, 1073, 1164, 1207, 1230, 1251, 1268, 1310, 1332, 1333, 1334, 1336, 1338, 1341], "120": [227, 320, 751, 851, 919, 1335], "1200": [637, 805], "120134": [694, 1268], "121": 1341, "123": [9, 564, 656, 663, 677, 700, 795, 925, 1230, 1237, 1274, 1287, 1310], "123000": 925, "1232e": [1001, 1003, 1310], "1234": [27, 637, 805], "12345": [757, 996, 1053, 1085, 1207, 1310], "1234500": 925, "123456": [9, 925], "1234567": 27, "123456780": 129, "12346": 757, "123465": 925, "123a123": 677, "123abc": [676, 1250, 1251], "125": [1, 40, 55, 320, 329, 602, 784, 805, 878, 919, 1180, 1183, 1310], "127": [1298, 1310, 1329], "128": [53, 67, 72, 1180, 1310], "129": [642, 805], "13": [183, 184, 189, 200, 201, 208, 216, 227, 228, 240, 252, 294, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 331, 415, 421, 422, 426, 429, 431, 432, 436, 443, 445, 567, 569, 617, 694, 735, 741, 744, 748, 755, 789, 791, 794, 805, 824, 825, 831, 839, 840, 851, 853, 868, 889, 898, 900, 903, 904, 905, 906, 907, 908, 909, 919, 1017, 1048, 1061, 1062, 1164, 1268, 1310, 1329], "130": [132, 227, 320, 851, 919], "13382926553367784577": [486, 805], "134821952": 1319, "134_821_952": 1319, "135": [729, 1335], "13614470193936745724": [486, 805], "13756996518000038261": [1093, 1310], "13d": 447, "13h": [416, 1018], "14": [39, 157, 189, 227, 230, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 416, 421, 422, 426, 429, 431, 432, 436, 443, 445, 447, 491, 564, 607, 748, 791, 792, 805, 831, 851, 898, 900, 903, 904, 905, 906, 907, 908, 909, 919, 925, 1018, 1048, 1053], "140": [227, 320, 851, 919], "141592653589793": 10, "141593": [606, 805, 936, 1310, 1332, 1335], "142857": [1180, 1310], "143": [694, 1268, 1341], "1433": [38, 320], "1436e16": 165, "1438741209321515184": [212, 320], "1440": [452, 1058], "1443e235": 1341, "149": 1341, "14d": 925, "14h": 447, "15": [10, 40, 157, 189, 211, 216, 227, 230, 252, 320, 407, 411, 435, 440, 442, 447, 455, 464, 601, 617, 632, 742, 748, 791, 792, 805, 831, 845, 851, 868, 919, 925, 1010, 1013, 1048, 1053, 1061, 1073, 1310, 1329, 1333], "150": [227, 320, 851, 919, 1199, 1310], "1500": [157, 168], "15000": [224, 320], "153061": [505, 805], "15836": 165, "15_000": [224, 320], "16": [1, 40, 53, 73, 83, 157, 171, 189, 211, 227, 252, 294, 320, 403, 406, 440, 447, 491, 571, 578, 597, 602, 617, 695, 705, 741, 751, 752, 755, 805, 831, 845, 851, 868, 875, 889, 919, 925, 1048, 1061, 1180, 1220, 1269, 1283, 1310, 1329, 1332, 1333, 1338], "160": [227, 320, 851, 919], "165": [1048, 1061], "1656e15": [1003, 1310], "166667": [1180, 1310], "1666683077": 757, "1666683099": 757, "167": 51, "16996": 1341, "16h": 925, "17": [157, 165, 197, 226, 299, 320, 464, 597, 618, 636, 737, 757, 792, 805, 850, 895, 919, 1001, 1003, 1048, 1073, 1197, 1310, 1341], "170": [227, 320, 851, 919], "17293822569102704640": [1189, 1310], "174": 1341, "175201": [646, 805, 1221, 1310], "1755e": [162, 165], "1764": 55, "17888890": [197, 320], "179": 1341, "17_500": [224, 320], "18": [38, 129, 140, 189, 237, 252, 320, 406, 442, 455, 458, 491, 580, 597, 617, 705, 805, 831, 860, 864, 868, 919, 925, 1053, 1064, 1327, 1338], "180": [409, 606, 805, 1335], "1800": [440, 1046], "1844": 165, "18446744073709551614": [1189, 1310], "185_000_000": 1319, "186": 1341, "1875": [634, 805, 887, 919], "1897": [418, 430, 1020, 1035], "18d": 925, "19": [140, 165, 226, 252, 320, 418, 442, 617, 622, 624, 626, 628, 694, 805, 850, 868, 919, 1020, 1048, 1061, 1268], "1920": 1333, "196": 1334, "1964": [864, 919], "1969": [1333, 1334], "1970": [65, 66, 155, 1319], "1972": 1319, "1976": [428, 459], "1977": [428, 459], "1978": [421, 422, 426, 428, 429, 431, 432, 436, 443, 445, 459, 1334], "1979": [428, 459], "1980": 447, "1985": [746, 749], "1990": [135, 1319], "1993": 1319, "1994": 1319, "1995": 135, "1998": [437, 1043], "1999": [267, 320, 437, 447, 925, 1043, 1053, 1336], "199992": [855, 919], "199994": [855, 919], "199996": [855, 919], "199998": [855, 919], "1_000_000": [197, 320, 1071, 1310], "1_234_500": 925, "1d": [211, 226, 252, 290, 320, 417, 437, 442, 447, 449, 452, 455, 458, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 751, 765, 792, 793, 805, 845, 850, 868, 919, 925, 1019, 1027, 1033, 1043, 1048, 1052, 1055, 1058, 1061, 1073, 1310], "1e": [11, 158, 159, 160, 161], "1e6": 11, "1h": [211, 226, 252, 290, 320, 424, 437, 442, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1026, 1028, 1043, 1048, 1061, 1073, 1310], "1i": [211, 252, 290, 320, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 845, 868, 919, 1073, 1310], "1m": [211, 226, 252, 290, 320, 437, 442, 454, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1056, 1057, 1059, 1060, 1061, 1073, 1310], "1mo": [211, 226, 252, 290, 320, 420, 434, 435, 437, 441, 442, 448, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1022, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1054, 1061, 1062, 1073, 1310], "1n": [211, 226, 252, 290, 320, 437, 442, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061, 1073, 1310], "1q": [211, 226, 252, 290, 320, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061], "1st_col": 925, "1u": [211, 226, 252, 290, 320, 437, 442, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061, 1073, 1310], "1w": [211, 226, 252, 290, 320, 437, 442, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061, 1073, 1310], "1w2d": [746, 747], "1y": [211, 226, 252, 290, 320, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061], "1y2mo": [437, 1043], "1zy3": [656, 1230], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 77, 81, 94, 97, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 138, 144, 145, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 333, 335, 336, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 380, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 427, 430, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 779, 783, 784, 785, 786, 787, 788, 790, 793, 794, 795, 801, 805, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 924, 925, 929, 930, 931, 934, 937, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 975, 976, 987, 992, 993, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1021, 1023, 1024, 1026, 1028, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1051, 1061, 1063, 1064, 1065, 1066, 1067, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1117, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1230, 1236, 1238, 1240, 1241, 1242, 1244, 1245, 1247, 1250, 1251, 1256, 1257, 1259, 1260, 1261, 1264, 1265, 1267, 1268, 1269, 1270, 1273, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1322, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341], "20": [38, 39, 40, 135, 140, 157, 162, 163, 164, 165, 169, 172, 180, 189, 193, 199, 215, 216, 237, 244, 246, 250, 267, 277, 278, 282, 296, 301, 320, 343, 344, 345, 397, 411, 418, 421, 422, 426, 429, 430, 431, 432, 436, 442, 443, 445, 447, 455, 458, 479, 486, 491, 555, 563, 574, 601, 620, 622, 624, 626, 628, 631, 633, 635, 661, 705, 720, 748, 757, 765, 784, 792, 805, 820, 831, 834, 837, 860, 863, 878, 892, 897, 919, 925, 1013, 1020, 1024, 1035, 1048, 1053, 1061, 1064, 1076, 1092, 1191, 1235, 1289, 1291, 1294, 1310, 1326, 1327, 1330, 1336], "200": [450, 451, 453, 611, 612, 805, 925, 1069, 1176, 1191, 1192, 1198, 1199, 1201, 1310, 1330], "2000": [418, 427, 430, 434, 435, 437, 925, 1020, 1029, 1035, 1040, 1041, 1043, 1049, 1319, 1333], "200000": [450, 855, 919], "200000000": 453, "2001": [16, 417, 418, 423, 425, 427, 430, 433, 437, 438, 439, 442, 446, 455, 456, 457, 458, 620, 622, 624, 626, 628, 631, 633, 635, 690, 805, 925, 1019, 1020, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1048, 1052, 1061, 1062, 1063, 1064, 1065, 1264], "2002": [135, 427, 437, 1029, 1043, 1065], "2003": [437, 757, 1043], "2004": [437, 1043], "2005": [437, 1043], "2006": [437, 1043], "2008": 1319, "200m": [450, 451, 453], "2010": [267, 320, 447, 925], "2011": [416, 1018], "2012": [416, 1018, 1336], "2013": 1046, "2016": [226, 320, 850, 919], "2017": [226, 320, 850, 919], "2018": [226, 320, 441, 850, 919, 1047], "2019": [226, 320, 850, 919], "202": 1334, "2020": [139, 150, 182, 189, 209, 226, 252, 320, 323, 415, 420, 424, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 464, 617, 690, 692, 693, 732, 805, 823, 831, 850, 868, 919, 925, 1017, 1022, 1026, 1047, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1073, 1264, 1266, 1267, 1310, 1334], "2021": [182, 189, 209, 211, 290, 320, 690, 765, 823, 831, 845, 919, 925, 1023, 1024, 1030, 1051, 1264, 1333], "2022": [51, 182, 189, 209, 320, 419, 442, 455, 690, 746, 747, 749, 750, 751, 757, 823, 831, 919, 925, 1021, 1030, 1048, 1061, 1264], "2023": [16, 40, 129, 157, 224, 320, 419, 751, 765, 925, 1021], "2024": [157, 415, 421, 422, 426, 429, 431, 432, 436, 440, 443, 445, 597, 732, 745, 746, 748, 749, 751, 805, 925, 1017, 1046, 1333, 1336], "2025": [415, 440, 732, 925, 1017], "2026": 1334, "2030": 1333, "2031": 925, "2040": 447, "2047317070637311557": [212, 320], "2055938745": 129, "2065": [421, 422, 426, 429, 431, 432, 436, 443, 445], "2068": 165, "207": 1334, "2077": [267, 320, 447, 925, 1053, 1333, 1334], "2095": 165, "20_000": [40, 320], "20t08": 447, "20t18": 1053, "20word": 138, "21": [157, 189, 237, 269, 320, 418, 620, 622, 624, 626, 628, 631, 633, 635, 748, 757, 805, 831, 860, 919, 925, 1020, 1327], "213": 1341, "2147483647": 1341, "2147483648": [1162, 1310], "21d": 925, "22": [45, 49, 157, 165, 320, 423, 438, 442, 455, 457, 458, 618, 620, 622, 624, 626, 628, 631, 633, 635, 690, 748, 801, 805, 919, 925, 1048, 1061, 1064, 1197, 1264, 1310, 1333, 1334, 1341], "221": 1341, "2246e": [1220, 1283, 1310], "225": [442, 455, 1335], "22500": 783, "22_000_000": 1319, "22_500": 783, "23": [10, 165, 189, 211, 252, 282, 320, 419, 423, 426, 438, 440, 442, 447, 457, 617, 620, 622, 624, 626, 628, 631, 633, 635, 748, 751, 791, 792, 793, 805, 831, 845, 868, 878, 919, 925, 1021, 1028, 1046, 1294, 1310, 1340, 1341], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1319, "2337": [40, 320], "234": 27, "2345": 925, "23456789": 10, "235": 1341, "23h": 925, "24": [53, 157, 211, 226, 230, 252, 267, 290, 320, 405, 407, 423, 437, 438, 442, 449, 455, 457, 578, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 1010, 1043, 1048, 1055, 1061, 1113, 1310, 1333, 1340], "24030": 164, "249": [721, 805], "25": [1, 27, 40, 55, 129, 189, 193, 211, 226, 252, 277, 282, 290, 294, 320, 378, 411, 423, 424, 438, 442, 447, 455, 457, 464, 602, 604, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 714, 748, 749, 750, 751, 757, 767, 792, 793, 805, 831, 834, 845, 850, 857, 868, 887, 889, 919, 925, 976, 1012, 1013, 1026, 1048, 1053, 1061, 1067, 1073, 1095, 1180, 1185, 1250, 1310, 1327, 1332, 1338, 1339], "250": [721, 805, 1199, 1310, 1330, 1341], "2500": [224, 282, 320], "254508": [464, 805, 1073, 1310], "255": 1341, "256": [230, 320, 378, 976, 1180, 1310, 1332], "2560": 976, "259921": [395, 805, 995, 1310, 1332], "25_000_000": 1319, "26": [38, 40, 157, 162, 163, 164, 165, 169, 189, 320, 424, 456, 831, 919, 1026], "266667": [189, 320, 831, 919], "27": [1, 55, 277, 313, 320, 406, 433, 439, 456, 705, 805, 909, 925, 1183, 1289, 1310, 1340, 1341], "270": 1335, "28": [273, 278, 320, 329, 441, 458, 805, 1047, 1064, 1291, 1310, 1333, 1335, 1340, 1341], "283185": [606, 805], "2846": 320, "285714": [492, 805, 1098, 1310], "289962": 1335, "28_341_469": 1319, "29": [16, 157, 416, 434, 1018, 1040], "29096": 1341, "290994": [879, 919], "292432": [937, 1310], "292893": [464, 805, 1073, 1310], "2_color_scal": [40, 320], "2d": [252, 277, 278, 320, 437, 617, 765, 805, 868, 919, 1018, 1025], "2h": [620, 622, 624, 626, 628, 631, 633, 635, 805], "2i": [211, 320, 845, 919], "2m": [925, 1038], "2x": 164, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 59, 60, 77, 94, 97, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 138, 140, 144, 145, 146, 149, 155, 157, 158, 159, 160, 161, 164, 165, 166, 167, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 329, 330, 331, 332, 334, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 389, 390, 391, 392, 393, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 455, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 576, 577, 578, 579, 580, 581, 583, 585, 587, 588, 591, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 649, 650, 651, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 697, 698, 701, 702, 703, 704, 705, 706, 708, 712, 713, 716, 717, 718, 720, 721, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 924, 925, 930, 931, 934, 936, 938, 939, 940, 942, 943, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 987, 988, 989, 991, 992, 993, 995, 996, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1059, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1117, 1118, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1229, 1231, 1232, 1233, 1236, 1237, 1238, 1241, 1242, 1243, 1244, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1258, 1265, 1266, 1271, 1272, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1322, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341], "30": [40, 189, 199, 211, 215, 244, 250, 273, 294, 320, 323, 343, 344, 345, 411, 419, 421, 422, 426, 429, 431, 432, 433, 434, 436, 439, 441, 442, 443, 445, 447, 448, 455, 456, 486, 563, 642, 748, 765, 791, 792, 805, 831, 837, 845, 863, 889, 919, 925, 1013, 1021, 1040, 1047, 1048, 1053, 1054, 1061, 1092, 1310, 1315, 1326, 1327, 1330, 1332, 1333, 1335, 1336, 1339, 1341], "300": [273, 320, 485, 595, 612, 805, 925, 1192, 1198, 1199, 1201, 1310, 1330], "3000": 925, "3002": [418, 430, 1020, 1035], "30103": [551, 805, 1332], "3022416320763508302": [1093, 1310], "30_000": [40, 320], "30m": [211, 320, 442, 455, 845, 919, 1048, 1061], "30t16": 447, "31": [55, 189, 267, 320, 418, 419, 423, 430, 434, 437, 440, 448, 661, 690, 745, 748, 757, 765, 784, 831, 919, 925, 1018, 1020, 1021, 1025, 1035, 1040, 1046, 1053, 1054, 1191, 1235, 1264, 1310, 1334, 1336, 1341], "31t06": 1053, "32": [53, 65, 70, 74, 84, 221, 226, 252, 320, 578, 617, 642, 805, 850, 868, 919, 1014, 1044, 1180, 1202, 1310, 1327, 1333], "321": [27, 1341], "3212": [694, 1268], "321cba": 1333, "3265500": 925, "32971": [458, 1064], "32974": [458, 1064], "32976": [458, 1064], "32bit": [277, 320], "33": [189, 237, 320, 636, 805, 831, 860, 919, 1202, 1310, 1334], "333": [16, 637, 805, 1069, 1176, 1208, 1310], "33333": 1336, "333333": [217, 320, 580, 848, 919, 1180, 1206, 1310, 1327], "34": [189, 320, 676, 690, 831, 919, 1251, 1264], "3420": [694, 1268], "343622": [647, 805], "345": [393, 394, 672, 673, 991, 992, 1246, 1247], "3450": [1208, 1310], "3456": 925, "34776706224699483": [1222, 1310], "35": [40, 320, 411, 447, 748, 805, 1013, 1310], "350": [320, 323, 485, 595, 805, 1199, 1310, 1315], "3500": [1208, 1310], "356": [423, 438, 457], "356194": [728, 729, 1335], "357": [423, 438, 457], "358": [423, 438, 457], "359": [423, 438, 457], "36": [189, 320, 831, 919, 1338], "360": [409, 606, 805, 1335], "361": 1341, "363961": [543, 1152], "366": [438, 1044], "37": [12, 925], "370h": [464, 805, 1073, 1310], "37338": 1341, "38": [40, 129, 162, 165, 320], "38180177416060584": [629, 805, 1203, 1310], "381802": [629, 805, 1203, 1310], "386294": [552, 805, 1161, 1310, 1332], "389056": [468, 805, 1076, 1310, 1332], "39": [633, 757, 805], "39m": 925, "3_color_scal": [40, 320], "3d12h4m25": [211, 226, 252, 290, 320, 442, 455, 464, 617, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1048, 1061, 1073, 1310], "3f": [138, 690, 693, 1264, 1267], "3i": [211, 252, 320, 845, 919], "3rd": [1242, 1265], "3xy": [656, 1230], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 41, 42, 45, 51, 52, 53, 54, 55, 59, 60, 77, 97, 122, 123, 124, 125, 126, 127, 128, 129, 132, 149, 157, 169, 178, 179, 180, 181, 182, 183, 184, 188, 190, 194, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 252, 254, 255, 262, 263, 266, 270, 271, 272, 273, 274, 275, 278, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 333, 335, 347, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 372, 378, 389, 390, 391, 393, 394, 395, 396, 397, 401, 402, 405, 406, 407, 409, 412, 419, 422, 423, 430, 438, 439, 440, 441, 442, 443, 444, 447, 449, 452, 454, 455, 457, 461, 462, 464, 468, 469, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 502, 503, 507, 508, 509, 516, 517, 518, 519, 520, 522, 523, 525, 533, 535, 536, 537, 538, 539, 540, 541, 545, 546, 551, 554, 555, 556, 576, 578, 580, 581, 583, 585, 587, 588, 591, 592, 593, 596, 597, 599, 600, 601, 602, 605, 607, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 641, 644, 648, 649, 650, 651, 654, 656, 660, 663, 666, 668, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 688, 689, 690, 691, 695, 700, 701, 703, 704, 705, 706, 708, 711, 712, 713, 714, 720, 721, 723, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 748, 749, 750, 752, 754, 755, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 801, 805, 820, 821, 823, 824, 825, 826, 827, 830, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 864, 865, 868, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 892, 893, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 924, 925, 929, 934, 937, 944, 951, 953, 954, 955, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 976, 987, 991, 992, 996, 997, 999, 1005, 1010, 1012, 1014, 1024, 1028, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1050, 1055, 1058, 1060, 1061, 1062, 1063, 1070, 1073, 1077, 1078, 1080, 1081, 1086, 1087, 1089, 1094, 1095, 1097, 1098, 1099, 1100, 1104, 1107, 1108, 1109, 1110, 1112, 1118, 1125, 1126, 1127, 1128, 1129, 1134, 1138, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1155, 1170, 1173, 1174, 1177, 1180, 1181, 1182, 1183, 1187, 1188, 1191, 1192, 1193, 1196, 1200, 1202, 1203, 1204, 1205, 1206, 1209, 1211, 1215, 1216, 1219, 1222, 1223, 1224, 1228, 1230, 1234, 1237, 1240, 1242, 1246, 1247, 1248, 1249, 1254, 1256, 1257, 1262, 1263, 1264, 1265, 1269, 1274, 1275, 1278, 1280, 1282, 1288, 1291, 1293, 1295, 1301, 1310, 1315, 1319, 1320, 1322, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1338, 1339, 1340, 1341], "40": [40, 189, 199, 226, 244, 320, 442, 447, 455, 486, 549, 694, 705, 805, 831, 850, 863, 919, 925, 1030, 1061, 1158, 1268, 1326, 1327, 1330, 1333], "400": [289, 320, 450, 451, 453, 886, 919, 1198, 1199, 1201, 1310, 1330], "4000000": [1071, 1310], "404": [227, 320, 662, 664, 851, 919, 1236, 1238], "4096": 1332, "41": [189, 320, 633, 805, 831, 919, 1327, 1341], "412277": 165, "414214": [651, 805, 1225, 1310, 1332], "4160": 55, "416147": 1335, "4164": [226, 320, 850, 919], "42": [55, 189, 212, 237, 252, 320, 447, 617, 805, 831, 860, 868, 919, 1093, 1310, 1326, 1340], "424778": [606, 805], "428571": [463, 805, 1072, 1310], "429101": 1327, "4294967296": [45, 320], "43": [189, 252, 320, 406, 617, 633, 805, 831, 868, 919], "4321": 925, "433013": [630, 805, 879, 919], "44": [10, 237, 320, 412, 805, 860, 919], "4411": [226, 320, 850, 919], "44225": [995, 1310], "444": 10, "44444444444": 10, "45": [40, 189, 252, 320, 419, 442, 455, 617, 633, 656, 663, 702, 729, 748, 765, 791, 792, 805, 831, 868, 919, 925, 1021, 1048, 1053, 1061, 1230, 1237, 1277, 1332, 1333, 1335, 1339, 1341], "450": [1199, 1310], "45000": 783, "4500000": 925, "456": [9, 10, 419, 925, 1021, 1287, 1310], "456000": [419, 1021], "456001\u00b5": 925, "4566": [226, 320, 850, 919], "456789": [447, 925, 1049], "456789\u00b5": 925, "456m": 925, "457658": 1335, "459148": [460, 805], "46": 925, "4696": [226, 320, 850, 919], "47": [51, 189, 320, 633, 805, 831, 919, 925, 1327], "470": [864, 919], "47033": [629, 805, 1203, 1310], "47033046033698594": [629, 805, 1203, 1310], "475": [864, 919], "48": [12, 165, 252, 320, 617, 705, 805, 868, 919, 925], "4827": [226, 320, 850, 919], "485": 1341, "49": [189, 320, 831, 919, 925], "492474": [464, 805, 1073, 1310], "498": [227, 320, 851, 919], "4_500_000": 925, "4ab4a": 1333, "4d": [464, 805, 1073, 1310], "4f6228": [40, 320], "4f71": [40, 320], "4x": [223, 320], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 41, 42, 45, 51, 52, 54, 55, 59, 97, 122, 125, 126, 127, 128, 129, 131, 136, 157, 158, 160, 163, 165, 169, 179, 182, 183, 184, 189, 190, 193, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 213, 214, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 239, 240, 241, 243, 245, 246, 247, 252, 255, 262, 263, 266, 267, 270, 271, 272, 273, 274, 275, 277, 278, 281, 282, 284, 287, 288, 289, 290, 293, 294, 296, 297, 299, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 329, 330, 333, 348, 349, 354, 355, 356, 358, 360, 364, 369, 371, 377, 378, 389, 390, 391, 393, 394, 396, 397, 407, 408, 409, 411, 412, 415, 418, 419, 420, 421, 422, 426, 429, 430, 431, 432, 436, 441, 443, 444, 445, 447, 448, 454, 458, 462, 464, 466, 467, 470, 472, 476, 477, 481, 482, 484, 487, 489, 491, 493, 496, 499, 500, 501, 502, 503, 507, 509, 516, 519, 520, 522, 523, 525, 528, 530, 531, 535, 536, 537, 538, 539, 540, 544, 545, 549, 555, 576, 578, 580, 592, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 639, 650, 656, 666, 667, 668, 671, 672, 673, 691, 695, 706, 708, 712, 713, 714, 726, 728, 729, 731, 732, 733, 734, 735, 737, 739, 741, 742, 743, 744, 745, 746, 748, 751, 752, 753, 754, 755, 759, 761, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 783, 784, 786, 788, 789, 790, 794, 801, 805, 823, 824, 825, 826, 827, 831, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 857, 858, 864, 868, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 892, 893, 895, 897, 898, 899, 900, 903, 904, 905, 906, 907, 908, 909, 910, 919, 925, 934, 937, 941, 944, 947, 948, 951, 953, 954, 955, 957, 959, 963, 968, 969, 970, 975, 976, 987, 991, 997, 999, 1006, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1035, 1047, 1049, 1050, 1051, 1053, 1054, 1060, 1062, 1063, 1064, 1070, 1073, 1075, 1077, 1078, 1079, 1089, 1094, 1095, 1097, 1099, 1103, 1106, 1118, 1125, 1128, 1129, 1134, 1137, 1140, 1144, 1145, 1146, 1147, 1148, 1149, 1153, 1154, 1158, 1162, 1170, 1177, 1180, 1181, 1182, 1185, 1186, 1187, 1188, 1192, 1193, 1196, 1197, 1198, 1199, 1201, 1202, 1205, 1209, 1211, 1216, 1222, 1225, 1230, 1240, 1241, 1242, 1245, 1246, 1265, 1269, 1282, 1289, 1291, 1294, 1295, 1298, 1301, 1310, 1315, 1320, 1323, 1325, 1327, 1328, 1329, 1332, 1333, 1334, 1335, 1338, 1340, 1341], "50": [12, 27, 40, 189, 199, 209, 320, 397, 442, 447, 455, 746, 747, 805, 831, 919, 925, 999, 1012, 1061, 1250, 1310, 1326, 1327], "500": [40, 289, 320, 323, 421, 422, 426, 429, 431, 432, 436, 443, 445, 886, 919, 1034, 1036, 1042, 1198, 1199, 1201, 1310, 1315], "5000": [282, 320, 1294, 1310], "50000": 136, "500000": [429, 1034], "500000000": [436, 1042], "5000555": 925, "500_000": [421, 422, 426, 429, 431, 432, 436, 443, 445], "500m": [1034, 1036, 1042], "51": 925, "512": [45, 137, 223, 320, 378, 602, 805, 976, 1180, 1310], "51966": [695, 1269], "52": [294, 320, 456, 636, 805, 889, 919], "523599": 1335, "527525": [1204, 1310], "53": [456, 1062, 1338], "533316061": 1319, "533_316_061": 1319, "54": [468, 805, 1114, 1310, 1332, 1341], "540": [409, 606, 805], "540302": 1335, "543": 9, "543081": [399, 805, 1002, 1310], "5432": 137, "54321": 9, "544": 1341, "544705": 737, "549306": [941, 1310], "55": [40, 53, 320, 1329, 1333, 1334], "5555": 925, "55550": 925, "56": [129, 676, 709, 805, 1251], "566371": [606, 805], "567": 27, "56789": [996, 1085, 1207, 1310], "57": [633, 805, 1207, 1310, 1335, 1341], "570796": [337, 339, 805, 936, 938, 1310, 1335], "575050513": [162, 165], "58": [245, 320], "581139": [1012, 1310], "584963": [550, 805], "587401": [395, 805, 1332], "59": [129, 189, 320, 419, 432, 440, 443, 447, 477, 748, 791, 792, 793, 805, 831, 919, 925, 1021, 1038, 1046, 1049], "59815": [468, 805, 1332], "5_000_555": 925, "5th": [40, 320], "6": [1, 8, 13, 35, 37, 39, 40, 41, 42, 43, 44, 45, 50, 52, 54, 59, 89, 90, 97, 122, 125, 126, 127, 128, 140, 144, 145, 157, 179, 182, 185, 186, 190, 191, 192, 194, 195, 196, 198, 199, 202, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 263, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 284, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 303, 313, 314, 320, 323, 324, 329, 333, 354, 355, 356, 358, 364, 372, 390, 391, 393, 394, 405, 406, 412, 415, 419, 423, 433, 437, 438, 439, 450, 451, 453, 456, 457, 460, 462, 471, 472, 477, 478, 481, 487, 489, 491, 509, 510, 511, 520, 523, 536, 537, 538, 539, 543, 555, 556, 592, 596, 603, 606, 607, 608, 613, 615, 617, 619, 621, 623, 625, 627, 630, 632, 633, 634, 639, 644, 650, 656, 661, 672, 673, 695, 706, 708, 713, 721, 723, 725, 732, 734, 741, 742, 743, 745, 748, 752, 755, 761, 766, 767, 771, 784, 788, 801, 805, 823, 826, 827, 828, 829, 832, 833, 835, 836, 837, 838, 841, 842, 843, 845, 846, 848, 849, 850, 852, 854, 855, 862, 864, 866, 868, 869, 870, 872, 874, 875, 876, 877, 878, 881, 884, 885, 888, 889, 892, 893, 899, 909, 910, 919, 925, 951, 953, 954, 955, 957, 963, 991, 997, 1001, 1003, 1008, 1009, 1014, 1017, 1043, 1053, 1063, 1070, 1077, 1089, 1095, 1119, 1120, 1129, 1132, 1145, 1146, 1147, 1148, 1152, 1170, 1184, 1187, 1188, 1193, 1195, 1200, 1202, 1204, 1206, 1211, 1216, 1219, 1230, 1235, 1246, 1269, 1281, 1291, 1310, 1315, 1320, 1323, 1325, 1327, 1328, 1332, 1338, 1339, 1341], "60": [40, 132, 199, 245, 320, 426, 431, 432, 443, 454, 477, 633, 690, 805, 1044, 1049, 1060, 1189, 1264, 1310, 1335], "600": [289, 320, 450, 451, 453, 886, 919, 925], "60000": 429, "600000": 925, "60000000": 436, "60206": [551, 805, 1332], "605551": 786, "605551275463989": 786, "609438": 1332, "60_000": [421, 422, 426, 429, 431, 432, 436, 443, 445], "61": [245, 320], "625": [627, 805], "626172": [658, 1232], "63": [633, 805], "63204": 1341, "6331e16": [1283, 1310, 1335], "636253": 1335, "64": [1, 53, 55, 66, 68, 71, 75, 82, 85, 156, 178, 282, 320, 400, 578, 602, 805, 1180, 1183, 1310, 1332], "64030": [695, 1269], "642093": 1335, "647961": 165, "64bit": [157, 609, 805, 1189, 1310], "65": [193, 320, 834, 919, 1067, 1310], "650": [485, 595, 805], "65280": [695, 1269], "654": [27, 784, 878, 919], "65432": 1336, "654321": 564, "65536": 1332, "65552": [377, 975], "66": [226, 289, 320, 633, 721, 805, 850, 886, 919, 1114, 1202, 1310], "663053": 129, "666": 925, "666000": 925, "666667": [189, 217, 291, 308, 320, 463, 770, 805, 831, 848, 887, 904, 919, 1072, 1310], "666f6f": [658, 1232], "67500": 783, "676": [227, 320, 851, 919], "678": [656, 663, 1230, 1237], "6789": [28, 925], "67890": 28, "686241": 1327, "69": [633, 805, 1114, 1310], "693147": [552, 805, 1159, 1161, 1310, 1332], "6_000_000": 1319, "7": [1, 16, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 52, 54, 59, 144, 145, 157, 172, 179, 182, 185, 186, 187, 189, 191, 192, 195, 196, 198, 202, 205, 207, 211, 213, 215, 217, 225, 229, 231, 233, 235, 237, 238, 242, 245, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 263, 265, 268, 269, 270, 271, 276, 278, 279, 280, 288, 290, 291, 292, 320, 323, 324, 329, 333, 355, 356, 358, 367, 406, 418, 419, 423, 430, 438, 441, 442, 447, 455, 457, 468, 481, 487, 491, 492, 509, 523, 536, 537, 538, 539, 596, 597, 607, 613, 617, 632, 633, 650, 666, 694, 708, 732, 741, 742, 745, 748, 749, 755, 760, 766, 767, 784, 788, 805, 823, 828, 829, 831, 833, 836, 838, 841, 843, 845, 846, 848, 849, 854, 860, 862, 865, 866, 868, 869, 870, 874, 878, 881, 919, 925, 941, 954, 955, 957, 966, 1020, 1021, 1025, 1030, 1035, 1047, 1048, 1053, 1061, 1063, 1076, 1098, 1113, 1132, 1145, 1146, 1147, 1148, 1192, 1193, 1205, 1211, 1240, 1268, 1310, 1315, 1320, 1325, 1327, 1328, 1329, 1332, 1334, 1338, 1341], "70": [189, 320, 721, 749, 805, 831, 919, 1114, 1310, 1327], "700": [289, 320, 886, 919], "702963": [40, 320], "7051579356916758811": 151, "707107": [366, 465, 630, 631, 728, 805, 965, 1074, 1310, 1335], "712389": 1335, "714": 1341, "714286": [492, 805, 1098, 1310], "718281828459045": [10, 460, 550, 805, 1067, 1159, 1310], "718282": [468, 805, 1076, 1310, 1332], "720": [409, 606, 805], "7264": 1341, "732051": [1225, 1310], "7415e16": 165, "742": [227, 320, 851, 919], "75": [40, 189, 193, 320, 333, 596, 604, 619, 621, 623, 625, 630, 632, 634, 767, 805, 831, 834, 919, 925, 1012, 1095, 1114, 1185, 1250, 1310, 1327, 1335, 1341], "7500": [224, 320], "7508": 1341, "754": [714, 805], "754888": [460, 805], "761594": [710, 805, 1284, 1310], "7654": 925, "765431": 1049, "7654321": 27, "76933c": [40, 320], "77": 1053, "78": [9, 676, 1251], "780": 9, "784": [226, 320, 850, 919], "785398": [341, 728, 729, 805, 940, 1310, 1335], "789": [10, 925], "79": [1114, 1310], "7d": 925, "8": [1, 11, 35, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 59, 76, 80, 86, 144, 145, 157, 179, 182, 185, 186, 187, 189, 191, 192, 194, 195, 196, 198, 202, 205, 207, 209, 213, 215, 222, 225, 226, 227, 229, 230, 231, 233, 235, 238, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 263, 265, 267, 268, 269, 271, 276, 278, 279, 280, 288, 291, 292, 294, 320, 333, 335, 347, 355, 356, 358, 403, 406, 407, 419, 447, 481, 488, 491, 492, 517, 519, 523, 536, 537, 538, 539, 578, 596, 597, 602, 613, 614, 618, 642, 648, 650, 674, 675, 690, 721, 726, 732, 737, 739, 742, 744, 752, 754, 759, 760, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 784, 786, 789, 790, 794, 805, 823, 828, 829, 831, 833, 835, 836, 838, 841, 843, 846, 849, 850, 851, 854, 855, 864, 866, 869, 870, 874, 878, 881, 889, 919, 925, 954, 955, 957, 1003, 1010, 1030, 1095, 1098, 1113, 1126, 1128, 1132, 1145, 1146, 1147, 1148, 1180, 1183, 1193, 1196, 1197, 1200, 1202, 1204, 1206, 1248, 1249, 1264, 1310, 1319, 1320, 1325, 1327, 1328, 1329, 1332, 1333, 1334, 1338, 1341], "80": [40, 193, 320, 834, 919], "800": [450, 451, 453, 1053], "8000": 137, "803065983": 129, "81": 1332, "814697265625": [1071, 1310], "816497": [268, 320], "8192": 135, "82": [226, 320, 850, 919], "8257e14": 1341, "83": [226, 320, 850, 919], "833": [226, 320, 850, 919], "833333": [308, 904], "848062": 1335, "848808": 165, "85": [40, 320, 1114, 1310, 1341], "850": [485, 595, 805], "8568409950394724": [1067, 1310], "8589934592": [642, 805], "86": 1341, "8601": 1333, "87": 1341, "876": 9, "88": [189, 320, 831, 919], "881374": [340, 805, 939, 1310], "888": [784, 878, 919], "8_000_000": 1319, "8a": [972, 973], "8nin": 1341, "9": [1, 9, 35, 37, 39, 40, 41, 42, 45, 51, 59, 179, 187, 189, 202, 204, 213, 217, 227, 229, 230, 245, 252, 254, 255, 258, 270, 271, 288, 292, 294, 313, 320, 329, 333, 335, 347, 355, 356, 358, 363, 365, 403, 406, 409, 419, 447, 473, 481, 491, 497, 517, 523, 534, 542, 580, 596, 597, 606, 613, 617, 618, 629, 632, 633, 644, 648, 663, 694, 702, 705, 735, 741, 742, 745, 748, 760, 793, 805, 831, 841, 846, 848, 851, 854, 868, 870, 881, 889, 909, 919, 925, 949, 950, 954, 955, 957, 962, 964, 1012, 1025, 1034, 1036, 1042, 1048, 1061, 1062, 1104, 1113, 1126, 1132, 1143, 1151, 1193, 1197, 1203, 1205, 1207, 1219, 1237, 1268, 1277, 1310, 1319, 1320, 1325, 1328, 1329, 1338], "90": [189, 227, 320, 694, 831, 851, 919, 1268, 1327, 1335], "90000": 783, "901234": [996, 1085, 1207, 1310], "909": [226, 320, 850, 919], "910": [226, 320, 663, 850, 919, 1237], "910t": [656, 663, 1230, 1237], "914": [226, 320, 850, 919], "9223372036854775807": [717, 805], "9223372036854775808": [553, 805], "927295": 1335, "928571": [466, 805, 1075, 1310], "93": [1114, 1310], "94": [330, 805], "9477376373212048": [1114, 1310], "95": [17, 330, 805, 925], "95b3d7": [40, 320], "96": [17, 189, 320, 330, 805, 831, 919, 1114, 1310], "961": 55, "963624": [465, 805, 1074, 1310], "964028": [245, 320], "96_067_179": 1319, "97": [17, 216, 320, 330, 805, 1114, 1310], "9774092659964970114": [486, 805], "978307200": [425, 1027], "978307200000": 446, "978307200000000": [425, 446, 1027, 1052], "978307200000000000": 1052, "978393600": [425, 1027], "978393600000": 446, "978393600000000": [425, 446, 1027, 1052], "978393600000000000": 1052, "978480000": [425, 1027], "978480000000": 446, "978480000000000": [425, 446, 1027, 1052], "978480000000000000": 1052, "98": [17, 216, 245, 320, 389, 480, 483, 649, 694, 712, 805, 1268], "987": [27, 564], "987000": 925, "9876": 9, "987654": [27, 925], "987654321": 10, "9876543210": 129, "987m": 925, "988": 10, "99": [17, 40, 200, 201, 216, 219, 245, 289, 320, 330, 389, 470, 472, 480, 483, 649, 712, 795, 805, 839, 840, 886, 919, 1053, 1067, 1079, 1310, 1332], "9914e218": 165, "993": [1095, 1310], "998347": [245, 320], "999": [418, 430, 925, 1020, 1035, 1330, 1341], "999000": 925, "999954": [245, 320], "999999": [440, 700, 748, 791, 792, 793, 925, 1046, 1053, 1274], "999999\u00b5": 925, "9bbb59": [40, 320], "A": [13, 37, 40, 45, 46, 57, 58, 63, 69, 129, 135, 136, 137, 138, 149, 151, 156, 171, 186, 195, 204, 211, 226, 232, 234, 239, 245, 270, 273, 288, 289, 290, 294, 295, 320, 328, 394, 413, 414, 419, 444, 447, 461, 462, 470, 482, 484, 495, 498, 500, 501, 507, 547, 554, 555, 568, 582, 591, 592, 614, 619, 621, 623, 625, 627, 630, 632, 634, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 671, 673, 676, 677, 678, 680, 691, 700, 735, 751, 752, 756, 805, 829, 836, 845, 850, 866, 886, 889, 890, 919, 925, 992, 1015, 1016, 1021, 1050, 1053, 1069, 1079, 1176, 1198, 1199, 1201, 1204, 1205, 1206, 1228, 1229, 1230, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1245, 1247, 1250, 1251, 1252, 1254, 1265, 1274, 1310, 1319, 1320, 1323, 1336, 1338], "AND": [722, 723, 784, 925, 1329], "ANDs": [380, 805, 978, 1310], "AS": [267, 320, 784, 785, 878, 919, 1319, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1340], "And": [698, 1272], "As": [12, 50, 89, 90, 122, 124, 125, 126, 128, 140, 144, 145, 153, 202, 277, 282, 320, 547, 795, 841, 919], "At": [45, 245, 320], "BY": [784, 878, 919, 1319, 1322, 1328, 1337, 1338], "Be": 919, "By": [5, 12, 14, 30, 51, 135, 136, 149, 211, 225, 226, 252, 254, 263, 268, 290, 291, 320, 364, 437, 442, 455, 540, 543, 549, 597, 612, 617, 620, 622, 624, 626, 628, 631, 633, 635, 641, 652, 719, 739, 746, 747, 749, 750, 751, 765, 786, 792, 793, 794, 805, 826, 845, 849, 850, 868, 874, 879, 887, 919, 963, 1043, 1048, 1061, 1149, 1192, 1215, 1226, 1300, 1310], "For": [14, 39, 40, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 193, 194, 199, 225, 226, 245, 252, 277, 306, 320, 323, 434, 435, 447, 463, 465, 466, 477, 547, 556, 568, 609, 647, 654, 662, 663, 664, 666, 668, 691, 741, 751, 755, 756, 801, 805, 834, 835, 850, 868, 902, 919, 923, 1053, 1072, 1074, 1075, 1078, 1164, 1189, 1222, 1228, 1236, 1237, 1238, 1240, 1242, 1265, 1289, 1310, 1315], "IF": 1331, "If": [33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 67, 122, 123, 124, 125, 126, 127, 128, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 166, 167, 168, 178, 182, 194, 199, 202, 209, 211, 213, 221, 222, 223, 226, 229, 230, 234, 241, 245, 252, 254, 255, 256, 260, 263, 265, 267, 270, 271, 274, 275, 277, 278, 284, 285, 287, 288, 289, 320, 323, 332, 334, 357, 364, 369, 377, 391, 415, 419, 420, 434, 435, 444, 447, 473, 488, 493, 505, 526, 535, 540, 541, 547, 555, 556, 563, 564, 570, 572, 597, 602, 604, 607, 609, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 643, 647, 648, 653, 663, 664, 666, 668, 669, 670, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 693, 697, 700, 718, 722, 724, 727, 731, 732, 736, 737, 741, 746, 747, 749, 750, 751, 754, 755, 761, 762, 763, 765, 767, 771, 777, 780, 781, 782, 787, 789, 792, 793, 795, 796, 805, 826, 827, 835, 837, 841, 845, 849, 850, 855, 859, 866, 868, 872, 874, 876, 878, 883, 885, 886, 894, 902, 912, 919, 923, 924, 925, 932, 933, 956, 963, 968, 975, 988, 999, 1017, 1021, 1022, 1040, 1041, 1050, 1053, 1078, 1094, 1095, 1099, 1113, 1114, 1118, 1135, 1144, 1149, 1150, 1156, 1164, 1183, 1185, 1187, 1189, 1191, 1192, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1211, 1213, 1215, 1218, 1222, 1223, 1227, 1237, 1238, 1240, 1242, 1243, 1244, 1250, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1264, 1265, 1266, 1267, 1271, 1274, 1282, 1285, 1289, 1291, 1299, 1310, 1315, 1319, 1320, 1322, 1330, 1338], "In": [51, 58, 137, 139, 150, 151, 154, 165, 169, 174, 179, 197, 199, 202, 211, 226, 227, 230, 241, 245, 252, 278, 287, 320, 323, 555, 556, 617, 676, 677, 805, 827, 841, 845, 850, 851, 868, 885, 919, 1071, 1078, 1183, 1188, 1251, 1310, 1315], "It": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 50, 57, 58, 67, 69, 72, 90, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 176, 189, 227, 237, 244, 267, 277, 282, 288, 289, 297, 306, 320, 323, 324, 407, 408, 442, 488, 547, 556, 567, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 734, 781, 782, 801, 805, 822, 826, 827, 831, 837, 851, 855, 860, 878, 886, 893, 902, 919, 927, 994, 1010, 1011, 1048, 1095, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1212, 1289, 1294, 1310, 1315], "Its": [212, 320, 486, 805, 1093, 1310], "NO": 925, "NOT": [125, 222, 261, 320, 547, 566, 640, 805, 873, 919, 1338], "No": [20, 225, 320, 849, 919], "Not": [200, 225, 320, 471, 500, 501, 805, 826, 839, 849, 919, 1080, 1310], "ON": 1338, "OR": [724, 725, 841, 919, 925, 1329], "ORs": [385, 805, 983, 1310], "On": [714, 805, 853, 919], "One": [51, 189, 241, 277, 282, 320, 333, 596, 726, 738, 754, 760, 763, 770, 772, 775, 776, 785, 805, 831, 919, 925, 1012, 1310], "Or": [210, 211, 226, 252, 266, 290, 299, 320, 323, 464, 617, 650, 746, 747, 749, 750, 792, 793, 795, 801, 805, 844, 845, 850, 868, 877, 895, 919, 1073, 1310], "That": [141, 855, 919], "The": [20, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 56, 57, 60, 65, 66, 68, 69, 77, 81, 82, 90, 91, 93, 122, 124, 125, 126, 128, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 165, 166, 167, 169, 171, 181, 189, 190, 192, 193, 194, 195, 198, 199, 202, 209, 210, 211, 212, 217, 223, 225, 226, 227, 230, 237, 243, 245, 252, 253, 254, 255, 258, 259, 260, 267, 277, 278, 283, 286, 290, 294, 295, 297, 298, 299, 306, 320, 331, 372, 373, 374, 375, 389, 390, 408, 410, 413, 414, 415, 423, 433, 437, 438, 442, 444, 447, 455, 456, 467, 470, 473, 477, 478, 486, 518, 522, 555, 556, 570, 597, 604, 607, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 644, 647, 653, 657, 658, 662, 667, 668, 669, 670, 674, 675, 676, 677, 685, 686, 687, 688, 689, 690, 691, 701, 705, 711, 712, 713, 732, 735, 753, 757, 765, 767, 781, 782, 783, 784, 787, 795, 797, 798, 800, 801, 805, 806, 807, 810, 812, 813, 814, 821, 826, 831, 832, 834, 835, 837, 838, 841, 844, 845, 848, 849, 850, 851, 855, 860, 864, 868, 870, 871, 872, 878, 882, 884, 889, 890, 893, 895, 902, 919, 923, 924, 925, 931, 934, 971, 972, 973, 987, 998, 1011, 1012, 1015, 1016, 1017, 1025, 1039, 1043, 1044, 1048, 1050, 1053, 1061, 1062, 1078, 1079, 1082, 1093, 1127, 1131, 1164, 1183, 1185, 1187, 1191, 1192, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1219, 1222, 1227, 1231, 1232, 1241, 1242, 1243, 1244, 1248, 1249, 1250, 1251, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1291, 1293, 1295, 1302, 1304, 1306, 1310, 1311, 1316, 1317, 1318, 1319, 1324, 1338, 1339, 1341], "Then": 154, "There": 1338, "These": [1, 32, 40, 131, 137, 138, 174, 284, 320, 455, 804, 805, 923, 1048, 1061], "To": [39, 58, 200, 320, 397, 413, 414, 471, 472, 654, 661, 662, 663, 666, 676, 677, 686, 687, 688, 689, 698, 805, 839, 919, 999, 1015, 1016, 1080, 1228, 1235, 1236, 1237, 1240, 1250, 1251, 1272, 1291, 1310, 1338], "Will": [57, 58, 826, 827, 837, 864, 875, 919, 1310], "With": [144, 221, 263, 320, 364, 540, 641, 805, 826, 874, 919, 963, 1113, 1149, 1215, 1310], "_": [1, 51, 55, 174, 245, 275, 279, 320, 357, 393, 394, 526, 655, 663, 665, 667, 672, 673, 678, 681, 682, 991, 992, 993, 1229, 1237, 1241, 1246, 1247, 1252, 1256, 1286, 1310], "__array_ufunc__": 927, "__call__": 801, "__dataframe__": 123, "__enter__": 1338, "__exit__": 1338, "__getattr__": 801, "__getitem__": 701, "__init__": [1, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 162, 894, 1338], "__name__": [224, 320], "_bar_": 756, "_btm_by_a": [390, 805], "_btm_by_b": [390, 805], "_by_ca": [390, 713, 805], "_by_cb": [390, 713, 805], "_check_ord": [57, 58, 826, 827, 837, 864, 875, 919], "_df": [1, 52], "_diff": [294, 320, 889, 919], "_eager": [547, 826, 919], "_expr": [1, 53], "_foo": 561, "_geventdataframeresult": [58, 827, 919], "_is_not_nan": [501, 805], "_is_odd": [258, 320, 870, 919], "_isnan": [500, 805], "_isnul": [503, 805], "_kwarg": [826, 919], "_ldf": 1, "_lf": 54, "_lower_boundari": [211, 320, 845, 919], "_mean_squar": [299, 895], "_not_nul": [502, 805], "_o": [393, 394, 672, 673, 991, 992, 1246, 1247], "_revers": [581, 585, 614, 805], "_right": [225, 226, 227, 320, 849, 850, 851, 919], "_suffix": 586, "_sum": [299, 895], "_top_by_a": [713, 805], "_top_by_b": [713, 805], "_train": [891, 919], "_type_check": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "_upper_boundari": [211, 320, 845, 919], "_verbos": 33, "_world": 756, "a1": [40, 52, 54, 320], "a101": 1341, "a123": [40, 320], "a2": [40, 52, 54, 320], "a_1": [682, 1256, 1286, 1310], "a_2": [1286, 1310], "a_3": [1286, 1310], "a_a": 785, "a_agg_list": [211, 320, 845, 919], "a_b_doubl": 752, "a_btm_by_a": [390, 805], "a_btm_by_b": [390, 805], "a_by_ca": [390, 713, 805], "a_by_cb": [390, 713, 805], "a_div_2": 1332, "a_div_5": 1332, "a_interpol": [492, 805], "a_is_even": [267, 320, 784, 878, 919], "a_isnul": [503, 805], "a_lag_": 735, "a_log2": 1332, "a_mod_2": 1332, "a_not_nul": [502, 805], "a_revers": [581, 585, 614, 805], "a_rol": 735, "a_suffix": 586, "a_times_2": [556, 805], "a_times_b": [555, 805], "a_top_by_a": [713, 805], "a_top_by_b": [713, 805], "a_txt": 785, "aa": [467, 654, 666, 753, 805, 925, 1012, 1228, 1240, 1310, 1333], "aaa": [1, 40, 320, 654, 666, 701, 703, 704, 925, 1228, 1240], "aaaa": [972, 973], "aabcdef": 687, "aad": [972, 973], "aag": 26, "aazz": 1333, "ab": [213, 229, 271, 294, 320, 677, 701, 703, 704, 805, 889, 919, 925, 1094, 1118, 1282, 1310, 1331, 1333], "ab12": 677, "ab12cd34ef": 677, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 329, 660, 663, 676, 686, 805, 925, 1234, 1237, 1250, 1251], "abc123": 1333, "abc456": [676, 1250, 1251, 1333], "abcabc": 677, "abcd": 1333, "abcdeff": 686, "abf": [139, 150, 151], "abl": [97, 137, 547], "about": [97, 137, 647, 654, 662, 663, 666, 676, 677, 805, 923, 1222, 1228, 1236, 1237, 1240, 1250, 1251, 1310, 1341], "abov": [40, 226, 245, 320, 323, 795, 850, 919], "abs_a": 1332, "absolut": [139, 150, 151, 158, 159, 160, 161, 328, 463, 465, 466, 805, 930, 1072, 1074, 1075, 1310, 1332], "acc": [741, 742, 755, 779], "accent": 925, "accept": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 139, 141, 143, 145, 147, 149, 152, 153, 154, 165, 181, 191, 210, 258, 259, 263, 266, 283, 294, 295, 299, 320, 329, 390, 397, 467, 493, 597, 611, 612, 650, 678, 705, 713, 721, 723, 725, 730, 733, 734, 735, 736, 744, 753, 769, 771, 774, 783, 787, 789, 795, 801, 805, 821, 833, 844, 870, 871, 874, 877, 882, 889, 890, 895, 919, 923, 924, 999, 1099, 1183, 1191, 1192, 1215, 1252, 1310], "access": [37, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 141, 145, 147, 149, 151, 152, 153, 154, 178, 185, 223, 253, 254, 267, 320, 664, 701, 828, 878, 891, 919, 924, 1238, 1341], "accord": [253, 320, 604, 746, 747, 749, 750, 792, 793, 805, 1030, 1185, 1310], "accordingli": [133, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148], "account": [33, 40, 129, 138, 151, 320, 437, 463, 465, 466, 805, 1043, 1072, 1074, 1075, 1310], "accumul": [741, 742, 755, 779], "acg": 26, "achiev": [230, 245, 306, 320, 394, 556, 673, 805, 992, 1164, 1247, 1310], "aco": 1331, "acosd": 1331, "across": [40, 51, 138, 190, 212, 225, 232, 234, 239, 260, 270, 320, 410, 486, 570, 723, 725, 741, 742, 744, 769, 771, 774, 789, 805, 832, 849, 872, 919, 1093, 1310], "action": [39, 320], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 519, 663, 1128, 1237], "actual": [40, 125, 165, 169, 255, 320, 1217, 1310, 1333, 1340], "ad": [38, 40, 125, 140, 211, 267, 277, 282, 284, 289, 294, 295, 320, 335, 447, 470, 563, 564, 705, 741, 742, 784, 805, 845, 878, 886, 889, 890, 919, 925, 1053, 1079, 1289, 1294, 1310], "adbc": [38, 137, 138, 320], "adbc_driver_manag": 157, "adbc_ingest": [38, 320], "add": [39, 40, 136, 199, 211, 230, 294, 295, 296, 297, 320, 323, 408, 583, 584, 585, 586, 604, 705, 751, 755, 795, 805, 845, 849, 889, 890, 891, 892, 893, 919, 1078, 1310, 1315], "add_calendar_dai": 751, "add_calendar_month": 751, "add_calendar_year": 751, "add_chart": [40, 320], "add_dai": 751, "add_format": [40, 320], "add_hour": 751, "add_milli": 751, "add_second": 751, "add_seri": [40, 320], "add_week": 751, "add_worksheet": [40, 320], "addit": [29, 36, 38, 39, 40, 125, 134, 139, 140, 150, 151, 163, 165, 167, 169, 194, 198, 210, 228, 243, 258, 259, 266, 279, 286, 294, 295, 299, 320, 329, 424, 467, 470, 597, 650, 654, 662, 663, 666, 676, 677, 701, 705, 730, 733, 734, 735, 736, 753, 783, 784, 787, 801, 805, 838, 844, 870, 871, 877, 884, 889, 890, 895, 919, 925, 1018, 1026, 1079, 1228, 1236, 1237, 1240, 1250, 1251, 1292, 1310, 1320, 1338], "addition": [59, 253, 320, 925], "address": 663, "adjac": [40, 320], "adjust": [463, 465, 466, 647, 805, 1072, 1074, 1075, 1222, 1310], "adl": [139, 150, 151], "adlf": 151, "advanc": [40, 245, 320, 369, 547, 580, 583, 585, 587, 588, 968, 1156, 1341], "advantag": [40, 174, 244, 320], "advis": [40, 50, 90, 320], "aedt": 748, "aeiuo": [666, 1240], "af1": 51, "af2": 51, "af3": 51, "affect": [38, 158, 159, 160, 161, 320], "afm": 151, "afoo": [891, 919], "after": [40, 59, 125, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 181, 182, 199, 283, 286, 320, 389, 390, 391, 467, 597, 607, 700, 712, 713, 805, 821, 882, 884, 919, 987, 1078, 1187, 1274, 1295, 1310, 1325], "afterward": [50, 795], "ag": [237, 320, 860, 919, 1339], "again": [556, 805], "against": [38, 99, 135, 137, 202, 267, 320, 519, 666, 784, 841, 878, 919, 1128, 1240, 1319, 1338, 1340, 1341], "agg": [210, 211, 245, 252, 320, 330, 380, 385, 388, 390, 473, 475, 480, 483, 555, 556, 597, 649, 650, 713, 720, 746, 749, 767, 805, 826, 827, 837, 844, 845, 864, 868, 875, 919, 925], "agg_group": [758, 805], "agg_list": [555, 805], "aggreg": [135, 136, 139, 147, 150, 204, 210, 211, 231, 233, 235, 238, 241, 245, 246, 247, 252, 268, 269, 288, 291, 299, 300, 302, 304, 320, 330, 380, 385, 388, 473, 489, 555, 556, 597, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 722, 723, 724, 725, 741, 742, 743, 744, 755, 760, 768, 769, 771, 773, 774, 779, 788, 789, 805, 845, 855, 856, 857, 858, 861, 862, 865, 868, 879, 880, 887, 895, 896, 898, 900, 919, 923, 978, 983, 986, 1096, 1197, 1198, 1199, 1201, 1204, 1205, 1206, 1310, 1326, 1328, 1331, 1337], "aggregate_funct": [245, 320, 925], "aho": [655, 665, 667, 678, 1229, 1239, 1241, 1252], "aiosqlit": 137, "alchemy_conn": 137, "algorithm": [180, 320, 336, 655, 665, 667, 678, 726, 805, 820, 919, 935, 1229, 1239, 1241, 1252, 1310], "alia": [1, 12, 51, 53, 55, 88, 185, 211, 229, 245, 252, 286, 294, 297, 320, 323, 329, 333, 373, 374, 375, 376, 379, 389, 393, 394, 402, 403, 404, 405, 406, 408, 411, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 455, 456, 457, 458, 461, 462, 475, 477, 482, 484, 490, 493, 496, 499, 507, 509, 531, 543, 549, 554, 556, 560, 563, 564, 566, 568, 573, 576, 578, 580, 591, 592, 596, 598, 602, 604, 607, 609, 637, 639, 654, 655, 656, 657, 659, 660, 662, 663, 665, 666, 667, 668, 672, 673, 678, 679, 680, 681, 682, 683, 684, 688, 689, 691, 701, 702, 703, 704, 706, 711, 712, 714, 720, 721, 727, 728, 729, 733, 734, 735, 736, 746, 749, 751, 752, 755, 756, 761, 764, 766, 767, 779, 783, 787, 792, 795, 805, 845, 847, 854, 868, 884, 889, 893, 919, 1011, 1018, 1019, 1022, 1025, 1026, 1027, 1028, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1118, 1185, 1190, 1236, 1237, 1241, 1251, 1256, 1257, 1310], "alias": [267, 320, 563, 564, 878, 919], "alic": [135, 1339], "align": [10, 15, 16, 40, 51, 59, 320, 1339], "align_fram": 59, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 45, 46, 49, 51, 57, 64, 91, 108, 110, 122, 127, 132, 135, 136, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 162, 163, 166, 169, 174, 179, 180, 182, 189, 191, 193, 194, 201, 213, 218, 220, 222, 223, 224, 225, 227, 228, 229, 234, 236, 240, 241, 245, 248, 249, 253, 254, 255, 259, 265, 266, 270, 271, 275, 277, 278, 282, 285, 287, 288, 289, 290, 295, 297, 320, 323, 333, 335, 357, 372, 390, 401, 407, 413, 414, 415, 416, 447, 467, 472, 478, 485, 486, 489, 491, 495, 498, 502, 503, 508, 518, 519, 526, 544, 547, 555, 577, 580, 581, 583, 584, 585, 586, 587, 588, 595, 597, 607, 612, 614, 618, 642, 648, 650, 656, 660, 663, 664, 668, 671, 677, 685, 686, 687, 691, 713, 723, 732, 734, 741, 742, 743, 744, 753, 755, 760, 761, 764, 771, 779, 787, 788, 789, 795, 801, 805, 811, 817, 820, 823, 826, 827, 831, 833, 834, 835, 837, 840, 849, 851, 855, 859, 864, 866, 871, 875, 876, 877, 883, 885, 886, 890, 891, 893, 919, 925, 956, 1010, 1012, 1015, 1016, 1017, 1018, 1053, 1094, 1100, 1112, 1118, 1127, 1128, 1135, 1153, 1156, 1187, 1192, 1197, 1223, 1230, 1234, 1237, 1238, 1242, 1245, 1251, 1259, 1260, 1261, 1265, 1282, 1291, 1310, 1314, 1315, 1320, 1322, 1327, 1328, 1333, 1337, 1338, 1340, 1341], "all_compat": 1322, "all_data": 1338, "all_horizont": [193, 194, 320, 722, 834, 835, 919], "all_stat": 30, "alloc": [135, 136, 197, 248, 320, 805, 894, 923, 1071, 1310], "allow": [1, 8, 39, 40, 46, 47, 48, 49, 50, 90, 99, 123, 137, 140, 149, 152, 153, 154, 155, 162, 165, 166, 169, 174, 178, 223, 226, 228, 253, 254, 256, 278, 279, 282, 285, 298, 320, 437, 444, 447, 535, 555, 556, 563, 564, 609, 638, 690, 692, 693, 805, 849, 850, 855, 859, 883, 891, 919, 923, 925, 1043, 1050, 1053, 1144, 1164, 1189, 1209, 1264, 1266, 1267, 1291, 1292, 1310, 1333, 1341], "allow_alias": [563, 564], "allow_chunk": [165, 169], "allow_copi": [123, 178, 278, 320, 1291, 1310], "allow_dupl": [604, 805, 1185, 1310], "allow_infin": [165, 169], "allow_masked_out": [165, 169], "allow_missing_column": [147, 154], "allow_nul": [162, 165, 169, 1341], "allow_object": 765, "allow_parallel": [226, 320, 849, 850, 919], "allow_pyarrow_filt": 155, "allow_time_zon": [165, 166, 169], "allowed_dtyp": [165, 166, 169, 1341], "almost": [58, 230, 306, 320, 690, 692, 693, 827, 919, 1164, 1264, 1266, 1267, 1310], "along": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "alpha": [463, 465, 466, 805, 837, 864, 875, 919, 925, 1072, 1074, 1075, 1310], "alpha_i": [464, 805, 1073, 1310], "alphabet": [925, 1341], "alphanumer": [698, 925, 1272], "alreadi": [38, 39, 98, 277, 320, 407, 519, 571, 718, 805, 875, 919, 1010, 1128, 1299, 1310], "also": [27, 37, 40, 46, 50, 125, 137, 140, 141, 146, 147, 149, 154, 164, 165, 168, 169, 174, 195, 210, 211, 237, 241, 245, 252, 254, 258, 266, 277, 289, 294, 297, 320, 403, 406, 415, 437, 441, 447, 473, 493, 556, 563, 564, 597, 607, 611, 612, 650, 676, 677, 678, 685, 686, 701, 732, 741, 742, 745, 748, 755, 757, 779, 795, 804, 805, 811, 844, 845, 860, 868, 870, 877, 886, 889, 891, 893, 919, 925, 1017, 1047, 1099, 1187, 1191, 1192, 1230, 1250, 1251, 1252, 1259, 1310, 1314, 1320, 1322, 1325, 1329, 1333, 1336, 1338, 1339], "alt": [320, 323, 1310, 1315], "altair": [157, 320, 323, 1310, 1315], "altern": [40, 320, 801, 1330], "although": [267, 320, 878, 919], "alwai": [13, 37, 39, 46, 67, 69, 72, 135, 181, 202, 210, 225, 226, 230, 283, 306, 320, 389, 390, 555, 567, 690, 712, 713, 795, 805, 821, 841, 849, 850, 855, 882, 919, 925, 987, 1164, 1264, 1295, 1310, 1319, 1320, 1338, 1341], "am": [679, 1253], "amarillo": 1333, "amaz": [320, 323, 1310, 1315], "amazonaw": 32, "ambigu": [440, 441, 442, 455, 690, 693, 748, 1046, 1047, 1048, 1061, 1264, 1267], "america": 749, "amount": [50, 68, 90, 145, 149, 152, 153, 556, 751, 805, 1327], "amsterdam": [441, 1047], "an": [1, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 55, 67, 68, 69, 95, 99, 102, 105, 112, 114, 122, 124, 125, 128, 135, 136, 137, 138, 140, 142, 145, 146, 147, 149, 151, 152, 153, 154, 163, 165, 169, 183, 184, 185, 191, 197, 200, 204, 206, 211, 222, 223, 224, 226, 227, 230, 241, 245, 249, 250, 252, 253, 257, 267, 272, 278, 282, 284, 288, 289, 294, 297, 306, 320, 323, 331, 353, 356, 368, 374, 380, 383, 385, 386, 388, 403, 404, 405, 406, 407, 408, 415, 419, 420, 437, 441, 444, 458, 464, 472, 473, 479, 480, 483, 516, 519, 522, 524, 546, 547, 555, 556, 568, 570, 580, 581, 602, 603, 604, 612, 613, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 653, 654, 657, 663, 666, 670, 690, 692, 693, 695, 697, 711, 714, 722, 727, 731, 746, 747, 749, 750, 752, 754, 757, 761, 762, 763, 764, 765, 777, 779, 780, 783, 787, 792, 793, 795, 796, 801, 805, 823, 824, 825, 827, 831, 833, 837, 841, 845, 850, 851, 855, 864, 866, 868, 869, 875, 878, 886, 889, 891, 893, 894, 902, 916, 919, 923, 924, 925, 952, 955, 967, 972, 978, 981, 983, 984, 986, 998, 1000, 1006, 1007, 1008, 1009, 1010, 1017, 1021, 1050, 1064, 1071, 1073, 1113, 1125, 1128, 1131, 1133, 1155, 1164, 1192, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1210, 1212, 1227, 1228, 1231, 1237, 1240, 1244, 1264, 1266, 1267, 1269, 1271, 1291, 1293, 1310, 1328, 1330, 1333, 1337, 1338, 1340], "ana": [679, 1253], "anan": [679, 1253], "ananab": 1333, "and_": 805, "ang": 1333, "angl": [728, 729], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 67, 69, 72, 122, 123, 124, 125, 126, 127, 128, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 179, 181, 187, 191, 193, 194, 199, 201, 202, 204, 206, 221, 223, 224, 225, 226, 227, 230, 234, 244, 249, 253, 254, 255, 267, 270, 273, 274, 277, 278, 279, 282, 283, 285, 288, 289, 297, 320, 323, 324, 329, 332, 333, 357, 389, 390, 391, 407, 408, 442, 443, 461, 462, 472, 473, 477, 480, 482, 484, 488, 497, 507, 514, 519, 526, 554, 555, 556, 563, 573, 576, 578, 580, 581, 583, 585, 587, 588, 591, 592, 596, 601, 604, 611, 612, 613, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 643, 653, 655, 669, 686, 687, 688, 689, 690, 692, 693, 695, 697, 706, 712, 713, 714, 721, 722, 723, 725, 734, 736, 737, 738, 765, 767, 771, 781, 782, 789, 795, 805, 821, 826, 827, 833, 834, 835, 837, 840, 841, 849, 850, 851, 863, 866, 878, 882, 883, 886, 893, 894, 919, 923, 925, 927, 929, 932, 956, 987, 994, 1010, 1011, 1048, 1049, 1068, 1069, 1078, 1081, 1086, 1088, 1090, 1095, 1104, 1113, 1116, 1123, 1128, 1135, 1163, 1164, 1175, 1176, 1185, 1191, 1192, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1211, 1227, 1229, 1243, 1264, 1266, 1267, 1269, 1271, 1289, 1290, 1291, 1292, 1294, 1295, 1310, 1315, 1338, 1341], "anna": [237, 320, 860, 919], "anoth": [92, 164, 182, 190, 196, 210, 226, 260, 320, 407, 410, 417, 492, 522, 560, 566, 570, 611, 620, 622, 624, 626, 628, 631, 633, 635, 666, 805, 823, 832, 844, 850, 872, 891, 919, 1010, 1019, 1070, 1078, 1098, 1131, 1191, 1192, 1240, 1310, 1332, 1333], "anti": [225, 320, 849, 902, 919, 1210, 1212, 1310, 1326], "any_horizont": 724, "anyth": [39, 253, 320], "anywher": [376, 379, 690, 692, 693, 1264, 1266, 1267], "ap": 1333, "apach": [35, 41, 42, 45, 133, 137, 138, 141, 143, 151, 177, 320, 928], "apaya": [691, 1265], "api": [0, 32, 37, 41, 45, 46, 47, 48, 49, 123, 145, 147, 149, 152, 153, 154, 155, 178, 230, 306, 320, 556, 767, 805, 902, 919, 1164, 1310, 1337], "apia": [416, 1018], "app": [684, 1258], "appear": [40, 63, 125, 160, 161, 320, 677, 716, 805, 925, 1297, 1310, 1339], "append": [38, 39, 165, 199, 225, 226, 227, 320, 608, 795, 805, 849, 850, 851, 919, 1078, 1310], "appl": [186, 215, 225, 249, 250, 273, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 320, 390, 614, 659, 684, 713, 805, 849, 866, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 919, 1233, 1258, 1326, 1333], "appli": [10, 20, 37, 40, 46, 59, 137, 149, 162, 165, 169, 174, 189, 204, 227, 230, 244, 266, 267, 277, 306, 320, 345, 418, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 439, 443, 445, 456, 457, 459, 465, 466, 555, 556, 601, 619, 620, 621, 622, 625, 626, 632, 633, 650, 676, 677, 690, 692, 693, 697, 730, 741, 742, 755, 766, 767, 779, 784, 795, 805, 831, 851, 855, 863, 877, 878, 902, 919, 999, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1049, 1051, 1062, 1063, 1065, 1074, 1075, 1164, 1198, 1199, 1201, 1205, 1250, 1251, 1264, 1266, 1267, 1271, 1310, 1319], "applic": [278, 320, 556, 805], "apply_on_context_ent": 174, "appropri": [40, 155, 202, 278, 320, 447, 607, 805, 841, 919, 1053, 1187, 1310], "approx": [336, 805], "approx_n_uniqu": [320, 805, 919, 1310], "approxim": [45, 180, 320, 336, 464, 726, 805, 820, 919, 935, 1073, 1310, 1332, 1341], "april": [444, 1050, 1333, 1334], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 58, 59, 89, 90, 97, 103, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 165, 166, 167, 169, 174, 178, 181, 182, 187, 189, 193, 194, 197, 200, 202, 203, 204, 209, 210, 211, 223, 225, 226, 227, 228, 230, 236, 237, 243, 245, 252, 253, 254, 255, 258, 259, 261, 263, 266, 273, 277, 278, 279, 282, 283, 287, 289, 290, 294, 295, 298, 299, 320, 332, 334, 348, 364, 369, 389, 390, 391, 397, 403, 405, 406, 415, 442, 447, 455, 460, 462, 463, 464, 465, 466, 471, 473, 493, 495, 497, 498, 500, 501, 502, 503, 505, 510, 540, 547, 555, 592, 597, 604, 607, 610, 611, 612, 613, 617, 620, 622, 624, 626, 628, 629, 631, 633, 635, 641, 644, 647, 649, 650, 655, 664, 668, 670, 671, 674, 675, 676, 677, 678, 680, 691, 693, 695, 700, 705, 707, 711, 712, 713, 722, 723, 725, 730, 733, 734, 735, 736, 737, 744, 746, 747, 749, 750, 769, 771, 774, 783, 787, 789, 792, 793, 795, 797, 798, 800, 804, 805, 806, 807, 810, 811, 812, 813, 814, 817, 821, 826, 827, 831, 834, 835, 839, 841, 844, 845, 849, 850, 851, 855, 859, 860, 864, 866, 868, 870, 871, 873, 874, 877, 882, 885, 886, 889, 890, 891, 895, 919, 923, 925, 932, 933, 947, 963, 968, 987, 990, 999, 1008, 1009, 1017, 1048, 1053, 1061, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1080, 1082, 1084, 1099, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1114, 1119, 1149, 1156, 1176, 1185, 1187, 1191, 1192, 1193, 1203, 1215, 1219, 1222, 1229, 1238, 1242, 1244, 1248, 1249, 1250, 1251, 1254, 1265, 1267, 1269, 1274, 1281, 1289, 1291, 1292, 1293, 1295, 1302, 1304, 1306, 1310, 1311, 1314, 1316, 1317, 1318, 1320, 1322, 1325, 1330, 1338, 1341], "arbitrari": [79, 206, 320, 410, 805, 832, 919, 925], "arbitrarili": [230, 320], "arcco": [805, 1310], "arccosh": [805, 1310], "arcsin": [805, 1310], "arcsinh": [805, 1310], "arctan": [728, 729, 805, 1310], "arctan2": 729, "arctanh": [805, 1310], "aren": [37, 46, 320, 919], "arg": [31, 50, 61, 62, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 202, 244, 320, 345, 601, 730, 756, 805, 841, 863, 919, 923, 1164, 1310, 1323], "arg_max": [805, 1310], "arg_min": [805, 1310], "arg_sort": [805, 1310], "arg_tru": [731, 805, 1310], "arg_uniqu": [805, 1310], "arg_wher": [346, 805], "argmax": [555, 805], "argument": [36, 39, 45, 134, 135, 139, 147, 149, 150, 165, 167, 169, 187, 191, 198, 210, 211, 226, 243, 244, 252, 258, 259, 266, 279, 286, 290, 294, 295, 299, 320, 442, 455, 467, 473, 493, 555, 597, 601, 617, 650, 685, 686, 687, 705, 722, 728, 729, 730, 733, 734, 735, 736, 738, 753, 783, 787, 795, 801, 805, 833, 838, 844, 845, 850, 863, 868, 870, 871, 877, 884, 889, 890, 895, 916, 919, 923, 925, 1048, 1061, 1099, 1259, 1260, 1261, 1292, 1310, 1332, 1333], "aris": 137, "arithmet": [204, 320], "arm": 157, "arm64": 157, "around": [37, 46, 320, 919], "arr": [278, 320, 797, 1291, 1302, 1310], "arr_bar": 1328, "arr_foo": 1328, "arrai": [122, 126, 135, 136, 139, 147, 150, 176, 197, 198, 272, 277, 278, 279, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 403, 404, 405, 406, 514, 529, 530, 531, 532, 534, 543, 544, 546, 549, 551, 555, 613, 619, 621, 623, 625, 627, 630, 632, 634, 640, 711, 734, 752, 784, 805, 838, 919, 924, 927, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 975, 1006, 1007, 1008, 1009, 1014, 1071, 1123, 1138, 1139, 1140, 1141, 1143, 1151, 1152, 1153, 1155, 1158, 1160, 1161, 1193, 1198, 1199, 1201, 1204, 1205, 1206, 1213, 1217, 1285, 1289, 1291, 1292, 1293, 1310, 1331, 1337, 1340], "array_agg": 1331, "array_contain": 1331, "array_get": 1331, "array_length": 1331, "array_low": 1331, "array_mean": 1331, "array_revers": 1331, "array_sum": 1331, "array_to_str": 1331, "array_uniqu": 1331, "array_upp": 1331, "arraylik": [1014, 1310], "arrow": [41, 42, 47, 122, 137, 138, 141, 143, 152, 177, 223, 254, 255, 272, 274, 278, 320, 919, 928, 1285, 1291, 1310], "arrowinvaliderror": [39, 320], "as_": [1310, 1315], "as_dict": [136, 243, 320], "as_expr": 925, "as_seri": [182, 273, 320, 823, 919, 925], "asarrai": [176, 927], "ascend": [211, 252, 320, 617, 805, 845, 868, 919], "ascii": [7, 20, 393, 394, 655, 665, 667, 668, 672, 673, 678, 680, 691, 700, 925, 991, 992, 1229, 1239, 1241, 1242, 1246, 1247, 1252, 1254, 1265, 1274], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [655, 665, 667, 678, 1229, 1239, 1241, 1252], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1341, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 925, "ascii_t": 174, "ascii_uppercas": [288, 320], "asd": [656, 663, 1230, 1237], "asia": [129, 925, 1023, 1024, 1051], "asid": 447, "asin": 1331, "asind": 1331, "asof": [226, 320, 850, 919], "asofjoinstrategi": [226, 320, 850, 919], "assert": [158, 159, 160, 161, 165, 169, 252, 320, 817, 925], "assert_frame_equ": [159, 160, 196, 320, 1341], "assert_frame_not_equ": [158, 161], "assert_series_equ": [158, 161, 1070, 1310, 1341], "assert_series_not_equ": [159, 160], "assert_someth": 163, "assertionerror": [158, 159, 160, 161], "assign": [163, 211, 305, 320, 369, 547, 597, 607, 682, 683, 805, 845, 901, 919, 968, 1156, 1187, 1256, 1257, 1310], "associ": [38, 40, 51, 138, 140, 164, 167, 255, 320, 924, 1321, 1323, 1327], "assum": [32, 255, 320, 855, 902, 919, 1333], "assume_rol": 32, "assumpt": [555, 805], "async": [137, 827, 919], "async_engin": 137, "asynchron": [58, 137, 827, 919], "asyncio": [58, 137, 827, 919], "asyncresult": [58, 827, 919], "ata": 26, "atan": 1331, "atan2": [728, 729, 1331], "atan2_ab": 1335, "atan2d": [729, 1331], "atan2d_ab": 1335, "atand": 1331, "atg": 26, "atgataaaggag": 26, "atol": [158, 159, 160, 161], "attain": [650, 805], "attempt": [1, 33, 410, 805, 832, 919], "attr": [320, 323, 1310, 1315], "attribut": [60, 63, 66, 67, 68, 69, 77, 81, 162, 320, 323, 797, 798, 800, 801, 806, 807, 810, 812, 813, 814, 894, 919, 1302, 1304, 1306, 1310, 1311, 1315, 1316, 1317, 1318], "attributeerror": 1, "audi": [273, 320, 614, 805], "august": 447, "australia": 748, "auth": 34, "authent": [39, 139, 147, 149, 150, 151, 152, 154, 320], "author": 1, "auto": [37, 41, 45, 46, 47, 48, 49, 59, 122, 124, 125, 126, 128, 144, 145, 147, 149, 152, 153, 154, 284, 320, 919, 1341], "auto_structifi": [258, 294, 320, 870, 889, 919], "autofilt": [40, 320], "autofit": [40, 320], "autogener": [135, 136, 140, 146, 149], "automat": [8, 37, 46, 122, 124, 125, 126, 128, 129, 135, 136, 137, 138, 140, 144, 145, 147, 149, 152, 153, 165, 169, 171, 258, 267, 294, 320, 555, 612, 685, 686, 687, 784, 805, 870, 878, 889, 919, 923, 1191, 1192, 1259, 1260, 1261, 1294, 1310, 1320, 1322, 1325, 1338], "autumn": [676, 677], "avail": [40, 45, 49, 131, 137, 138, 139, 150, 151, 163, 174, 245, 267, 319, 320, 447, 607, 784, 797, 798, 800, 804, 805, 806, 807, 810, 811, 812, 813, 814, 817, 878, 917, 918, 919, 923, 925, 1012, 1187, 1302, 1304, 1306, 1310, 1311, 1314, 1316, 1317, 1318, 1329], "available_timezon": [66, 925], "averag": [40, 320, 463, 464, 465, 466, 607, 805, 1072, 1073, 1074, 1075, 1187, 1310, 1327], "avg": 1331, "avocado": 1333, "avoid": [165, 169, 202, 254, 320, 331, 805, 841, 919], "avro": [35, 133, 320, 817], "avrocompress": [35, 320], "aw": [32, 37, 41, 45, 46, 47, 48, 49, 139, 145, 147, 149, 150, 152, 153, 154, 320, 919], "awai": 1332, "await": [58, 137, 827, 913, 919], "awar": [10, 137, 223, 254, 255, 274, 320, 464, 655, 665, 667, 678, 693, 805, 919, 1073, 1229, 1239, 1241, 1252, 1267, 1310], "aws_access_key_id": [39, 139, 150, 154, 320], "aws_region": [39, 150, 154, 320], "aws_secret_access_kei": [39, 139, 150, 154, 320], "awsassumerolekwarg": 32, "axi": [236, 287, 320, 323, 728, 729, 859, 885, 919, 1310, 1315], "aya": [680, 1254, 1265], "az": [139, 150, 151], "azur": [33, 37, 39, 41, 45, 46, 47, 48, 49, 139, 145, 147, 149, 150, 151, 152, 153, 154, 320, 919], "azure_storage_account_kei": [139, 150, 151], "azure_storage_account_nam": [139, 150, 151], "b": [1, 10, 35, 37, 39, 41, 42, 45, 54, 59, 81, 94, 97, 122, 123, 124, 125, 126, 127, 128, 129, 135, 137, 140, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 221, 222, 223, 224, 225, 228, 229, 231, 233, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 329, 331, 332, 334, 335, 345, 347, 352, 357, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 390, 391, 401, 408, 412, 444, 447, 467, 469, 471, 472, 473, 475, 478, 485, 486, 489, 491, 492, 493, 495, 498, 500, 501, 502, 503, 508, 514, 519, 526, 536, 537, 538, 539, 555, 556, 561, 570, 577, 580, 581, 582, 583, 584, 585, 586, 594, 595, 597, 601, 604, 607, 611, 612, 614, 616, 642, 648, 650, 657, 661, 666, 670, 676, 677, 701, 702, 713, 716, 720, 722, 723, 724, 725, 726, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 752, 753, 754, 755, 756, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 781, 782, 784, 786, 787, 788, 789, 790, 794, 801, 805, 820, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 919, 925, 931, 934, 956, 971, 972, 973, 974, 975, 976, 977, 990, 993, 994, 1011, 1014, 1050, 1053, 1067, 1070, 1071, 1078, 1081, 1099, 1104, 1123, 1145, 1146, 1147, 1148, 1185, 1190, 1231, 1235, 1240, 1244, 1250, 1251, 1275, 1277, 1278, 1280, 1292, 1297, 1310, 1320, 1322, 1323, 1325, 1326, 1327, 1328, 1333, 1334, 1335, 1338], "b1": [52, 54], "b2": [52, 54], "b345": [40, 320], "b4": [40, 320], "b_b": [267, 320], "b_btm_by_a": [390, 805], "b_btm_by_b": [390, 805], "b_by_ca": [390, 713, 805], "b_by_cb": [390, 713, 805], "b_is_not_nan": [501, 805], "b_isnan": [500, 805], "b_isnul": [503, 805], "b_not_nul": [502, 805], "b_revers": [581, 585, 614, 805], "b_suffix": 586, "b_sum": [299, 895], "b_top_by_a": [713, 805], "b_top_by_b": [713, 805], "ba": [410, 467, 570, 684, 753, 805, 925], "back": [4, 51, 154, 199, 211, 260, 278, 279, 320, 570, 597, 677, 805, 826, 845, 872, 894, 919, 1078, 1292, 1310], "backend": [39, 137, 138, 139, 150, 151, 320, 323, 1310, 1315], "background": [320, 324, 826, 918, 919], "backward": [45, 49, 201, 226, 320, 372, 415, 435, 472, 805, 840, 850, 919, 1017, 1041, 1081, 1310], "backward_fil": [478, 641, 805], "bad": [676, 677, 1250, 1251], "balanc": [168, 170, 1341], "ballon_dor": [662, 664, 1236, 1238], "banana": [186, 273, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 390, 614, 659, 684, 713, 805, 898, 900, 903, 904, 905, 906, 907, 908, 909, 1333], "banded_column": [40, 320], "banded_row": [40, 320], "bar": [35, 37, 39, 41, 42, 43, 44, 45, 132, 144, 145, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 199, 202, 204, 206, 207, 208, 213, 215, 216, 217, 219, 225, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 247, 249, 250, 253, 256, 257, 258, 260, 265, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 285, 286, 291, 292, 293, 298, 320, 323, 392, 410, 490, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 647, 656, 658, 661, 663, 664, 679, 681, 683, 688, 689, 726, 737, 738, 739, 754, 759, 760, 763, 764, 768, 770, 772, 773, 775, 776, 783, 786, 790, 794, 795, 801, 805, 823, 828, 829, 833, 834, 835, 836, 841, 847, 848, 849, 862, 866, 869, 870, 883, 884, 888, 919, 924, 925, 989, 1135, 1222, 1230, 1232, 1235, 1237, 1238, 1253, 1257, 1262, 1263, 1310, 1324, 1326, 1327, 1328, 1330, 1333, 1336], "bar2": 1333, "bar22": [204, 320], "bar_": 681, "bar_3": [275, 320], "bar_4": [275, 320], "bar_a": [245, 320], "bar_at_2": 1328, "bar_avg": 1327, "bar_b": [245, 320], "bar_color": [40, 320], "bar_max": 1327, "bar_median": 1327, "bar_min": 1327, "bar_negative_border_color_sam": [40, 320], "bar_negative_color_sam": [40, 320], "bar_std": 1327, "bar_sum": 1327, "bar_var": 1327, "bare": [563, 564, 925], "base": [31, 40, 64, 108, 110, 167, 194, 202, 211, 227, 252, 320, 416, 424, 460, 463, 464, 465, 466, 473, 488, 492, 550, 551, 555, 556, 602, 604, 612, 617, 620, 622, 624, 626, 628, 631, 633, 635, 695, 805, 841, 845, 851, 868, 919, 925, 1018, 1026, 1067, 1072, 1073, 1074, 1075, 1095, 1098, 1159, 1160, 1164, 1183, 1185, 1191, 1192, 1269, 1301, 1310, 1326, 1332, 1341], "base64": [374, 375, 657, 658, 972, 973, 1231, 1232], "base_nam": [284, 320], "base_utc_offset": [424, 1026], "baseexcept": 1338, "basi": [40, 140, 165, 320], "basic": [40, 176, 320, 562, 927, 1341], "basic_chart": [40, 320], "batch": [42, 57, 58, 131, 136, 137, 143, 145, 153, 155, 254, 282, 320, 826, 827, 855, 919], "batch_siz": [37, 46, 135, 136, 137, 145, 153, 155, 282, 320, 919], "batchedcsvread": 136, "baz": [206, 216, 217, 286, 320, 664, 681, 683, 754, 763, 776, 801, 848, 884, 919, 924, 925, 1238, 1257, 1324, 1330, 1333], "bb": [925, 1012, 1310, 1333, 1338], "bbb": [1, 40, 320, 701, 703, 704, 925], "bc": [666, 677, 788, 1240], "bcbc45": 1333, "bea": 12, "bear": 925, "beauti": 12, "becaus": [145, 153, 197, 211, 228, 230, 288, 306, 320, 477, 519, 547, 805, 845, 902, 919, 1071, 1128, 1164, 1310], "becom": [167, 319, 917, 918], "bed3": [40, 320], "been": [5, 30, 40, 172, 178, 301, 320, 479, 556, 574, 607, 805, 897, 1187, 1310], "beetl": [273, 320, 614, 805], "befor": [40, 65, 66, 135, 137, 140, 149, 155, 158, 159, 160, 161, 171, 174, 199, 211, 226, 267, 277, 282, 286, 320, 383, 384, 386, 387, 405, 406, 407, 555, 597, 598, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 661, 700, 707, 735, 781, 782, 805, 845, 847, 850, 884, 919, 923, 981, 982, 984, 985, 1008, 1009, 1010, 1078, 1180, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1235, 1274, 1281, 1310, 1326], "beforehand": [690, 692, 693, 1264, 1266, 1267], "begin": [12, 40, 320, 463, 465, 466, 662, 691, 805, 1072, 1074, 1075, 1236, 1265, 1310], "behav": [202, 320, 473, 556, 686, 687, 805, 841, 919], "behavior": [45, 49, 147, 154, 193, 194, 202, 225, 226, 320, 356, 479, 522, 524, 661, 754, 763, 805, 834, 835, 841, 849, 850, 916, 919, 955, 1131, 1133, 1235], "behaviour": [10, 51, 59, 193, 194, 267, 320, 654, 662, 663, 666, 676, 677, 714, 784, 805, 834, 835, 878, 919, 1228, 1236, 1237, 1240, 1250, 1251], "behind": 171, "being": [13, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 132, 135, 136, 137, 140, 145, 146, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 182, 198, 227, 267, 275, 277, 282, 288, 289, 320, 323, 324, 407, 408, 442, 488, 556, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 661, 732, 734, 752, 781, 782, 805, 823, 826, 827, 837, 838, 851, 878, 886, 919, 994, 1010, 1011, 1048, 1095, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1235, 1286, 1289, 1294, 1310, 1315, 1341], "belong": [1, 211, 320, 845, 919], "below": [19, 39, 139, 140, 150, 151, 194, 202, 245, 320, 447, 472, 668, 676, 677, 691, 746, 747, 749, 750, 792, 793, 795, 801, 805, 841, 919, 1053, 1242, 1250, 1251, 1265], "benchmark": 135, "best": [230, 306, 320, 556, 805, 1164, 1310], "better": [230, 277, 278, 306, 320, 394, 556, 673, 805, 822, 902, 919, 992, 1210, 1212, 1247, 1310], "between": [24, 59, 93, 162, 163, 165, 169, 179, 187, 225, 247, 254, 312, 320, 357, 391, 411, 412, 447, 493, 517, 526, 536, 537, 538, 539, 598, 604, 605, 627, 628, 653, 669, 728, 729, 732, 737, 739, 778, 781, 782, 805, 849, 865, 908, 919, 956, 988, 993, 1013, 1014, 1053, 1099, 1126, 1135, 1145, 1146, 1147, 1148, 1180, 1185, 1186, 1202, 1227, 1243, 1310, 1327, 1335], "between_ab": [493, 805], "beyond": [698, 1272], "bia": [465, 466, 505, 629, 647, 805, 1074, 1075, 1114, 1203, 1222, 1310], "bias": [505, 647, 805, 1114, 1222, 1310], "big": [136, 377, 975], "big_fil": 136, "bigidx": 130, "bigqueri": 138, "bin": [408, 488, 604, 695, 721, 798, 805, 1011, 1095, 1185, 1269, 1304, 1310, 1315], "bin_count": [488, 805, 1095, 1310], "bin_i": [721, 805], "bin_x": [721, 805], "bin_xor_xi": [721, 805], "binari": [41, 137, 190, 260, 320, 373, 374, 375, 376, 377, 378, 379, 410, 570, 657, 805, 832, 872, 919, 925, 971, 972, 974, 975, 976, 977, 1231, 1329], "binary_str": [721, 805], "bind": 140, "birthdai": 135, "bit": [65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 381, 382, 383, 384, 386, 387, 609, 654, 805, 979, 981, 982, 984, 985, 1189, 1228, 1310, 1329, 1333], "bit_and": 1331, "bit_count": 1331, "bit_length": 1331, "bit_or": 1331, "bit_xor": 1331, "bitmap": [197, 320, 1071, 1310], "bitwis": [333, 380, 385, 388, 596, 721, 722, 723, 724, 725, 805, 978, 983, 986, 1310, 1329, 1331], "bitwise_and": [805, 1310], "bitwise_count_on": [805, 1310], "bitwise_count_zero": [805, 1310], "bitwise_leading_on": [805, 1310], "bitwise_leading_zero": [805, 1310], "bitwise_or": [805, 1310], "bitwise_trailing_on": [805, 1310], "bitwise_trailing_zero": [805, 1310], "bitwise_xor": [805, 1310], "bla": [656, 663, 1230, 1237], "black": [230, 320, 373, 374, 375, 376, 379], "blindli": [519, 1128], "block": [20, 58, 210, 285, 320, 795, 827, 844, 866, 883, 892, 893, 902, 919, 1210, 1212, 1310], "blue": [50, 89, 90, 373, 374, 375, 376, 379, 718, 805, 1299, 1310], "bob": [135, 237, 320, 860, 919, 1339], "bodi": [40, 320, 324], "bold": [40, 320], "bom": [37, 46, 320, 919], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 89, 122, 123, 124, 125, 127, 128, 129, 132, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 176, 178, 181, 182, 183, 184, 189, 191, 196, 201, 202, 203, 204, 208, 209, 210, 211, 215, 216, 218, 219, 220, 223, 225, 226, 234, 243, 245, 249, 253, 254, 255, 256, 261, 264, 266, 267, 270, 273, 275, 278, 279, 283, 284, 285, 286, 289, 290, 292, 294, 302, 304, 307, 310, 320, 331, 332, 333, 334, 335, 345, 348, 349, 352, 356, 357, 365, 370, 373, 374, 376, 379, 390, 391, 402, 403, 404, 405, 406, 407, 408, 415, 427, 443, 460, 461, 462, 463, 465, 466, 482, 484, 485, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 515, 519, 522, 524, 526, 535, 542, 547, 548, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 591, 592, 594, 596, 599, 600, 604, 607, 609, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 638, 640, 642, 647, 649, 650, 653, 654, 655, 656, 657, 659, 665, 666, 667, 669, 676, 677, 678, 681, 682, 684, 690, 692, 693, 695, 697, 701, 703, 704, 713, 715, 718, 721, 722, 723, 724, 725, 727, 730, 731, 732, 736, 737, 740, 741, 746, 747, 749, 750, 761, 762, 765, 767, 771, 777, 780, 783, 784, 787, 789, 792, 793, 795, 796, 805, 821, 823, 824, 826, 827, 831, 833, 837, 840, 841, 844, 845, 849, 850, 855, 859, 864, 866, 873, 875, 877, 878, 882, 883, 884, 885, 886, 889, 894, 898, 900, 903, 906, 919, 923, 924, 925, 927, 932, 933, 944, 947, 948, 951, 955, 956, 964, 969, 971, 972, 974, 977, 988, 990, 994, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017, 1029, 1049, 1067, 1069, 1070, 1072, 1074, 1075, 1082, 1084, 1091, 1092, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1119, 1120, 1124, 1128, 1131, 1133, 1135, 1144, 1151, 1157, 1164, 1176, 1178, 1181, 1182, 1185, 1187, 1188, 1189, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1212, 1213, 1217, 1222, 1224, 1227, 1228, 1229, 1230, 1231, 1233, 1239, 1240, 1241, 1243, 1250, 1251, 1252, 1255, 1256, 1258, 1264, 1266, 1267, 1269, 1271, 1286, 1291, 1292, 1296, 1299, 1310, 1319, 1320, 1322, 1328, 1333, 1338], "boolean": [51, 165, 181, 202, 204, 266, 283, 320, 332, 333, 334, 348, 349, 352, 373, 376, 379, 390, 427, 473, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 510, 511, 515, 594, 596, 599, 600, 650, 670, 713, 720, 721, 730, 731, 787, 795, 805, 821, 841, 877, 882, 919, 925, 932, 933, 945, 947, 948, 951, 971, 1029, 1082, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1119, 1120, 1124, 1178, 1181, 1182, 1212, 1228, 1301, 1310, 1330], "border": 20, "both": [10, 25, 37, 46, 50, 89, 90, 137, 154, 185, 211, 225, 226, 227, 237, 252, 253, 279, 289, 320, 335, 397, 408, 447, 467, 493, 604, 617, 620, 622, 624, 626, 628, 631, 633, 635, 680, 746, 747, 749, 750, 792, 793, 801, 805, 816, 845, 849, 850, 851, 860, 868, 886, 919, 925, 999, 1053, 1099, 1254, 1292, 1310, 1338, 1339], "boto3": 32, "bottom": [181, 320, 390, 805, 821, 919], "bottom_k": [283, 320, 390, 712, 713, 805, 882, 919, 1295, 1310], "bottom_k_bi": [389, 712, 713, 805], "bound": [104, 135, 136, 197, 211, 320, 356, 397, 493, 522, 524, 547, 553, 717, 727, 746, 747, 749, 750, 792, 793, 805, 845, 919, 955, 999, 1071, 1099, 1131, 1133, 1162, 1298, 1310, 1328], "boundari": [211, 320, 397, 488, 698, 805, 845, 919, 999, 1095, 1272, 1310], "box": [20, 230, 320], "box_draw": 20, "branch": [57, 58, 826, 827, 837, 864, 875, 919], "break": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 225, 227, 267, 277, 282, 288, 289, 320, 323, 324, 407, 408, 442, 488, 556, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 734, 781, 782, 805, 826, 827, 837, 849, 851, 878, 886, 919, 994, 1010, 1011, 1048, 1095, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1289, 1294, 1310, 1315], "breakpoint": [408, 488, 604, 805, 1011, 1095, 1185, 1310], "breezah": 149, "breviti": 174, "broadcast": [678, 734, 925, 1252], "broader": 925, "brotli": [45, 49, 320, 919], "brussel": [441, 1047], "bst": [420, 424, 441, 1022, 1026, 1047], "bucket": [39, 139, 150, 151, 154, 320, 442, 455, 488, 805, 1048, 1061, 1095, 1310], "bud": [676, 677, 1250, 1251], "budget": 1319, "buffer": [135, 136, 137, 197, 223, 320, 377, 975, 1071, 1310], "buffer_s": [223, 320], "bug": [555, 556, 805, 855, 902, 919, 1164, 1310], "build": [56, 123, 925, 1341], "built": 93, "builtin": [133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 410, 805, 832, 919], "bundl": 174, "busi": [415, 732, 1017], "business_day_count": [415, 1017], "by_alternate_row": 1, "by_dtyp": 925, "by_first_letter_of_column_nam": 52, "by_first_letter_of_column_valu": 52, "by_index": 925, "by_left": [226, 320, 850, 919], "by_nam": 925, "by_pred": [253, 320], "by_right": [226, 320, 850, 919], "bye": 1, "byi": 1333, "bys": [211, 320, 845, 919], "byte": [35, 37, 40, 41, 42, 45, 46, 49, 133, 134, 135, 136, 141, 142, 143, 144, 145, 148, 149, 152, 153, 190, 197, 260, 320, 377, 393, 394, 410, 570, 666, 667, 668, 672, 673, 680, 691, 805, 832, 872, 919, 975, 991, 992, 1071, 1240, 1241, 1242, 1246, 1247, 1254, 1265, 1310, 1333], "bytesio": [40, 41, 42, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 260, 320, 410, 570, 805, 832, 872, 919], "c": [1, 10, 35, 37, 39, 41, 42, 45, 52, 54, 59, 97, 123, 125, 127, 129, 140, 149, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 196, 198, 202, 204, 207, 208, 209, 210, 211, 213, 215, 216, 224, 225, 228, 229, 231, 233, 235, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 256, 257, 258, 265, 266, 267, 268, 269, 271, 272, 275, 276, 277, 278, 279, 280, 283, 287, 288, 289, 291, 292, 294, 299, 302, 303, 304, 307, 308, 310, 313, 314, 320, 324, 329, 331, 332, 334, 352, 372, 390, 408, 447, 485, 493, 514, 526, 556, 563, 580, 581, 595, 597, 601, 604, 642, 682, 690, 713, 716, 723, 725, 726, 728, 729, 730, 733, 734, 736, 737, 738, 739, 741, 742, 744, 754, 755, 756, 759, 760, 763, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 784, 786, 788, 789, 790, 794, 801, 805, 821, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 841, 844, 845, 849, 853, 862, 864, 866, 867, 869, 870, 875, 876, 877, 878, 882, 885, 886, 889, 891, 895, 898, 899, 900, 903, 904, 906, 909, 910, 919, 923, 925, 993, 1011, 1099, 1123, 1185, 1256, 1264, 1278, 1297, 1310, 1320, 1322, 1323, 1325, 1326, 1327, 1328, 1333, 1338], "c00": 925, "c01": 925, "c02": 925, "c03": 925, "c05": 925, "c1": 369, "c123": 1333, "c2": 369, "c20": 925, "c25": 925, "c3": 369, "c40": 925, "c45": 1333, "c4d79b": [40, 320], "c50": 925, "c567": [40, 320], "c60": 925, "c75": 925, "c80": 925, "c8ae6d2b276": [40, 320], "c93": 925, "c95": 925, "c96": 925, "c97": 925, "c98": 925, "c99": 925, "c_btm_by_a": [390, 805], "c_btm_by_b": [390, 805], "c_by_ca": [390, 713, 805], "c_by_cb": [390, 713, 805], "c_c_c": [784, 878, 919], "c_contigu": [278, 320], "c_max": [597, 805], "c_mean_squar": [299, 895], "c_min": [597, 805], "c_top_by_a": [713, 805], "c_top_by_b": [713, 805], "c_total": 1338, "cach": [50, 57, 58, 89, 90, 117, 141, 149, 152, 154, 158, 159, 160, 161, 173, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 690, 692, 693, 697, 805, 816, 826, 827, 837, 864, 875, 919, 990, 1191, 1192, 1264, 1266, 1267, 1271, 1310], "cadi": [245, 320], "cafe": [695, 1269], "caf\u00e9": [393, 394, 672, 673, 925, 991, 992, 1246, 1247], "calamin": 140, "calcul": [40, 45, 49, 51, 189, 211, 268, 291, 320, 411, 463, 464, 465, 466, 505, 517, 536, 543, 549, 553, 629, 647, 652, 717, 719, 739, 781, 782, 786, 794, 805, 831, 845, 879, 887, 919, 1012, 1013, 1072, 1073, 1074, 1075, 1114, 1126, 1145, 1203, 1222, 1226, 1300, 1310], "calendar": [65, 66, 211, 226, 252, 290, 320, 418, 428, 430, 437, 442, 455, 459, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 1020, 1030, 1035, 1043, 1048, 1061, 1065, 1073, 1310], "calendar_year": [428, 459], "call": [37, 40, 41, 45, 46, 47, 48, 49, 50, 57, 58, 127, 136, 137, 140, 145, 147, 149, 152, 153, 154, 158, 159, 160, 161, 165, 169, 174, 181, 210, 211, 228, 230, 252, 267, 278, 283, 319, 320, 389, 390, 403, 406, 415, 555, 556, 580, 581, 583, 585, 587, 588, 611, 612, 643, 712, 713, 732, 738, 801, 805, 821, 826, 827, 837, 844, 845, 864, 868, 875, 878, 882, 916, 917, 918, 919, 923, 925, 987, 1017, 1164, 1192, 1218, 1291, 1295, 1310, 1320, 1324, 1338], "callabl": [52, 53, 54, 55, 149, 204, 230, 244, 249, 306, 320, 369, 547, 555, 556, 581, 582, 601, 618, 741, 742, 755, 766, 767, 779, 805, 855, 863, 866, 902, 919, 968, 1156, 1164, 1197, 1310], "caller": [138, 237, 320, 547, 855, 860, 902, 919], "cam": [249, 320, 866, 919], "can": [1, 14, 27, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 65, 66, 68, 81, 89, 90, 125, 135, 136, 137, 140, 141, 145, 146, 147, 149, 152, 153, 154, 155, 163, 164, 165, 169, 171, 174, 176, 181, 183, 193, 194, 195, 204, 206, 210, 211, 218, 220, 222, 225, 226, 230, 241, 245, 252, 254, 255, 258, 260, 261, 266, 277, 278, 282, 283, 284, 288, 294, 297, 306, 320, 323, 332, 369, 390, 403, 406, 407, 410, 415, 434, 435, 437, 441, 444, 447, 455, 464, 470, 473, 493, 519, 547, 555, 556, 563, 567, 570, 571, 577, 580, 581, 583, 585, 587, 588, 597, 602, 604, 609, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 642, 647, 650, 655, 664, 671, 676, 677, 678, 685, 686, 687, 690, 701, 713, 730, 732, 745, 748, 755, 757, 761, 762, 767, 784, 795, 801, 804, 805, 816, 821, 822, 826, 827, 832, 834, 835, 837, 845, 849, 850, 868, 870, 872, 873, 875, 877, 878, 882, 889, 892, 893, 919, 925, 927, 968, 1010, 1017, 1040, 1041, 1043, 1047, 1048, 1050, 1053, 1061, 1073, 1079, 1099, 1128, 1156, 1164, 1169, 1183, 1185, 1189, 1192, 1210, 1212, 1213, 1216, 1222, 1229, 1230, 1238, 1245, 1250, 1251, 1252, 1259, 1260, 1261, 1264, 1289, 1291, 1310, 1315, 1325, 1338], "cancel": [826, 919], "candid": [662, 664, 1236, 1238], "cannot": [1, 45, 49, 99, 102, 135, 136, 140, 141, 143, 146, 147, 154, 171, 174, 230, 255, 256, 278, 297, 306, 320, 374, 447, 467, 535, 556, 571, 638, 657, 682, 703, 767, 805, 875, 893, 894, 902, 919, 925, 972, 1053, 1144, 1164, 1209, 1231, 1256, 1291, 1310], "capabl": [1, 40, 320], "capac": [197, 264, 320, 1071, 1217, 1310], "capit": [698, 1272, 1333], "captur": [662, 664, 676, 677, 1236, 1238, 1250, 1251], "car": [249, 273, 320, 614, 805, 866, 919], "cardin": [180, 320, 336, 726, 805, 820, 919, 935, 1310], "care": [40, 261, 320, 556, 597, 640, 805, 873, 919, 1213, 1310], "cars_revers": [614, 805], "cartesian": [225, 320, 849, 919], "case": [40, 50, 51, 58, 97, 122, 124, 125, 126, 128, 137, 144, 145, 153, 154, 171, 199, 211, 223, 230, 245, 252, 254, 255, 274, 277, 278, 320, 416, 464, 555, 567, 568, 581, 617, 654, 655, 663, 665, 666, 667, 676, 677, 678, 698, 805, 827, 845, 868, 919, 923, 925, 1018, 1073, 1078, 1228, 1229, 1237, 1239, 1240, 1241, 1250, 1251, 1252, 1272, 1289, 1310], "cast": [1, 39, 53, 54, 122, 124, 125, 128, 158, 159, 160, 161, 204, 211, 244, 252, 277, 278, 282, 294, 320, 335, 377, 405, 406, 417, 444, 447, 458, 596, 601, 602, 609, 611, 617, 670, 671, 700, 707, 711, 735, 736, 785, 805, 845, 863, 868, 889, 919, 923, 925, 994, 1008, 1009, 1019, 1050, 1053, 1064, 1183, 1189, 1244, 1245, 1274, 1281, 1287, 1291, 1293, 1294, 1310, 1331], "cast_str_to_int": [244, 320, 863, 919], "cast_to_supertyp": [805, 923], "caster": 377, "cat": [26, 50, 89, 90, 408, 604, 654, 656, 696, 699, 711, 736, 800, 805, 925, 1011, 1095, 1185, 1228, 1230, 1270, 1273, 1306, 1310], "categor": [39, 50, 69, 89, 90, 92, 158, 159, 160, 161, 225, 275, 320, 392, 393, 394, 408, 604, 611, 612, 711, 805, 925, 989, 990, 991, 992, 993, 994, 1011, 1185, 1191, 1192, 1293, 1310], "categori": [40, 50, 69, 90, 275, 320, 392, 408, 488, 604, 805, 989, 1011, 1095, 1185, 1286, 1310], "categorical_as_str": [158, 159, 160, 161], "categoricalord": 63, "categoricaltyp": [272, 320], "caus": [105, 114, 123, 135, 136, 137, 149, 178, 199, 278, 320, 555, 805, 1078, 1291, 1310], "cba": 687, "cbrt": [805, 1310, 1331], "cbrt_a": 1332, "cc": [467, 753, 805, 925, 1012, 1310, 1333], "ccc": [1, 40, 320, 701, 703, 704, 925, 1333], "ccy": 1341, "cd": [677, 701, 703, 704, 925], "cd34": 677, "cdatainterfac": [177, 928], "cde": [925, 1333], "cdt": [442, 455, 1048, 1061], "ceil": [53, 805, 1310, 1331], "ceil_a": 1332, "cell": [15, 16, 40, 245, 320], "cent": [418, 1250], "center": [15, 16, 40, 320, 463, 465, 466, 618, 619, 621, 623, 625, 627, 630, 632, 634, 805, 1072, 1074, 1075, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1310], "central": [150, 151, 174, 505, 647, 805, 1114, 1222, 1310], "centuri": 1334, "certain": [46, 47, 48, 49, 58, 216, 290, 320, 686, 687, 801, 826, 827, 864, 919, 1310], "certainli": [690, 692, 693, 1264, 1266, 1267], "cest": [441, 1047], "cet": [441, 1047], "cfg": [2, 4, 17, 174], "cfg_ascii_fram": 174, "cfg_markdown": 174, "cfg_verbos": 174, "cfoo": [891, 919], "chain": [580, 581, 583, 585, 587, 588, 795], "chanc": [162, 165, 169, 1341], "chang": [30, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 51, 57, 58, 67, 69, 72, 132, 135, 136, 137, 140, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 227, 267, 277, 282, 288, 289, 296, 320, 323, 324, 407, 408, 411, 442, 447, 488, 556, 597, 598, 604, 611, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 734, 781, 782, 805, 826, 827, 837, 851, 878, 886, 892, 919, 923, 925, 993, 994, 1010, 1011, 1048, 1053, 1095, 1180, 1185, 1191, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1217, 1289, 1294, 1310, 1315], "changes_length": [805, 923], "char": [27, 135, 149, 663, 1237], "char_length": 1333, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 46, 91, 134, 135, 136, 138, 149, 320, 393, 394, 437, 660, 661, 663, 668, 672, 673, 674, 675, 676, 677, 680, 681, 682, 685, 686, 687, 688, 689, 691, 698, 700, 864, 919, 925, 991, 992, 1043, 1234, 1235, 1237, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1259, 1260, 1261, 1265, 1272, 1274, 1333], "character_length": 1333, "characterist": [165, 169], "charli": [135, 1339], "chart": [40, 320, 323, 864, 919, 1310, 1315], "cheap": [183, 184, 259, 295, 320, 824, 825, 871, 890, 919, 998, 1000, 1310], "cheaper": [522, 1131], "check": [39, 66, 99, 135, 136, 149, 158, 159, 160, 161, 173, 196, 221, 225, 320, 352, 373, 376, 379, 485, 493, 497, 515, 654, 659, 666, 684, 805, 849, 855, 919, 951, 971, 974, 977, 1070, 1091, 1092, 1101, 1104, 1111, 1113, 1124, 1228, 1233, 1240, 1258, 1310], "check_column_ord": [158, 159], "check_dtyp": [158, 159, 160, 161, 924, 1070, 1310], "check_exact": [158, 159, 160, 161], "check_nam": [160, 161, 1070, 1310], "check_ord": [160, 161], "check_row_ord": [158, 159], "choos": [45, 47, 49, 211, 245, 320, 447, 845, 919, 1053], "chrono": [37, 46, 93, 320, 444, 447, 690, 692, 693, 697, 919, 1050, 1053, 1264, 1266, 1267, 1271, 1333, 1334], "chunk": [14, 49, 131, 135, 136, 139, 145, 147, 149, 150, 152, 153, 154, 165, 169, 199, 224, 240, 278, 320, 335, 608, 805, 919, 934, 997, 1078, 1089, 1170, 1188, 1285, 1291, 1310], "chunk_length": 1310, "chunkedarrai": [122, 240, 320], "citi": [676, 677], "clang": 157, "clariti": [253, 320], "class": [1, 17, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 108, 110, 162, 163, 255, 320, 792, 801, 805, 811, 817, 829, 836, 869, 888, 894, 919, 924, 1290, 1310, 1314, 1322, 1338], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 190, 320, 410, 479, 805, 832, 919, 1320, 1338], "claus": [817, 1328, 1337], "clean": [690, 692, 693, 1264, 1266, 1267], "cleaner": 174, "cleanli": [10, 209, 320, 1338], "clear": [50, 89, 184, 320, 825, 919, 1000, 1310], "clearer": 125, "cli": 33, "clickhous": 138, "client": [32, 137], "clip": [805, 1310], "clipboard": [36, 134, 320, 817], "clone": [124, 125, 126, 127, 128, 183, 278, 320, 824, 919, 998, 1310], "close": [40, 137, 211, 252, 267, 320, 408, 493, 552, 604, 617, 620, 622, 624, 626, 628, 631, 633, 635, 647, 746, 747, 749, 750, 792, 793, 805, 845, 868, 878, 919, 1011, 1099, 1185, 1222, 1310], "closedinterv": [211, 252, 320, 493, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 868, 919, 1099, 1310], "closest": [122, 226, 320, 850, 919, 1327, 1332], "closur": [620, 622, 631, 633, 635, 805], "cloud": [34, 37, 39, 41, 45, 46, 47, 48, 49, 137, 139, 145, 147, 149, 150, 151, 152, 153, 154, 155, 320, 817, 919], "cloudi": [676, 677], "cloudpickl": 157, "cluster": 154, "cluster_with_column": [57, 58, 826, 827, 837, 864, 875, 919], "co": [663, 805, 1237, 1310, 1331], "coalesc": [225, 226, 289, 320, 491, 665, 667, 690, 805, 849, 850, 886, 919, 1241, 1264, 1326, 1331], "code": [174, 185, 225, 320, 373, 374, 375, 376, 379, 410, 556, 640, 805, 832, 849, 853, 919, 1213, 1310, 1320], "codebas": 174, "coeffici": [187, 320, 647, 805, 1222, 1310], "coerc": [59, 610, 805], "coercion": [46, 47, 48, 49, 57, 58, 610, 805, 826, 827, 837, 864, 875, 919], "col": [1, 12, 37, 40, 46, 51, 52, 53, 54, 126, 128, 149, 163, 165, 202, 210, 211, 219, 221, 225, 226, 227, 230, 241, 244, 245, 252, 253, 258, 266, 277, 282, 286, 288, 294, 299, 320, 324, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 487, 488, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 584, 586, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 730, 731, 733, 734, 735, 736, 738, 740, 743, 745, 746, 748, 749, 751, 755, 756, 757, 758, 759, 760, 768, 770, 772, 773, 775, 778, 779, 783, 784, 786, 788, 790, 791, 794, 795, 805, 841, 844, 845, 847, 849, 850, 851, 863, 868, 870, 877, 878, 884, 889, 891, 895, 919, 925, 1043, 1047, 1128, 1210, 1212, 1241, 1245, 1264, 1310, 1341], "col0": [165, 1341], "col1": [165, 245, 320, 919, 1341], "col2": [165, 245, 320, 919, 1341], "col3": [245, 320, 1341], "col4": 1341, "col_nam": [244, 320, 556, 795, 805, 863, 919], "cole": 132, "coli": [40, 320, 587, 588, 925, 1341], "collaps": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "collapse_join": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "collect": [54, 57, 58, 149, 150, 151, 155, 165, 166, 169, 193, 194, 228, 245, 267, 272, 285, 286, 320, 467, 497, 556, 735, 753, 757, 783, 784, 787, 805, 820, 821, 823, 824, 827, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 916, 918, 919, 925, 1104, 1310, 1320, 1321, 1322, 1325, 1326, 1338, 1339, 1341], "collect_al": [54, 58, 826, 827, 919], "collect_all_async": [827, 919], "collect_async": [58, 919], "collect_schema": [54, 228, 320, 829, 836, 863, 869, 888, 919], "collis": 59, "colnam": [24, 40, 149, 320], "color": [50, 89, 90, 306, 320, 323, 373, 374, 375, 376, 379, 657, 718, 805, 902, 971, 972, 973, 974, 977, 1231, 1299, 1310, 1333], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 45, 49, 50, 51, 52, 59, 66, 81, 90, 94, 98, 122, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 165, 179, 181, 182, 185, 187, 188, 191, 192, 193, 194, 195, 198, 202, 203, 206, 207, 209, 210, 211, 215, 216, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 266, 268, 269, 270, 273, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 305, 320, 323, 324, 331, 332, 334, 345, 354, 363, 365, 368, 377, 390, 397, 401, 402, 408, 418, 419, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 439, 440, 443, 444, 445, 447, 456, 457, 459, 467, 469, 473, 475, 488, 492, 493, 508, 514, 520, 522, 542, 546, 547, 556, 562, 563, 565, 567, 569, 580, 582, 583, 584, 585, 586, 587, 588, 597, 604, 608, 610, 611, 612, 613, 615, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 642, 643, 649, 650, 653, 661, 666, 668, 669, 678, 682, 683, 690, 691, 692, 693, 694, 695, 697, 702, 705, 713, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 821, 823, 830, 833, 834, 835, 836, 838, 841, 844, 845, 849, 850, 851, 855, 856, 857, 858, 859, 861, 862, 865, 866, 868, 869, 870, 871, 873, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 901, 902, 919, 924, 925, 932, 933, 953, 962, 964, 967, 975, 990, 993, 999, 1004, 1005, 1011, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1049, 1050, 1051, 1053, 1062, 1063, 1065, 1077, 1095, 1098, 1123, 1129, 1131, 1151, 1155, 1185, 1192, 1193, 1196, 1216, 1227, 1235, 1240, 1243, 1256, 1257, 1264, 1266, 1267, 1268, 1269, 1271, 1277, 1280, 1286, 1287, 1299, 1310, 1326, 1328, 1330, 1332, 1333, 1335, 1336, 1339, 1340, 1341], "column_0": [1, 230, 284, 320], "column_1": [230, 284, 320, 1335], "column_2": [284, 320, 1335], "column_abc": 15, "column_format": [40, 320], "column_nam": [249, 284, 320, 866, 919], "column_tot": [40, 320], "column_width": [40, 320], "column_x": [135, 136, 140, 146, 149], "column_xyz": 15, "columnar": [126, 128, 223, 254, 320], "columnformatdict": [40, 320], "columnnameorselector": [182, 191, 193, 194, 236, 243, 245, 255, 275, 285, 286, 287, 288, 320, 823, 833, 834, 835, 859, 883, 884, 885, 919], "columnnotfounderror": [206, 207, 320], "columntotalsdefinit": [40, 320], "columnwidthsdefinit": [40, 320], "colx": [40, 320, 587, 588, 925, 1325, 1341], "colz": [925, 1341], "com": [32, 40, 138, 320, 463, 465, 466, 662, 663, 664, 805, 1072, 1074, 1075, 1236, 1237, 1238, 1310], "combin": [45, 49, 57, 58, 59, 202, 211, 212, 226, 245, 252, 290, 320, 333, 346, 455, 464, 477, 571, 596, 612, 617, 685, 686, 687, 746, 747, 749, 750, 792, 793, 795, 805, 826, 827, 837, 845, 850, 864, 868, 875, 919, 1048, 1061, 1073, 1192, 1259, 1260, 1261, 1310, 1326, 1339], "come": [117, 138, 211, 285, 287, 320, 415, 434, 435, 505, 547, 732, 805, 845, 883, 885, 919, 1017, 1040, 1041, 1114, 1310], "comm_subexpr_elim": [57, 58, 826, 827, 837, 864, 875, 919], "comm_subplan_elim": [57, 58, 826, 827, 837, 864, 875, 919], "comma": [36, 37, 135, 136, 149, 320], "comment": [135, 136, 149], "comment_prefix": [135, 136, 149], "common": [51, 57, 58, 59, 97, 135, 136, 149, 289, 320, 581, 811, 826, 827, 837, 864, 875, 886, 919, 1314], "compact": 1336, "compani": 138, "compar": [154, 158, 159, 160, 161, 196, 202, 320, 461, 462, 482, 484, 493, 507, 554, 591, 592, 805, 841, 919, 993, 1069, 1070, 1176, 1310], "comparison": [155, 202, 320, 841, 919], "compat": [20, 40, 41, 42, 45, 49, 92, 272, 320, 654, 656, 662, 663, 664, 666, 676, 677, 919, 925, 1053, 1228, 1230, 1236, 1237, 1238, 1240, 1250, 1251, 1285, 1310, 1320, 1333, 1334, 1338], "compat_level": [41, 42, 272, 320, 1285, 1310], "compatibleframetyp": [1321, 1323, 1338], "compatlevel": [41, 42, 272, 320, 1285, 1310], "competit": [607, 805, 1187, 1310], "compil": [56, 350, 351, 512, 513, 949, 950, 1121, 1122], "complement": 925, "complet": [135, 137, 149, 1339], "complex": [166, 389, 390, 407, 712, 713, 805, 987, 1010, 1295, 1310], "compliant": [40, 320, 447, 1053], "compon": [419, 443, 447, 690, 693, 751, 1021, 1049, 1053, 1264, 1267], "compos": 1339, "composit": [81, 1341], "compound": [129, 255, 320, 925], "comprehens": 163, "compress": [35, 41, 42, 45, 47, 49, 320, 615, 805, 919, 1195, 1310], "compression_level": [45, 49, 320, 919], "comput": [57, 59, 95, 197, 210, 226, 245, 279, 285, 299, 312, 320, 328, 337, 338, 339, 340, 341, 342, 359, 360, 361, 366, 367, 371, 395, 398, 399, 400, 403, 404, 405, 406, 412, 460, 463, 464, 465, 466, 468, 505, 529, 530, 531, 532, 536, 537, 538, 539, 543, 549, 550, 551, 552, 577, 597, 598, 603, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 644, 645, 646, 647, 651, 709, 710, 718, 723, 725, 728, 729, 730, 737, 739, 752, 771, 781, 782, 795, 805, 826, 844, 847, 849, 850, 883, 891, 895, 908, 919, 930, 936, 937, 938, 939, 940, 941, 958, 959, 960, 965, 966, 970, 995, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1014, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1114, 1138, 1139, 1140, 1141, 1145, 1146, 1147, 1148, 1152, 1158, 1159, 1160, 1161, 1169, 1180, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1219, 1220, 1221, 1222, 1225, 1283, 1284, 1292, 1299, 1310, 1332, 1335], "computeerror": [567, 695, 1269], "concat": [50, 89, 90, 98, 136, 226, 320, 850, 891, 919, 997, 1089, 1170, 1188, 1310, 1331], "concat_list": [519, 752], "concat_w": [267, 320, 784, 878, 919, 1331, 1338], "concaten": [50, 59, 89, 90, 204, 244, 320, 601, 653, 669, 734, 735, 736, 805, 863, 919, 997, 1170, 1227, 1243, 1310, 1333], "concatmethod": 59, "conclus": [126, 128, 320, 919], "concret": [165, 169], "condit": [40, 194, 202, 227, 253, 320, 473, 493, 659, 684, 731, 755, 795, 805, 841, 851, 919, 1099, 1310, 1326, 1331, 1337], "conditional_format": [40, 320], "conditionalformatdict": [40, 320], "config": [0, 51, 189, 258, 277, 294, 320, 655, 665, 667, 678, 746, 747, 749, 750, 751, 817, 826, 831, 870, 889, 919, 1229, 1241, 1252], "configur": [5, 32, 39, 139, 150, 151, 174, 320, 323, 818, 826, 894, 919, 1310, 1315], "configure_axisx": [320, 323, 1310, 1315], "configure_point": [320, 323, 1310, 1315], "conflat": [493, 805], "conform": 1341, "confus": [97, 332, 500, 501, 678, 805], "conjunct": [40, 89, 137, 140, 146, 163, 320, 761, 764, 919], "conn": 137, "connect": [37, 38, 41, 45, 46, 47, 48, 49, 69, 135, 137, 138, 141, 143, 145, 147, 149, 152, 153, 154, 155, 320, 818, 919], "connectionorcursor": [38, 137, 320], "connector": 138, "connectorx": [137, 138, 157], "consecut": [201, 320, 372, 472, 478, 653, 669, 676, 805, 840, 919, 1081, 1227, 1243, 1251, 1310], "consid": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 89, 90, 132, 135, 136, 137, 145, 147, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 181, 193, 194, 196, 222, 227, 230, 236, 254, 267, 277, 282, 283, 285, 287, 288, 289, 320, 323, 324, 390, 397, 407, 408, 442, 477, 488, 555, 556, 563, 579, 580, 583, 585, 587, 588, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 713, 734, 741, 755, 781, 782, 801, 805, 821, 826, 827, 834, 835, 837, 851, 859, 878, 882, 883, 885, 886, 902, 919, 925, 990, 994, 999, 1010, 1011, 1048, 1070, 1095, 1164, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1212, 1289, 1294, 1310, 1315, 1320], "consider": 132, "consist": [210, 243, 278, 320, 690, 746, 747, 844, 919, 925, 934, 1078, 1264, 1291, 1310], "consola": [40, 320], "const": 10, "constant": [197, 252, 320, 416, 464, 470, 805, 868, 919, 1018, 1071, 1073, 1079, 1310], "constrain": [51, 149, 193, 194, 320, 834, 835, 919, 925], "constraint": [202, 320, 473, 580, 581, 583, 585, 587, 588, 795, 805, 841, 919, 925], "construct": [50, 89, 90, 97, 122, 124, 125, 126, 127, 128, 129, 132, 137, 320, 479, 777, 780, 796, 801, 805, 832, 919, 990, 1310, 1325], "construct_categor": 50, "constructor": [132, 140, 169], "contain": [5, 37, 38, 39, 40, 46, 51, 56, 93, 124, 127, 129, 137, 138, 139, 147, 150, 151, 154, 164, 165, 167, 169, 181, 186, 193, 194, 195, 211, 219, 224, 241, 277, 278, 282, 283, 289, 301, 320, 332, 334, 357, 376, 379, 410, 485, 497, 526, 556, 653, 655, 659, 662, 664, 666, 669, 671, 683, 684, 700, 722, 723, 724, 725, 736, 767, 805, 821, 829, 832, 834, 835, 836, 845, 864, 882, 886, 897, 919, 923, 925, 932, 933, 956, 1091, 1092, 1135, 1170, 1227, 1229, 1233, 1236, 1238, 1240, 1243, 1245, 1257, 1258, 1274, 1285, 1291, 1310, 1328], "contains_with_expr": 373, "contains_with_lit": 373, "content": [13, 643, 805, 1218, 1310], "context": [50, 89, 90, 171, 241, 267, 320, 330, 473, 519, 555, 556, 567, 649, 650, 718, 738, 754, 757, 763, 764, 767, 776, 780, 783, 804, 805, 816, 817, 878, 891, 919, 1128, 1299, 1310, 1325, 1338, 1340], "contigu": [59, 122, 127, 135, 136, 139, 141, 143, 145, 147, 149, 150, 152, 153, 154, 248, 278, 320], "continu": [135, 408, 604, 647, 805, 1011, 1185, 1222, 1310, 1327], "contrast": 751, "control": [10, 11, 40, 58, 59, 140, 163, 165, 266, 267, 277, 320, 612, 650, 784, 805, 826, 827, 837, 877, 878, 894, 916, 919, 1192, 1289, 1310, 1322, 1325, 1338], "conveni": [199, 282, 320, 911, 934, 1078, 1310, 1320], "convers": [123, 140, 178, 223, 224, 254, 255, 274, 278, 279, 320, 420, 690, 692, 693, 697, 817, 1022, 1264, 1266, 1267, 1271, 1291, 1292, 1310, 1336, 1338], "convert": [39, 93, 123, 127, 139, 140, 146, 150, 178, 255, 273, 274, 275, 276, 277, 278, 279, 281, 282, 320, 368, 369, 409, 420, 444, 447, 546, 547, 555, 581, 606, 664, 690, 692, 693, 694, 695, 697, 702, 805, 919, 923, 967, 968, 993, 1022, 1050, 1053, 1155, 1156, 1238, 1264, 1266, 1267, 1268, 1269, 1271, 1277, 1280, 1288, 1289, 1290, 1291, 1292, 1294, 1310, 1333, 1335, 1336, 1338], "convert_time_zon": [441, 1047], "coo": [249, 320, 866, 919], "coord": 705, "coordin": [40, 320], "copi": [36, 122, 123, 134, 176, 178, 183, 184, 224, 272, 278, 279, 294, 320, 470, 805, 824, 825, 889, 919, 927, 998, 1000, 1079, 1285, 1290, 1291, 1292, 1310, 1338], "corasick": [655, 665, 667, 678, 1229, 1239, 1241, 1252], "core": [1, 227, 320, 851, 919, 1338, 1341], "cores_right": [227, 320, 851, 919], "corner": [20, 40, 129, 320], "corr": 320, "corrcoef": [187, 320], "correct": [140, 146, 465, 466, 505, 547, 629, 647, 805, 855, 919, 923, 1074, 1075, 1114, 1203, 1222, 1310], "correctli": [40, 320, 555, 805], "correl": [187, 320, 737, 781], "correlationmethod": 737, "correspond": [211, 226, 252, 278, 290, 320, 390, 428, 437, 442, 455, 556, 607, 617, 620, 622, 624, 626, 628, 631, 633, 635, 713, 746, 747, 749, 750, 792, 793, 805, 826, 845, 850, 868, 919, 1030, 1043, 1048, 1061, 1187, 1310, 1327], "cosd": 1331, "cosh": [805, 1310], "cosin": [337, 338, 398, 399, 555, 805, 936, 937, 1001, 1002, 1310, 1335], "cost": [227, 255, 320, 676, 851, 919, 1251], "cost_usd": [676, 1251], "cot": [805, 1310, 1331], "cotang": [400, 805, 1003, 1310, 1335], "cotd": 1331, "could": [39, 87, 95, 320, 644, 741, 751, 755, 805, 823, 831, 919, 1219, 1310], "count": [40, 155, 180, 189, 211, 241, 242, 252, 284, 290, 296, 311, 320, 336, 353, 362, 402, 415, 464, 488, 508, 516, 528, 533, 556, 579, 595, 617, 620, 622, 624, 626, 628, 631, 633, 635, 656, 716, 718, 726, 732, 740, 764, 775, 805, 820, 831, 845, 862, 868, 892, 907, 919, 925, 935, 952, 961, 1005, 1012, 1017, 1073, 1095, 1117, 1125, 1137, 1142, 1171, 1179, 1230, 1297, 1299, 1310, 1315, 1319, 1331], "count_digit": 656, "count_num": [40, 320], "counterpart": 132, "countri": [226, 320, 416, 850, 919, 1018], "country_holidai": [415, 732, 1017], "covari": [739, 782, 805, 923], "cover": 10, "cow": [674, 675, 1248, 1249], "cpu": [135, 136, 157, 277, 320, 826, 894, 919, 1289, 1310], "crab": [654, 666, 1228, 1240], "crate": [37, 46, 93, 320, 654, 656, 662, 663, 664, 666, 676, 677, 690, 692, 693, 697, 919, 925, 1228, 1230, 1236, 1237, 1238, 1240, 1250, 1251, 1264, 1266, 1267, 1271], "creat": [38, 40, 50, 90, 122, 126, 128, 135, 136, 137, 138, 141, 143, 147, 150, 151, 163, 164, 165, 166, 167, 168, 169, 170, 174, 183, 184, 211, 242, 245, 252, 277, 278, 290, 294, 297, 320, 323, 324, 419, 442, 455, 464, 547, 555, 608, 617, 620, 622, 624, 626, 628, 631, 633, 635, 735, 745, 746, 747, 748, 749, 750, 751, 791, 792, 793, 801, 805, 824, 825, 831, 837, 845, 868, 889, 893, 919, 924, 998, 1000, 1011, 1021, 1048, 1061, 1073, 1177, 1185, 1188, 1289, 1291, 1310, 1315, 1337, 1338, 1341], "create_async_engin": 137, "create_engin": [38, 320], "creation": 136, "credenti": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 817, 919], "credential_provid": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "credentialproviderfunct": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "cross": [225, 320, 849, 919, 1326], "crustacean": [666, 1240], "cst": [442, 455, 1048, 1061], "csv": [36, 37, 46, 47, 48, 49, 134, 135, 136, 140, 149, 320, 817, 919], "csvencod": [135, 136, 149], "csvquotestyl": [37, 46, 320, 919], "ctx": [1319, 1321, 1322, 1323, 1324, 1325, 1338], "cube": [1, 55, 395, 602, 805, 995, 1310, 1332], "cuda": 894, "cum_count": [805, 1310], "cum_count_revers": [402, 805], "cum_max": [805, 1310], "cum_max_all_fil": [403, 805], "cum_max_revers": [403, 805], "cum_min": [805, 1310], "cum_min_revers": [404, 805], "cum_prod": [329, 805, 1310], "cum_prod_revers": [405, 805], "cum_reduc": 741, "cum_sum": [490, 597, 706, 744, 805, 847, 919, 1113, 1310], "cum_sum_revers": [406, 805], "cumsum_horizont": 743, "cumul": [402, 403, 404, 405, 406, 740, 741, 742, 743, 744, 805, 1005, 1006, 1007, 1008, 1009, 1310], "cumulative_ev": [805, 1310], "cumulative_sal": [597, 805], "current": [2, 3, 5, 6, 30, 37, 38, 41, 45, 46, 47, 48, 49, 129, 137, 138, 145, 147, 149, 152, 153, 154, 162, 163, 165, 166, 167, 168, 169, 170, 183, 184, 191, 225, 226, 249, 267, 277, 282, 320, 323, 324, 424, 547, 598, 805, 824, 825, 833, 849, 850, 866, 878, 894, 919, 925, 998, 1000, 1018, 1026, 1180, 1289, 1294, 1310, 1315, 1322, 1338], "cursor": [38, 137, 320], "custom": [1, 27, 39, 40, 52, 53, 54, 55, 96, 168, 170, 189, 230, 245, 306, 320, 369, 415, 444, 447, 547, 555, 556, 618, 718, 732, 766, 767, 805, 831, 855, 902, 919, 968, 1017, 1050, 1053, 1156, 1164, 1197, 1299, 1310, 1341], "customis": [40, 320], "cut": [604, 805, 1185, 1310], "cxx": 1333, "cypher": 137, "d": [28, 35, 37, 39, 40, 41, 42, 45, 125, 155, 179, 202, 209, 211, 212, 213, 216, 225, 229, 271, 272, 282, 288, 292, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 329, 331, 402, 425, 444, 447, 493, 562, 601, 642, 656, 663, 676, 677, 682, 690, 692, 693, 733, 734, 751, 757, 784, 805, 841, 845, 849, 878, 898, 900, 903, 904, 905, 906, 907, 908, 909, 919, 925, 993, 1005, 1027, 1050, 1053, 1099, 1123, 1230, 1237, 1250, 1251, 1256, 1264, 1266, 1267, 1278, 1310, 1326, 1328, 1330, 1333, 1334], "d1": [40, 320, 419], "d2": 419, "d3": 419, "d789": [40, 320], "d_4": [682, 1256], "dai": [65, 66, 82, 211, 224, 226, 252, 290, 320, 323, 415, 434, 435, 437, 438, 440, 442, 444, 447, 448, 455, 457, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 732, 745, 746, 747, 748, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 925, 1017, 1040, 1041, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1061, 1063, 1073, 1310, 1334], "dark": 1319, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 64, 65, 66, 68, 78, 79, 81, 82, 90, 93, 97, 99, 102, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 176, 178, 184, 185, 195, 198, 199, 209, 210, 211, 223, 224, 225, 228, 230, 243, 244, 248, 253, 254, 255, 257, 261, 264, 272, 277, 278, 279, 282, 284, 294, 298, 318, 320, 324, 332, 333, 334, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 354, 357, 359, 360, 361, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 391, 392, 393, 394, 397, 398, 399, 400, 401, 408, 409, 410, 415, 416, 417, 418, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 469, 480, 482, 483, 484, 488, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 507, 508, 512, 513, 515, 520, 526, 528, 535, 546, 548, 554, 556, 591, 592, 596, 597, 604, 606, 607, 610, 611, 612, 613, 615, 616, 620, 622, 624, 626, 628, 631, 633, 635, 636, 638, 640, 645, 646, 647, 653, 656, 657, 658, 661, 662, 663, 664, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 690, 691, 692, 693, 695, 697, 700, 709, 710, 711, 714, 715, 718, 721, 727, 735, 738, 745, 746, 747, 748, 749, 750, 751, 761, 762, 764, 765, 766, 767, 777, 780, 791, 792, 793, 796, 801, 805, 817, 824, 825, 826, 827, 832, 836, 838, 844, 845, 869, 873, 889, 919, 924, 927, 932, 933, 945, 947, 948, 949, 950, 951, 953, 955, 956, 967, 969, 971, 972, 973, 975, 976, 988, 989, 991, 992, 998, 999, 1000, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1073, 1077, 1078, 1095, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1119, 1120, 1121, 1122, 1124, 1129, 1135, 1137, 1144, 1155, 1157, 1164, 1178, 1185, 1187, 1191, 1192, 1193, 1195, 1196, 1207, 1209, 1217, 1222, 1227, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1254, 1255, 1256, 1257, 1264, 1265, 1266, 1267, 1269, 1271, 1274, 1285, 1290, 1291, 1292, 1293, 1296, 1309, 1310, 1319, 1326, 1333, 1338, 1340], "data_bar": [40, 320], "data_bar_2010": [40, 320], "data_label": [40, 320], "data_page_s": [45, 49, 320, 919], "databas": [38, 121, 137, 138, 320, 817], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 77, 94, 97, 98, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 158, 159, 162, 163, 174, 318, 319, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 801, 805, 817, 826, 827, 829, 831, 833, 836, 838, 842, 845, 849, 850, 851, 852, 853, 855, 859, 860, 864, 867, 869, 876, 878, 883, 884, 885, 886, 888, 891, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 919, 924, 925, 1011, 1012, 1047, 1073, 1095, 1164, 1185, 1241, 1245, 1256, 1257, 1280, 1286, 1287, 1299, 1310, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1341], "dataframeplot": [320, 323], "dataload": [282, 320], "datapoint": [211, 320, 845, 919], "dataset": [14, 45, 69, 135, 136, 139, 140, 146, 149, 150, 155, 225, 282, 320, 505, 805, 817, 849, 855, 919, 1114, 1310, 1339], "datat": [40, 320], "datatyp": [37, 46, 122, 124, 125, 126, 128, 130, 142, 144, 145, 147, 148, 153, 154, 166, 167, 169, 195, 204, 320, 391, 467, 642, 711, 734, 753, 765, 801, 805, 817, 836, 919, 924, 925, 988, 1012, 1066, 1164, 1216, 1293, 1310, 1336], "date": [16, 40, 51, 66, 135, 136, 138, 140, 146, 147, 149, 152, 154, 155, 182, 189, 209, 211, 224, 226, 252, 267, 320, 323, 352, 415, 417, 418, 419, 420, 423, 425, 427, 428, 430, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 515, 597, 617, 620, 622, 624, 626, 628, 631, 633, 635, 690, 692, 711, 732, 746, 747, 749, 750, 757, 765, 791, 805, 823, 831, 845, 850, 868, 919, 925, 951, 1017, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1073, 1124, 1173, 1174, 1264, 1266, 1293, 1310, 1331, 1334, 1336], "date32": [224, 320], "date_format": [37, 46, 320, 919], "date_min": 437, "date_minus_1y_2mon": 1043, "date_part": 1331, "date_plus_1i": [437, 1043], "date_rang": [226, 290, 320, 423, 425, 438, 446, 457, 749, 750, 850, 919, 1025, 1039, 1044, 1045, 1062, 1063], "date_right": [226, 320, 850, 919], "datetim": [16, 37, 40, 46, 51, 93, 129, 139, 147, 150, 152, 154, 165, 166, 167, 169, 182, 189, 209, 211, 224, 226, 252, 267, 290, 320, 323, 352, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 515, 564, 597, 617, 620, 622, 624, 626, 628, 631, 633, 635, 690, 693, 711, 732, 745, 746, 747, 749, 750, 751, 757, 765, 792, 793, 805, 823, 831, 845, 850, 868, 919, 924, 925, 951, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1073, 1124, 1173, 1174, 1264, 1267, 1291, 1293, 1310, 1333, 1334], "datetime_format": [37, 46, 320, 919], "datetime_rang": [211, 320, 417, 420, 434, 435, 437, 441, 442, 448, 449, 450, 451, 452, 453, 454, 455, 458, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 805, 845, 919, 1018, 1019, 1022, 1026, 1027, 1028, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061], "datetime_str": 444, "datetimeindex": 127, "david": 1339, "day_nam": [444, 447], "day_of_month": [423, 438, 457], "day_of_year": [423, 438, 457], "daylight": [211, 226, 252, 290, 320, 416, 424, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 1026, 1043, 1048, 1061], "dayofweek": 1334, "dayofyear": 1334, "days_diff": 448, "db": [38, 137, 138, 320], "dbapi2": 137, "dbc": [656, 1230], "dbreadengin": 138, "dbwriteengin": [38, 320], "dbwritemod": [38, 320], "dd": [40, 320, 1333], "ddd": [1, 40, 320, 701, 703, 704], "dddd": 1333, "ddof": [268, 291, 320, 366, 371, 543, 549, 630, 631, 634, 635, 652, 719, 737, 739, 781, 782, 786, 794, 805, 879, 887, 919, 965, 970, 1152, 1158, 1204, 1206, 1226, 1300, 1310], "ddww": 1333, "de": 1333, "deal": [45, 49, 223, 320, 332, 334, 440, 441, 607, 690, 693, 722, 723, 724, 725, 748, 805, 919, 932, 933, 1046, 1047, 1187, 1264, 1267, 1310], "debug": [29, 855, 919, 1341], "decad": [1319, 1334], "decai": [463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310], "decemb": [447, 1053], "decim": [9, 10, 11, 27, 28, 37, 40, 46, 135, 136, 149, 320, 324, 636, 694, 805, 919, 925, 1207, 1268, 1310, 1332], "decimal_comma": [135, 136, 149], "decimal_separ": [9, 27], "declar": [122, 124, 125, 126, 128, 137, 144, 145, 153, 277, 282, 320, 919, 925, 1319], "decod": [135, 136, 670], "decompos": [286, 320, 884, 919], "decompress": [45, 47, 49, 320, 919], "decor": [50, 52, 53, 54, 55, 165, 169, 230, 320, 556, 805, 816, 817, 1164, 1310], "dedic": [1, 123, 223, 254, 320, 925, 1338], "deem": [189, 320, 831, 919], "deepcopi": [183, 320, 824, 919, 998, 1310], "def": [1, 50, 52, 53, 54, 55, 137, 163, 165, 169, 174, 244, 284, 320, 329, 601, 660, 663, 687, 721, 766, 805, 827, 863, 919, 925, 1234, 1237, 1341], "default": [4, 5, 9, 10, 14, 27, 30, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 57, 58, 59, 63, 66, 67, 68, 122, 124, 125, 126, 127, 128, 129, 135, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 174, 189, 190, 193, 194, 197, 206, 210, 211, 212, 223, 225, 226, 234, 236, 243, 245, 252, 253, 254, 255, 256, 260, 263, 267, 268, 270, 275, 277, 278, 282, 285, 287, 288, 289, 291, 296, 305, 320, 331, 332, 334, 357, 364, 369, 377, 408, 410, 415, 440, 441, 447, 460, 462, 463, 465, 466, 486, 522, 526, 535, 540, 541, 543, 547, 549, 550, 555, 563, 564, 567, 570, 589, 590, 592, 597, 598, 604, 607, 611, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 643, 652, 653, 662, 669, 680, 685, 686, 687, 690, 692, 693, 695, 697, 718, 719, 722, 724, 727, 731, 732, 736, 737, 739, 746, 747, 748, 749, 750, 751, 754, 757, 761, 762, 763, 765, 771, 777, 780, 783, 786, 787, 789, 792, 793, 794, 796, 805, 826, 827, 831, 832, 834, 835, 837, 844, 845, 849, 850, 859, 868, 872, 874, 878, 879, 883, 885, 886, 887, 892, 894, 901, 919, 925, 932, 933, 956, 963, 968, 975, 999, 1011, 1012, 1017, 1046, 1047, 1053, 1067, 1071, 1072, 1074, 1075, 1093, 1131, 1135, 1144, 1149, 1150, 1156, 1173, 1174, 1180, 1185, 1187, 1191, 1192, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1209, 1215, 1218, 1226, 1227, 1228, 1236, 1240, 1243, 1254, 1259, 1260, 1261, 1264, 1266, 1267, 1269, 1271, 1289, 1291, 1299, 1300, 1310, 1332, 1341], "default_match": [654, 666], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [255, 320], "defer": [174, 320, 323, 324, 1310, 1315], "defin": [37, 40, 46, 66, 69, 137, 144, 162, 163, 165, 182, 193, 194, 198, 211, 230, 241, 244, 252, 289, 306, 320, 394, 493, 522, 556, 601, 604, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 668, 673, 680, 691, 698, 746, 747, 749, 750, 767, 787, 792, 793, 805, 823, 834, 835, 838, 845, 863, 868, 886, 902, 919, 924, 925, 992, 1099, 1131, 1164, 1185, 1196, 1242, 1247, 1254, 1265, 1272, 1310], "definit": [40, 320, 505, 805, 924, 925, 1114, 1310], "deflat": [35, 320], "deg": 1335, "degre": [268, 291, 320, 543, 549, 606, 630, 631, 634, 635, 652, 719, 729, 739, 781, 782, 786, 794, 805, 879, 887, 919, 1204, 1206, 1226, 1300, 1310, 1331], "delet": [69, 1326, 1340], "delimit": [44, 46, 145, 153, 245, 275, 320, 653, 669, 919, 1227, 1243, 1286, 1310], "delta": [39, 139, 150, 268, 291, 320, 543, 549, 630, 631, 634, 635, 652, 719, 739, 781, 782, 786, 794, 805, 817, 879, 887, 919, 1204, 1206, 1226, 1300, 1310], "delta_merge_opt": [39, 320], "delta_table_opt": [139, 150], "delta_write_opt": [39, 320], "deltalak": [39, 139, 150, 157, 320], "deltat": [39, 139, 150, 320], "demo": [40, 320], "demonstr": [135, 477, 805, 925], "dens": [20, 209, 320, 607, 805, 1187, 1310], "densiti": [1310, 1315], "depend": [45, 50, 56, 90, 137, 140, 146, 157, 179, 320, 350, 351, 512, 513, 556, 567, 604, 607, 751, 754, 757, 763, 805, 929, 949, 950, 1121, 1122, 1185, 1187, 1310, 1341], "deploi": [165, 169], "deprec": [39, 135, 136, 162, 163, 164, 165, 169, 172, 180, 236, 278, 296, 301, 320, 422, 458, 479, 574, 611, 653, 661, 720, 729, 737, 738, 805, 820, 837, 859, 872, 885, 891, 892, 897, 919, 1024, 1032, 1033, 1064, 1092, 1191, 1227, 1235, 1291, 1310], "depth": 132, "desc": [925, 1319, 1322, 1326, 1328], "descend": [51, 261, 266, 320, 345, 365, 542, 607, 640, 649, 650, 718, 730, 805, 873, 877, 919, 944, 964, 1111, 1151, 1187, 1213, 1224, 1299, 1310], "describ": [165, 209, 320, 919, 1310], "descript": [211, 320, 845, 919, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1339, 1340], "deseri": [132, 260, 320, 479, 570, 805, 872, 919], "deserializ": [190, 260, 320, 410, 570, 805, 832, 872, 919], "design": [277, 282, 320], "desir": [165, 225, 320, 369, 458, 547, 849, 919, 968, 1064, 1156], "destin": 138, "detail": [56, 123, 137, 138, 158, 160, 178, 211, 320, 447, 711, 805, 845, 894, 919, 1053, 1293, 1310, 1341], "determin": [14, 37, 40, 46, 51, 59, 87, 132, 135, 136, 137, 140, 146, 147, 149, 154, 156, 181, 185, 204, 211, 223, 224, 230, 252, 283, 284, 290, 320, 390, 427, 440, 441, 488, 547, 567, 604, 610, 612, 647, 655, 668, 690, 691, 693, 694, 713, 748, 777, 780, 796, 805, 821, 828, 829, 836, 845, 868, 882, 888, 919, 1029, 1046, 1047, 1095, 1156, 1185, 1191, 1192, 1222, 1229, 1264, 1267, 1268, 1310], "dev": [177, 928, 1204, 1310], "develop": [138, 165, 169], "deviat": [268, 320, 465, 630, 631, 652, 786, 805, 879, 919, 1074, 1226, 1310, 1327], "devic": [277, 320, 826, 894, 919, 1289, 1310], "devicememoryresourc": 894, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 77, 94, 98, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 149, 162, 163, 165, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 801, 805, 845, 868, 884, 886, 899, 902, 910, 919, 925, 1047, 1073, 1241, 1245, 1256, 1257, 1287, 1310, 1315, 1319, 1320, 1321, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1341], "df0": [237, 320, 860, 919, 1325], "df1": [51, 59, 158, 159, 196, 199, 237, 267, 292, 320, 860, 919, 1322, 1324, 1325, 1326, 1338], "df2": [51, 59, 158, 159, 196, 199, 292, 320, 1322, 1324, 1325, 1326, 1338], "df3": [51, 320], "df4": 320, "df5": 320, "df6": 320, "df_a": 1338, "df_a1": 59, "df_a2": 59, "df_a3": 59, "df_agg_nuniqu": [241, 320], "df_b": 1338, "df_current_batch": 136, "df_d1": 59, "df_d2": 59, "df_from_str_repr": [276, 320], "df_h1": 59, "df_h2": 59, "df_new_grid": [491, 805], "df_nuniqu": [241, 320], "df_original_grid": [491, 805], "df_panda": 1320, "df_pd": 123, "df_tempor": [620, 622, 624, 626, 628, 631, 633, 635, 805], "dfi": [123, 178], "diagon": [59, 284, 320], "diagonal_relax": 59, "dict": [30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 56, 122, 124, 125, 126, 127, 128, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 165, 203, 223, 243, 249, 253, 254, 255, 273, 274, 277, 282, 284, 320, 805, 866, 919, 923, 924, 925, 1084, 1310, 1323], "dictat": [437, 805, 923, 1043], "dictionari": [30, 37, 40, 41, 45, 46, 47, 48, 49, 56, 81, 122, 124, 125, 126, 128, 132, 135, 136, 137, 138, 142, 144, 145, 147, 148, 149, 152, 153, 154, 223, 243, 253, 254, 255, 273, 274, 277, 282, 320, 919, 924], "did": [416, 1018], "diff": [294, 320, 448, 449, 450, 451, 452, 453, 454, 536, 805, 889, 919, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1145, 1310], "differ": [40, 45, 93, 96, 117, 135, 140, 155, 158, 160, 174, 193, 199, 211, 212, 223, 225, 245, 252, 254, 255, 274, 277, 278, 284, 320, 411, 423, 437, 438, 441, 447, 456, 462, 477, 486, 517, 536, 538, 547, 556, 589, 590, 592, 597, 611, 612, 690, 716, 754, 757, 763, 805, 834, 835, 837, 845, 849, 868, 919, 925, 993, 1013, 1025, 1043, 1044, 1047, 1053, 1062, 1069, 1078, 1093, 1126, 1145, 1147, 1164, 1173, 1174, 1176, 1191, 1192, 1264, 1310, 1334, 1336, 1338], "digit": [67, 601, 636, 637, 663, 805, 925, 1207, 1208, 1230, 1237, 1310, 1341], "dimens": [122, 124, 126, 128, 144, 145, 153, 320, 613, 805, 919, 1193, 1291, 1310], "dimension": [124, 126, 128, 278, 320, 919, 1310], "direct": [40, 138, 147, 151, 154, 263, 277, 288, 320, 364, 540, 641, 805, 874, 919, 963, 1149, 1215, 1310], "directli": [6, 30, 40, 58, 137, 165, 169, 174, 255, 277, 320, 463, 465, 466, 612, 780, 805, 827, 919, 1072, 1074, 1075, 1192, 1289, 1310, 1322, 1338, 1341], "directori": [40, 45, 147, 149, 152, 154, 320, 923], "dirpath": [35, 37, 41, 42, 45, 149, 320], "disabl": [45, 49, 50, 89, 90, 147, 152, 166, 223, 320, 826, 919], "disable_string_cach": 90, "disallow": 165, "discard": [202, 320, 473, 805, 841, 919, 1082, 1310], "disco": [665, 667, 1239, 1241], "discont": [665, 667, 1239, 1241], "discourag": [556, 805], "discoveri": [245, 320], "discret": [408, 411, 460, 488, 517, 536, 604, 805, 1011, 1013, 1067, 1095, 1126, 1145, 1185, 1310], "disk": [45, 46, 47, 48, 49, 141, 320, 571, 875, 919], "dispatch": 925, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 40, 189, 209, 320, 831, 837, 919], "distanc": [226, 320, 488, 805, 850, 919, 1095, 1310], "distinct": [40, 169, 243, 245, 298, 320, 370, 496, 499, 548, 607, 616, 751, 805, 969, 1103, 1106, 1157, 1187, 1196, 1310, 1327, 1337, 1339, 1341], "distinct_count": [45, 49, 320, 919], "distinguish": [447, 1053], "distribut": [505, 647, 805, 1114, 1222, 1310], "div": 1331, "divid": [20, 408, 442, 455, 463, 465, 466, 477, 505, 604, 805, 1011, 1048, 1061, 1072, 1074, 1075, 1114, 1185, 1310, 1327, 1332], "divis": [477, 714, 805, 1332], "divisor": [268, 291, 320, 543, 549, 630, 631, 634, 635, 652, 719, 739, 781, 782, 786, 794, 805, 879, 887, 919, 1204, 1206, 1226, 1300, 1310], "dl": [282, 320], "do": [1, 40, 46, 47, 48, 49, 51, 57, 58, 124, 125, 128, 135, 147, 149, 154, 158, 159, 160, 161, 179, 189, 191, 199, 222, 225, 226, 245, 249, 272, 284, 288, 320, 323, 407, 415, 519, 555, 676, 677, 685, 686, 687, 737, 777, 780, 796, 805, 822, 826, 827, 831, 833, 837, 849, 850, 855, 864, 866, 875, 894, 919, 925, 1010, 1017, 1078, 1128, 1250, 1251, 1259, 1260, 1261, 1294, 1310, 1315], "do_polars_oper": 29, "do_someth": 137, "do_various_th": 174, "doc": [39, 41, 42, 138, 141, 143, 158, 160, 176, 177, 187, 320, 927, 928], "document": [32, 93, 138, 176, 320, 324, 444, 447, 671, 690, 692, 693, 697, 801, 894, 927, 993, 1050, 1053, 1245, 1264, 1266, 1267, 1271], "doe": [10, 37, 39, 46, 51, 59, 111, 122, 124, 125, 126, 128, 129, 135, 136, 137, 138, 139, 140, 144, 145, 149, 150, 153, 155, 184, 199, 202, 206, 211, 212, 224, 225, 253, 254, 255, 285, 294, 297, 320, 323, 324, 458, 473, 477, 486, 547, 556, 655, 665, 667, 678, 686, 687, 716, 801, 805, 825, 826, 831, 841, 845, 849, 855, 883, 889, 893, 919, 1000, 1064, 1078, 1082, 1093, 1217, 1229, 1239, 1241, 1252, 1310, 1315, 1333], "doesn": [39, 135, 149, 211, 226, 320, 460, 805, 845, 850, 919, 1067, 1310], "dog": [654, 696, 699, 736, 1228, 1270, 1273], "doi": 1334, "dollar": [676, 677, 1250, 1251], "domain": [1, 663, 1237], "don": [59, 211, 226, 230, 285, 288, 320, 407, 519, 556, 597, 805, 845, 850, 883, 919, 925, 1010, 1128, 1164, 1310], "done": [136, 155, 174, 180, 226, 320, 335, 336, 597, 805, 820, 823, 850, 919, 935, 1310], "dot": [51, 571, 801, 805, 875, 919, 1310], "doubl": [279, 320, 676, 677, 1250, 1251], "dow": 1334, "down": [149, 152, 153, 154, 155, 182, 320, 391, 476, 805, 1085, 1310], "download": [145, 149, 152, 153, 571, 875, 919], "downstream": [278, 320, 640, 805, 1213, 1310], "dr": 151, "drago": [668, 1242], "dragon": 668, "dragonfr": 1242, "dragonfruit": [668, 680, 691, 1242, 1254, 1265], "dramat": 140, "draw": [20, 25, 165, 169, 1341], "drawback": 801, "drawfn": 1341, "drawing_charact": 20, "dremio": 137, "driver": [38, 137, 138, 320], "drop": [1, 125, 192, 193, 194, 230, 285, 294, 320, 411, 413, 414, 517, 518, 604, 805, 834, 835, 883, 889, 919, 1013, 1015, 1016, 1126, 1127, 1185, 1310, 1337], "drop_dupl": [285, 320, 883, 919], "drop_empty_col": [140, 146], "drop_empty_row": [140, 146], "drop_first": [275, 320, 1286, 1310], "drop_in_plac": 320, "drop_nan": [320, 414, 805, 919, 1016, 1310], "drop_nul": [320, 413, 805, 919, 1015, 1310], "dset": 155, "dst": [442, 455, 1048, 1061], "dst_offset": [416, 1018], "dt": [1, 40, 51, 140, 146, 252, 320, 617, 751, 805, 814, 868, 919, 925, 1318, 1333, 1334], "dt1": 1333, "dt2": 1333, "dtm": [40, 320, 419, 447, 925, 1021, 1053, 1333], "dtm_iso": 447, "dtm_iso_strict": 447, "dtype": [10, 40, 50, 54, 60, 66, 81, 89, 90, 100, 122, 124, 126, 128, 129, 135, 136, 137, 138, 140, 144, 145, 146, 149, 153, 162, 163, 164, 165, 169, 176, 178, 182, 185, 211, 226, 252, 276, 277, 278, 279, 282, 288, 297, 320, 377, 391, 392, 393, 394, 405, 406, 447, 458, 467, 480, 514, 522, 553, 555, 556, 563, 602, 609, 610, 617, 642, 644, 670, 690, 707, 711, 717, 727, 734, 753, 757, 761, 762, 764, 765, 766, 767, 777, 780, 787, 796, 805, 823, 828, 845, 850, 868, 893, 919, 924, 925, 927, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 975, 988, 989, 990, 991, 992, 993, 998, 1008, 1009, 1012, 1013, 1053, 1064, 1071, 1101, 1119, 1120, 1123, 1131, 1155, 1162, 1164, 1183, 1194, 1216, 1219, 1244, 1264, 1281, 1288, 1289, 1291, 1292, 1293, 1294, 1298, 1310, 1338, 1341], "dtype_format": [40, 320], "dtypekind": 178, "dtypelik": [176, 927], "dtypeoper": [1, 54], "dubiou": 93, "due": [211, 226, 252, 255, 290, 320, 331, 424, 437, 442, 455, 580, 581, 583, 585, 587, 588, 617, 620, 622, 624, 626, 628, 631, 633, 635, 732, 746, 747, 749, 750, 792, 793, 805, 823, 845, 850, 868, 919, 1026, 1043, 1048, 1061], "dummi": [275, 320, 1286, 1310], "duplic": [51, 98, 218, 225, 226, 227, 285, 289, 320, 331, 494, 580, 604, 805, 849, 850, 851, 883, 886, 919, 1100, 1185, 1310, 1339], "duplicateerror": [604, 805, 1185, 1310], "dur": [227, 320, 851, 919], "durat": [174, 226, 290, 320, 416, 424, 447, 448, 449, 450, 451, 452, 453, 454, 458, 464, 711, 746, 747, 749, 750, 792, 793, 805, 850, 919, 924, 925, 1018, 1026, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1073, 1291, 1293, 1310], "dure": [50, 97, 135, 136, 149, 174, 199, 320, 1078, 1310], "dutch": [415, 732, 1017], "dynam": [211, 320, 369, 547, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 805, 845, 919, 923, 968, 1156], "dynamicgroupbi": [211, 320], "e": [10, 35, 37, 39, 41, 42, 45, 46, 123, 132, 135, 141, 143, 147, 152, 154, 155, 167, 190, 202, 209, 213, 222, 229, 271, 272, 278, 288, 320, 329, 410, 460, 464, 467, 493, 550, 556, 561, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 642, 647, 666, 686, 687, 698, 753, 767, 784, 795, 805, 832, 841, 853, 866, 919, 925, 1067, 1073, 1099, 1222, 1240, 1272, 1310, 1328, 1333, 1341], "e101": [40, 320], "e_filt": [567, 569], "e_sum_ov": [567, 569], "e_sum_slic": [567, 569], "each": [37, 40, 46, 51, 60, 67, 77, 136, 137, 140, 145, 153, 158, 159, 160, 161, 163, 186, 188, 195, 202, 209, 210, 211, 224, 226, 230, 243, 245, 252, 254, 256, 277, 282, 286, 289, 290, 298, 299, 301, 303, 305, 306, 314, 320, 345, 390, 393, 394, 408, 442, 455, 473, 496, 499, 525, 528, 535, 545, 552, 556, 604, 607, 615, 616, 623, 627, 638, 643, 650, 663, 667, 668, 672, 673, 680, 682, 683, 691, 698, 713, 727, 730, 736, 761, 762, 787, 795, 805, 826, 829, 830, 836, 841, 845, 850, 864, 868, 884, 886, 895, 897, 899, 901, 902, 910, 919, 944, 991, 992, 997, 1011, 1048, 1061, 1103, 1106, 1134, 1137, 1144, 1154, 1185, 1187, 1195, 1196, 1209, 1218, 1237, 1241, 1242, 1246, 1247, 1254, 1256, 1257, 1265, 1272, 1280, 1310, 1327, 1338, 1339, 1341], "eager": [211, 226, 245, 288, 320, 417, 420, 423, 425, 434, 435, 437, 438, 441, 442, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 620, 622, 624, 626, 628, 631, 633, 635, 727, 731, 746, 747, 749, 750, 757, 761, 762, 777, 780, 783, 784, 787, 792, 793, 796, 804, 805, 845, 850, 855, 919, 924, 1018, 1019, 1022, 1025, 1026, 1027, 1028, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1338], "eagerli": [547, 1319], "ear": [680, 691, 1254], "earlier": [226, 320, 850, 919], "earliest": [211, 320, 440, 441, 690, 693, 748, 845, 911, 919, 1046, 1047, 1264, 1267], "easi": 174, "easiest": 179, "easili": [51, 258, 282, 294, 299, 320, 787, 801, 870, 889, 895, 919], "east": [69, 154, 227, 320, 851, 919], "ebf1d": [40, 320], "eee": [1, 40, 320, 925], "ef": 677, "effect": [40, 204, 211, 320, 424, 477, 556, 582, 584, 586, 737, 805, 845, 892, 893, 919, 1018, 1026], "effici": [123, 137, 222, 224, 320, 555, 805], "efgh": 1333, "eg": [17, 25, 40, 59, 138, 174, 277, 320, 442, 690, 693, 714, 805, 925, 1264, 1267], "egnaro": 1333, "either": [81, 165, 221, 225, 226, 227, 243, 252, 253, 277, 278, 320, 464, 555, 602, 604, 617, 690, 722, 730, 734, 787, 805, 826, 849, 850, 851, 853, 868, 919, 923, 925, 1073, 1183, 1185, 1264, 1310, 1323, 1341], "element": [13, 14, 25, 160, 161, 164, 165, 167, 169, 179, 181, 188, 221, 245, 253, 266, 268, 283, 291, 320, 337, 338, 339, 340, 341, 342, 353, 354, 389, 390, 395, 398, 399, 400, 401, 403, 404, 405, 406, 407, 413, 414, 468, 469, 473, 486, 497, 508, 516, 518, 519, 520, 523, 528, 536, 537, 538, 539, 543, 549, 551, 552, 555, 556, 597, 598, 607, 610, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 639, 644, 645, 646, 650, 651, 652, 682, 683, 694, 709, 710, 712, 713, 719, 730, 739, 781, 782, 786, 794, 805, 821, 830, 877, 879, 882, 887, 919, 936, 937, 938, 939, 940, 941, 952, 953, 987, 995, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1015, 1016, 1076, 1077, 1082, 1083, 1094, 1104, 1113, 1115, 1117, 1118, 1125, 1127, 1128, 1129, 1132, 1137, 1145, 1146, 1147, 1148, 1160, 1161, 1164, 1180, 1187, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1211, 1219, 1220, 1221, 1225, 1226, 1256, 1257, 1268, 1282, 1283, 1284, 1288, 1295, 1296, 1300, 1310, 1327, 1328], "elementwis": [555, 597, 618, 619, 621, 623, 625, 627, 630, 632, 634, 805, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1310], "elif": 795, "elig": [855, 919], "elimin": [505, 805, 1114, 1310], "elis": [237, 320, 860, 919], "ellips": 20, "ellipsi": [209, 320], "elppa": 1333, "els": [136, 795], "email": [663, 1237], "email_part": [663, 1237], "emphas": [320, 324], "emploi": 925, "empti": [13, 35, 37, 46, 102, 125, 135, 136, 140, 146, 149, 183, 184, 211, 236, 287, 320, 653, 661, 765, 783, 824, 825, 845, 859, 885, 919, 924, 925, 998, 1000, 1083, 1101, 1115, 1227, 1235, 1310], "en": [20, 40, 320], "enabl": [28, 29, 45, 49, 50, 89, 90, 139, 147, 150, 152, 154, 158, 159, 160, 161, 173, 176, 258, 279, 294, 320, 332, 334, 611, 612, 640, 655, 665, 667, 678, 718, 801, 805, 826, 870, 889, 919, 927, 932, 933, 1191, 1192, 1213, 1229, 1239, 1241, 1252, 1292, 1299, 1310], "enable_string_cach": 89, "enclos": [479, 805], "encod": [63, 69, 80, 132, 135, 136, 149, 275, 320, 323, 374, 479, 615, 657, 702, 805, 972, 1195, 1231, 1286, 1310, 1315], "encount": [113, 135, 136, 149, 211, 320, 589, 590, 670, 671, 737, 741, 755, 805, 845, 919, 1173, 1174, 1244, 1245, 1310], "end": [37, 40, 46, 135, 136, 149, 211, 245, 320, 373, 376, 379, 416, 442, 467, 541, 654, 659, 663, 668, 674, 680, 684, 685, 686, 689, 727, 732, 745, 746, 747, 748, 749, 750, 753, 761, 762, 792, 793, 795, 801, 805, 845, 864, 919, 925, 974, 1018, 1048, 1111, 1150, 1233, 1237, 1242, 1248, 1254, 1258, 1259, 1260, 1265, 1310, 1333], "endian": [377, 975], "endpoint": [408, 604, 805, 1011, 1185, 1310], "ends_a": 1333, "ends_in_digit": 1333, "ends_with": [373, 379, 654, 684, 925, 1258, 1331], "ends_with_expr": 376, "ends_with_lit": 376, "engin": [14, 38, 137, 138, 140, 146, 171, 210, 225, 230, 278, 285, 306, 320, 555, 784, 805, 826, 844, 849, 855, 859, 883, 894, 902, 916, 919, 1164, 1291, 1310, 1322, 1338], "engine_opt": [38, 140, 320], "enginetyp": [826, 919], "enough": [519, 647, 805, 1128, 1222, 1310], "ensur": [10, 40, 138, 164, 167, 176, 202, 210, 243, 245, 253, 278, 320, 493, 555, 805, 841, 844, 855, 894, 919, 923, 925, 927, 1291, 1310], "enter": 174, "entir": [40, 57, 58, 140, 146, 320, 826, 827, 919], "entri": [174, 320, 919, 924, 1338], "entropi": [805, 1310], "enumer": [69, 127, 135, 136, 140, 146, 149, 224, 320], "env": [4, 170], "env_onli": 30, "environ": [4, 30, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 168, 171, 277, 320, 919], "eol_char": [135, 136, 149], "eparg": 1333, "epoch": [65, 66, 757, 1334], "epoch_": [425, 1027], "epoch_n": [425, 1027], "epochtimeunit": [425, 757, 1027], "eq": [202, 320, 462, 473, 805, 841, 919, 1069, 1310], "eq_miss": [805, 1176, 1310], "equal": [50, 90, 135, 136, 149, 158, 159, 160, 161, 211, 226, 227, 237, 266, 320, 408, 455, 461, 462, 482, 507, 547, 592, 604, 610, 618, 619, 621, 623, 625, 627, 630, 632, 634, 650, 674, 675, 678, 700, 730, 781, 782, 795, 801, 805, 845, 850, 851, 860, 877, 919, 1011, 1048, 1069, 1156, 1176, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1248, 1249, 1252, 1274, 1310, 1327, 1330, 1341], "equival": [40, 122, 124, 125, 126, 128, 144, 145, 153, 211, 221, 241, 320, 329, 333, 394, 461, 462, 464, 477, 482, 484, 507, 554, 576, 578, 591, 592, 593, 596, 602, 673, 696, 698, 699, 706, 714, 721, 805, 845, 919, 992, 1068, 1069, 1073, 1088, 1090, 1113, 1116, 1163, 1175, 1176, 1247, 1270, 1272, 1273, 1310, 1320, 1328], "err": 664, "error": [14, 39, 58, 108, 112, 114, 124, 125, 128, 135, 136, 147, 149, 154, 245, 253, 278, 320, 331, 356, 357, 374, 415, 522, 524, 526, 547, 580, 612, 654, 657, 662, 664, 666, 670, 671, 690, 692, 693, 697, 805, 823, 827, 894, 902, 919, 955, 956, 972, 1017, 1131, 1133, 1135, 1192, 1228, 1231, 1236, 1238, 1240, 1244, 1245, 1264, 1266, 1267, 1271, 1291, 1310, 1336], "escap": [91, 135, 136, 138, 149, 660, 676, 677, 1234, 1250, 1251], "esp": 14, "especi": [163, 616, 805, 919, 1196, 1310], "espresso": 925, "est": 749, "establish": [137, 174], "estim": [135, 136, 180, 197, 320, 336, 465, 466, 505, 726, 805, 820, 919, 935, 1071, 1074, 1075, 1114, 1310], "estimated_s": [320, 1310], "etc": [21, 39, 40, 135, 139, 140, 141, 143, 150, 151, 320, 556, 805, 923, 925, 1210, 1212, 1310, 1334], "eu": [150, 151], "eur": [209, 320, 1341], "europ": [420, 424, 441, 1022, 1026, 1047], "eval": [276, 320, 555, 556, 752, 805, 1164, 1288, 1310], "evalu": [46, 47, 48, 49, 154, 200, 202, 226, 320, 333, 346, 348, 349, 381, 382, 383, 384, 386, 387, 407, 473, 490, 510, 511, 547, 596, 597, 722, 724, 727, 731, 746, 747, 749, 750, 752, 761, 762, 777, 780, 783, 787, 792, 793, 795, 796, 805, 826, 841, 847, 849, 850, 919, 945, 947, 948, 979, 980, 981, 982, 984, 985, 1010, 1082, 1119, 1120, 1301, 1310, 1330], "even": [37, 46, 135, 225, 320, 464, 601, 604, 805, 849, 919, 925, 1073, 1185, 1310], "evenli": [211, 320, 845, 919], "event": [58, 827, 919], "eventu": [38, 320], "ever": [597, 805], "everi": [14, 37, 46, 135, 136, 140, 146, 149, 205, 211, 274, 290, 320, 348, 349, 350, 351, 354, 356, 362, 403, 404, 405, 406, 407, 442, 455, 469, 481, 512, 513, 517, 520, 523, 524, 525, 533, 536, 541, 545, 616, 661, 741, 742, 805, 843, 845, 919, 947, 948, 949, 950, 953, 955, 961, 1006, 1007, 1008, 1009, 1010, 1048, 1061, 1077, 1087, 1121, 1122, 1126, 1129, 1132, 1133, 1134, 1142, 1145, 1150, 1154, 1196, 1235, 1310], "everybodi": [655, 678, 1229, 1252], "everyth": 925, "ew": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "ewm_mean": [805, 1310], "ewm_mean_bi": [805, 1310], "ewm_std": [805, 1310], "ewm_var": [805, 1310], "ewma": [464, 805, 1073, 1310], "exact": [160, 163, 165, 169, 226, 264, 320, 336, 477, 661, 688, 689, 690, 692, 693, 714, 805, 850, 919, 1235, 1264, 1266, 1267], "exactli": [124, 125, 128, 158, 159, 160, 161, 164, 165, 169, 320, 682, 683, 688, 689, 751, 919, 1217, 1256, 1257, 1262, 1263, 1310], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 77, 81, 89, 90, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 923, 924, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340], "exc_tb": 1338, "exc_typ": 1338, "exc_val": 1338, "exce": [209, 320], "excel": [36, 40, 134, 140, 320, 817], "excelread": 140, "excelspreadsheetengin": 140, "except": [0, 191, 206, 213, 226, 229, 249, 271, 320, 612, 668, 691, 753, 805, 817, 833, 850, 866, 919, 925, 988, 1094, 1118, 1192, 1242, 1265, 1282, 1291, 1310, 1337], "exclud": [165, 169, 211, 320, 390, 403, 406, 415, 493, 563, 713, 732, 801, 805, 845, 919, 925, 1017, 1099, 1310], "excluded_dtyp": [165, 166, 169], "exclus": [253, 320, 721, 727, 761, 762, 805], "execut": [39, 50, 59, 137, 138, 228, 267, 320, 410, 519, 718, 784, 805, 822, 826, 832, 855, 864, 878, 894, 919, 923, 1128, 1299, 1310, 1320, 1321, 1322, 1324, 1338, 1340], "execute_glob": 1338, "execute_opt": [137, 138], "exist": [1, 38, 39, 40, 51, 69, 98, 139, 147, 150, 154, 165, 191, 206, 245, 249, 284, 289, 294, 295, 320, 331, 373, 376, 379, 419, 441, 676, 677, 735, 805, 829, 833, 836, 866, 869, 886, 888, 889, 890, 919, 925, 1021, 1047, 1250, 1251, 1340], "existing_t": 1340, "existing_table_path": [39, 320], "exit": [50, 89, 174, 1325, 1338], "exp": [463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310, 1331], "exp_a": 1332, "expand": [135, 147, 149, 154, 469, 561, 565, 610, 704, 805, 923, 925, 1077, 1310], "expand_selector": 925, "expans": 701, "expect": [37, 41, 45, 46, 47, 48, 49, 67, 69, 72, 103, 111, 119, 135, 137, 145, 147, 149, 152, 153, 154, 159, 161, 320, 547, 556, 765, 805, 853, 855, 919], "expens": [135, 136, 145, 147, 149, 153, 154, 168, 170, 223, 230, 253, 254, 255, 284, 285, 320, 556, 805, 829, 831, 836, 869, 883, 888, 919, 1078, 1164, 1310, 1341], "experiment": [227, 282, 320, 851, 889, 919], "expiri": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "explain": [57, 58, 179, 228, 320, 826, 827, 919, 1337], "explainformat": [837, 919], "explicit": [40, 97, 137, 149, 163, 267, 289, 320, 447, 779, 878, 886, 919, 1053], "explicitli": [69, 97, 138, 163, 165, 174, 206, 225, 320, 611, 787, 805, 816, 849, 919, 1338], "explod": [320, 390, 475, 597, 613, 713, 805, 919, 923, 1193, 1310, 1328], "explor": [189, 320, 831, 919], "expon": [602, 805, 1183, 1310, 1332], "exponenti": [463, 464, 465, 466, 468, 602, 805, 1072, 1073, 1074, 1075, 1076, 1310, 1332], "export": [40, 41, 42, 177, 223, 224, 254, 255, 272, 274, 277, 320, 801, 925, 928, 1285, 1310], "expos": 817, "expr": [1, 51, 52, 53, 54, 55, 198, 200, 201, 225, 226, 227, 241, 245, 253, 258, 259, 277, 282, 294, 295, 320, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 805, 806, 807, 810, 811, 812, 813, 814, 838, 839, 840, 849, 850, 851, 865, 870, 871, 889, 890, 919, 923, 925, 1010, 1043, 1068, 1069, 1073, 1080, 1081, 1086, 1088, 1090, 1116, 1128, 1134, 1150, 1154, 1163, 1175, 1176, 1228, 1233, 1240, 1258, 1310, 1336], "expr1": [1330, 1338], "expr2": [1330, 1338], "expr_unique_subset": [241, 320], "express": [0, 8, 46, 47, 48, 49, 57, 58, 162, 165, 169, 181, 198, 200, 202, 210, 216, 225, 226, 230, 241, 245, 253, 258, 259, 263, 266, 277, 282, 283, 294, 295, 297, 299, 306, 320, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 350, 351, 352, 353, 354, 357, 368, 373, 374, 375, 376, 377, 378, 379, 390, 393, 394, 397, 398, 399, 400, 401, 407, 408, 409, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 467, 469, 470, 472, 473, 477, 479, 480, 482, 483, 484, 485, 490, 493, 494, 495, 496, 497, 498, 499, 507, 508, 512, 513, 515, 516, 519, 520, 526, 528, 546, 547, 553, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 578, 580, 581, 583, 585, 587, 588, 591, 592, 594, 596, 597, 601, 602, 603, 604, 606, 610, 611, 612, 613, 615, 616, 638, 639, 640, 643, 645, 646, 648, 650, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 680, 681, 682, 683, 691, 695, 705, 706, 709, 710, 713, 714, 715, 717, 718, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 769, 771, 774, 777, 779, 780, 781, 782, 783, 785, 787, 789, 791, 792, 793, 795, 796, 801, 804, 817, 821, 826, 827, 837, 838, 841, 844, 849, 850, 864, 870, 871, 874, 875, 877, 882, 889, 890, 891, 893, 895, 902, 919, 923, 925, 952, 999, 1010, 1017, 1021, 1053, 1068, 1069, 1073, 1079, 1088, 1090, 1099, 1116, 1125, 1128, 1163, 1164, 1175, 1176, 1191, 1192, 1211, 1215, 1228, 1229, 1230, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1250, 1251, 1252, 1265, 1269, 1310, 1328, 1330, 1332, 1333, 1337], "exprmetanamespac": [560, 566], "ext": 137, "extend": [0, 125, 292, 320, 470, 805, 817, 923, 934, 1079, 1310], "extend_const": [805, 1310], "extens": [279, 320, 1292, 1310], "extern": [891, 919], "extra": [39, 135, 136, 139, 141, 143, 147, 149, 150, 151, 154, 199, 211, 320, 805, 845, 919, 923, 1078, 1310], "extract": [129, 179, 267, 320, 418, 421, 423, 426, 428, 429, 430, 431, 432, 433, 436, 438, 439, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 601, 663, 664, 665, 670, 671, 680, 682, 805, 1020, 1023, 1024, 1025, 1028, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1049, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1237, 1238, 1239, 1244, 1245, 1254, 1331], "extract_mani": [667, 1241], "extract_numb": [601, 805], "extracted_nr": 663, "extrem": [470, 618, 805, 1079, 1197, 1310], "extrema": [642, 805, 1216, 1310], "f": [52, 136, 137, 202, 209, 224, 272, 278, 284, 288, 320, 329, 369, 378, 547, 642, 661, 690, 693, 735, 805, 841, 919, 925, 968, 1156, 1235, 1264, 1267, 1310, 1315, 1328], "f32": [1, 54, 182, 267, 276, 282, 320, 642, 784, 805, 823, 878, 919, 925, 1162, 1310, 1336], "f4": [278, 320], "f5ed2452": [40, 320], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 53, 55, 59, 77, 123, 125, 144, 155, 162, 165, 182, 183, 184, 187, 189, 190, 191, 193, 195, 200, 201, 204, 208, 209, 210, 211, 216, 217, 225, 226, 232, 233, 234, 235, 239, 245, 246, 247, 265, 266, 268, 270, 282, 291, 294, 299, 302, 304, 307, 308, 309, 310, 312, 313, 320, 328, 331, 337, 338, 339, 340, 341, 342, 360, 366, 371, 378, 391, 395, 396, 398, 399, 400, 408, 409, 413, 414, 443, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 476, 477, 482, 484, 491, 492, 500, 501, 502, 503, 505, 507, 519, 530, 531, 543, 549, 550, 551, 552, 554, 557, 558, 559, 575, 578, 580, 589, 590, 591, 592, 598, 602, 604, 605, 606, 607, 611, 612, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 644, 645, 646, 647, 651, 652, 705, 709, 710, 714, 719, 728, 729, 733, 735, 737, 739, 752, 753, 767, 770, 771, 772, 784, 786, 794, 801, 805, 823, 824, 831, 833, 834, 839, 840, 844, 845, 848, 849, 850, 857, 858, 865, 877, 879, 887, 889, 891, 895, 898, 900, 903, 904, 905, 906, 908, 909, 919, 925, 936, 937, 938, 939, 940, 941, 959, 965, 970, 976, 995, 996, 1001, 1002, 1003, 1011, 1012, 1015, 1016, 1049, 1072, 1073, 1074, 1075, 1076, 1080, 1085, 1095, 1097, 1098, 1128, 1139, 1140, 1152, 1158, 1159, 1160, 1161, 1180, 1183, 1185, 1187, 1192, 1197, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1219, 1220, 1221, 1225, 1283, 1284, 1298, 1310, 1319, 1327, 1328, 1332, 1335, 1338, 1341], "f_string": 756, "fa1e": [695, 1269], "face": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "facil": 137, "facilit": [185, 320], "factor": [463, 465, 466, 711, 805, 1072, 1074, 1075, 1293, 1310], "fail": [37, 38, 39, 41, 45, 46, 47, 48, 49, 123, 139, 141, 145, 147, 149, 150, 152, 153, 154, 178, 278, 285, 320, 346, 445, 547, 690, 692, 693, 697, 805, 883, 919, 1164, 1264, 1266, 1267, 1271, 1291, 1310, 1336], "fall": [154, 408, 604, 805, 826, 894, 919, 1011, 1185, 1310, 1327], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 123, 124, 125, 127, 128, 129, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 181, 182, 183, 184, 189, 196, 204, 208, 209, 210, 211, 215, 216, 218, 219, 220, 223, 225, 226, 228, 233, 234, 240, 241, 243, 245, 246, 253, 254, 255, 256, 258, 261, 264, 266, 267, 270, 273, 275, 278, 279, 283, 284, 285, 289, 290, 292, 294, 302, 304, 307, 308, 310, 313, 320, 332, 333, 334, 345, 348, 349, 352, 356, 357, 365, 370, 373, 376, 379, 390, 391, 402, 403, 404, 405, 406, 407, 408, 415, 427, 443, 460, 461, 462, 463, 465, 466, 484, 485, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 515, 519, 522, 524, 526, 535, 542, 547, 548, 554, 555, 556, 560, 562, 563, 564, 566, 568, 571, 572, 591, 592, 594, 596, 599, 600, 604, 607, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 638, 640, 642, 647, 649, 650, 653, 654, 655, 656, 659, 665, 666, 667, 669, 670, 676, 677, 678, 681, 682, 684, 690, 692, 693, 695, 713, 715, 718, 721, 722, 723, 724, 725, 727, 730, 731, 732, 736, 737, 740, 741, 746, 747, 749, 750, 761, 762, 765, 771, 777, 780, 783, 784, 787, 789, 792, 793, 795, 796, 805, 821, 823, 824, 825, 826, 827, 831, 837, 844, 845, 849, 850, 853, 855, 864, 870, 873, 875, 877, 878, 882, 883, 886, 889, 894, 898, 900, 903, 904, 906, 909, 919, 923, 924, 925, 932, 933, 944, 947, 948, 951, 955, 956, 964, 969, 971, 972, 974, 977, 988, 990, 994, 997, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1017, 1029, 1049, 1069, 1070, 1072, 1074, 1075, 1082, 1084, 1089, 1091, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1119, 1120, 1124, 1128, 1131, 1133, 1135, 1144, 1151, 1157, 1170, 1176, 1178, 1181, 1182, 1185, 1187, 1188, 1189, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1213, 1217, 1222, 1224, 1227, 1228, 1229, 1230, 1233, 1239, 1240, 1241, 1243, 1244, 1250, 1251, 1252, 1255, 1256, 1258, 1264, 1266, 1267, 1269, 1286, 1291, 1292, 1296, 1299, 1301, 1310, 1320, 1322, 1328, 1333, 1338], "far": [40, 320], "fashion": [225, 320, 837, 864, 875, 919], "fast": [45, 47, 49, 168, 170, 320, 470, 640, 805, 919, 923, 1079, 1213, 1310, 1341], "fast_executemani": [38, 320], "faster": [46, 47, 48, 49, 57, 58, 137, 140, 199, 278, 288, 320, 556, 716, 805, 826, 827, 837, 864, 875, 919, 1078, 1164, 1310], "fastexcel": [140, 157], "favor": [38, 320], "fay": 132, "feat1": [277, 282, 320], "feat2": [277, 282, 320], "feather": [41, 141, 152, 320, 817], "featur": [1, 45, 56, 67, 69, 72, 277, 282, 320], "feature_0": [891, 919], "feature_0_train": [891, 919], "feature_1": [891, 919], "feature_nam": [282, 320], "feb": [157, 1333], "februari": 1333, "fed": 686, "feel": [655, 678, 1229, 1252], "fetch": [131, 826, 919], "fetch_california_h": [282, 320], "few": [209, 320], "fewer": [668, 691, 919, 1242, 1265], "ff": 1327, "ff00": [695, 1269], "fff": 1, "ffff00": [374, 375, 657, 972, 973, 1231], "ffffff": [40, 320], "ffi": [197, 320, 1071, 1310], "fgg": 925, "fghi": 1333, "fh": 136, "fiction": 1319, "field": [36, 37, 39, 46, 81, 115, 118, 125, 286, 320, 369, 547, 555, 556, 582, 584, 586, 615, 663, 664, 670, 682, 683, 703, 704, 705, 711, 718, 741, 742, 766, 787, 805, 884, 919, 968, 1156, 1164, 1195, 1238, 1256, 1257, 1278, 1280, 1293, 1310, 1334], "field_0": [369, 547, 968, 1156], "field_1": [369, 547, 968, 1156], "field_2": [968, 1156], "field_n": [369, 547, 968, 1156], "field_nam": [556, 805, 1164, 1310], "figsiz": [571, 864, 875, 919], "figur": [571, 637, 805, 875, 919, 1208, 1310], "file": [2, 3, 5, 6, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 199, 260, 320, 410, 479, 570, 574, 805, 832, 872, 919, 923, 1078, 1310], "file_cache_ttl": [145, 149, 152, 153], "filenam": 141, "filesourc": [140, 146, 147, 154], "filesystem": [39, 139, 150, 151, 320], "fill": [51, 59, 183, 200, 201, 263, 288, 320, 324, 372, 403, 406, 471, 472, 478, 491, 492, 619, 621, 623, 625, 627, 630, 632, 634, 641, 756, 777, 780, 796, 805, 839, 840, 874, 891, 919, 1080, 1081, 1097, 1098, 1177, 1198, 1199, 1201, 1204, 1205, 1206, 1215, 1310], "fill_char": [674, 675, 1248, 1249], "fill_nan": [201, 320, 472, 805, 840, 919, 1081, 1310], "fill_nul": [51, 200, 320, 471, 805, 839, 891, 919, 1080, 1310], "fill_valu": [263, 288, 320, 641, 805, 874, 919, 1215, 1310], "fillnullstrategi": [201, 320, 472, 805, 840, 919, 1081, 1310], "film": 1319, "filter": [1, 46, 47, 48, 49, 52, 57, 58, 149, 150, 154, 155, 193, 194, 218, 219, 220, 245, 306, 320, 567, 569, 659, 684, 720, 745, 748, 755, 783, 784, 795, 805, 826, 827, 834, 835, 837, 847, 864, 875, 878, 902, 919, 925, 1212, 1310, 1326], "final": [13, 40, 51, 154, 226, 228, 320, 463, 465, 466, 805, 831, 850, 919, 923, 1072, 1074, 1075, 1310, 1339], "find": [59, 207, 320, 639, 654, 655, 667, 805, 1211, 1229, 1241, 1250, 1310], "find_pat": 666, "fine": [826, 916, 919], "finish": [199, 320, 1078, 1310], "finit": [495, 714, 737, 805, 1102, 1310], "first": [45, 51, 135, 136, 140, 141, 143, 146, 147, 149, 154, 158, 159, 160, 161, 179, 209, 211, 213, 225, 226, 229, 230, 240, 244, 245, 252, 271, 275, 276, 284, 285, 290, 297, 303, 320, 345, 347, 356, 407, 411, 435, 437, 442, 458, 477, 487, 496, 509, 517, 519, 524, 525, 547, 555, 556, 568, 577, 601, 602, 617, 639, 650, 654, 661, 662, 666, 668, 670, 671, 676, 677, 691, 698, 733, 734, 741, 755, 759, 795, 801, 805, 845, 846, 849, 850, 854, 863, 868, 883, 891, 893, 899, 919, 925, 944, 955, 1010, 1012, 1013, 1041, 1043, 1048, 1064, 1094, 1103, 1118, 1126, 1128, 1133, 1134, 1156, 1164, 1211, 1224, 1235, 1236, 1238, 1240, 1242, 1244, 1245, 1250, 1251, 1265, 1272, 1282, 1286, 1288, 1291, 1310, 1330, 1331, 1333, 1339, 1341], "first_column": [40, 320], "first_non_nul": [547, 1156], "first_part": [682, 683, 1256, 1257], "fisher": [505, 647, 805, 1114, 1222, 1310], "fit": [132, 223, 264, 288, 320, 642, 780, 805, 1216, 1217, 1310], "five": [281, 320, 1341], "fix": [10, 60, 69, 163, 458, 751, 1064], "flag": [56, 139, 150, 162, 278, 320, 640, 654, 662, 663, 666, 676, 677, 805, 837, 855, 919, 925, 1213, 1228, 1236, 1237, 1240, 1250, 1251, 1291, 1310, 1333], "flat": [132, 255, 320, 520, 613, 805, 1129, 1193, 1310], "flatten": 805, "flavour": [40, 137, 320], "flight": 137, "flight_sql": 137, "flightsql": 137, "float": [10, 11, 37, 40, 46, 70, 71, 135, 136, 149, 155, 158, 159, 160, 161, 162, 165, 169, 178, 189, 193, 197, 200, 226, 247, 256, 277, 278, 312, 320, 352, 396, 408, 413, 414, 443, 460, 461, 462, 463, 465, 466, 471, 476, 477, 482, 484, 491, 495, 498, 500, 501, 502, 503, 507, 515, 535, 550, 554, 557, 571, 575, 589, 590, 591, 592, 602, 604, 605, 618, 619, 621, 623, 625, 627, 628, 630, 632, 634, 636, 638, 644, 714, 778, 780, 805, 831, 834, 839, 850, 865, 875, 908, 919, 925, 951, 988, 996, 1011, 1012, 1014, 1015, 1016, 1049, 1067, 1071, 1072, 1074, 1075, 1080, 1085, 1095, 1114, 1124, 1144, 1159, 1173, 1174, 1183, 1184, 1185, 1186, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1209, 1212, 1219, 1222, 1226, 1281, 1291, 1300, 1310, 1338, 1341], "float16": [282, 320], "float32": [1, 10, 37, 46, 54, 182, 204, 276, 277, 278, 282, 320, 464, 805, 823, 919, 925, 1073, 1101, 1162, 1289, 1291, 1294, 1310], "float4": [267, 320, 784, 878, 919, 1336], "float64": [10, 37, 40, 46, 125, 135, 144, 162, 165, 185, 195, 197, 204, 257, 282, 294, 320, 337, 338, 339, 340, 341, 342, 378, 391, 398, 399, 400, 409, 443, 464, 467, 500, 501, 606, 645, 646, 709, 710, 753, 767, 777, 780, 796, 801, 805, 828, 836, 869, 889, 919, 924, 925, 1049, 1073, 1292, 1298, 1310], "float_list": 77, "float_precis": [9, 10, 27, 37, 40, 46, 320, 919], "float_scientif": [37, 46, 320, 919], "floatfmt": 11, "floor": [53, 477, 805, 1310, 1331], "floor_a": 1332, "floordiv": [714, 805], "fmt": [11, 226, 320, 490, 756, 805, 847, 850, 919], "fmt_number": [320, 324], "fmt_str_length": [12, 746, 747, 749, 750], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 320], "fn": [741, 742, 755, 779], "foggi": [676, 677, 1250, 1251], "fold": [320, 568, 733, 741, 742, 779], "folder": 155, "follow": [40, 45, 56, 135, 136, 137, 139, 140, 146, 149, 150, 151, 211, 226, 230, 244, 252, 278, 290, 320, 437, 442, 455, 464, 555, 601, 602, 607, 617, 620, 622, 624, 626, 628, 629, 631, 633, 635, 644, 703, 714, 729, 746, 747, 749, 750, 767, 792, 793, 795, 797, 798, 800, 805, 806, 807, 810, 812, 813, 814, 845, 850, 863, 868, 919, 925, 1043, 1048, 1061, 1073, 1183, 1187, 1210, 1212, 1219, 1291, 1302, 1304, 1306, 1310, 1311, 1316, 1317, 1318, 1336, 1341], "font": [40, 320], "font_color": [40, 320], "font_siz": [40, 320], "foo": [35, 37, 39, 41, 42, 43, 44, 45, 132, 144, 145, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 199, 202, 204, 206, 207, 208, 212, 213, 214, 215, 216, 217, 219, 225, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 247, 249, 250, 253, 256, 257, 258, 260, 262, 265, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 284, 285, 286, 291, 292, 293, 298, 320, 392, 408, 410, 437, 481, 487, 490, 509, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 604, 613, 653, 656, 658, 661, 663, 664, 669, 679, 681, 683, 685, 686, 687, 688, 689, 696, 699, 708, 726, 737, 738, 739, 754, 758, 759, 760, 763, 764, 768, 770, 772, 773, 775, 776, 778, 783, 786, 790, 794, 795, 801, 805, 823, 828, 829, 833, 834, 835, 836, 841, 847, 848, 849, 862, 866, 869, 870, 883, 884, 888, 891, 919, 924, 925, 989, 1011, 1043, 1135, 1183, 1185, 1193, 1230, 1232, 1235, 1237, 1238, 1253, 1257, 1262, 1263, 1270, 1273, 1310, 1324, 1326, 1327, 1328, 1330, 1333, 1336], "foo1": 1333, "foo11": [204, 320], "foo_": [565, 681, 756], "foo_1": [275, 320], "foo_2": [275, 320], "foo_3_4": 1333, "foo_a": [245, 320], "foo_a_bar_1": 756, "foo_at_1": 1328, "foo_b": [245, 320], "foo_b_bar_2": 756, "foo_bar": [560, 566, 681, 765, 1324], "foo_bar2": [560, 566], "foo_bar_baz": 681, "foo_c_bar_3": 756, "foo_low": [696, 1333], "foo_mean": 1328, "foo_q25": 1327, "foo_q50": 1327, "foo_q75": 1327, "foo_std": 1327, "foo_strip": 685, "foo_strip_end": 686, "foo_strip_start": 687, "foo_sum": [1327, 1328], "foo_uniqu": 1328, "foo_upp": [699, 1333], "foo_var": 1327, "foobar": [688, 689, 1262, 1263, 1333], "foobarbar": [689, 1263], "foofoobar": [688, 1262], "foral": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "forc": [226, 230, 278, 306, 320, 547, 849, 850, 902, 919, 1164, 1291, 1310], "force_parallel": [226, 320, 849, 850, 919], "form": [37, 46, 122, 124, 125, 126, 128, 144, 145, 153, 223, 254, 288, 320, 447, 598, 698, 805, 919, 1053, 1180, 1272, 1310, 1333], "format": [7, 11, 15, 16, 20, 36, 37, 40, 41, 42, 45, 46, 93, 133, 135, 136, 137, 140, 141, 143, 146, 149, 155, 177, 190, 198, 209, 223, 236, 245, 254, 255, 260, 274, 287, 318, 320, 324, 410, 442, 444, 447, 570, 571, 572, 690, 692, 693, 697, 751, 805, 832, 837, 838, 859, 872, 885, 919, 928, 1050, 1053, 1264, 1266, 1267, 1271, 1309, 1333, 1334], "formul": [193, 320, 834, 835, 919], "formula": [40, 320, 460, 805, 1067, 1310], "fortran": [277, 278, 320], "forward": [201, 226, 263, 320, 364, 415, 434, 472, 478, 540, 641, 805, 840, 850, 874, 919, 963, 1017, 1040, 1081, 1149, 1215, 1310], "forward_fil": [290, 320, 372, 403, 406, 641, 805], "found": [20, 37, 40, 46, 94, 115, 118, 125, 129, 147, 154, 195, 267, 320, 639, 666, 671, 688, 689, 690, 693, 805, 878, 919, 1211, 1240, 1245, 1262, 1263, 1264, 1267, 1310, 1322, 1338], "four": [281, 320, 1338], "fourth": [505, 805, 1114, 1310], "frac": [463, 464, 465, 466, 647, 805, 1072, 1073, 1074, 1075, 1222, 1310], "fraction": [37, 46, 158, 159, 160, 161, 256, 320, 443, 535, 598, 638, 690, 693, 805, 919, 1049, 1144, 1180, 1209, 1264, 1267, 1310], "fragment": 1338, "frame": [37, 38, 40, 46, 51, 58, 59, 125, 136, 140, 146, 158, 159, 182, 183, 189, 223, 224, 228, 230, 237, 241, 244, 253, 254, 255, 267, 282, 288, 289, 320, 447, 784, 823, 824, 831, 860, 863, 878, 886, 919, 925, 998, 1053, 1310, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1337, 1341], "frame_data": [1321, 1324], "frameinittyp": [320, 919], "frametyp": [51, 1338], "framework": [245, 287, 320, 885, 919], "freedom": [268, 291, 320, 543, 549, 630, 631, 634, 635, 652, 719, 739, 781, 782, 786, 794, 805, 879, 887, 919, 1204, 1206, 1226, 1300, 1310], "freeli": [784, 878, 919, 925], "freez": [40, 320], "freeze_pan": [40, 320], "frequenc": [290, 320, 718, 805, 1299, 1310], "frequent": [1210, 1212, 1310], "fri": [320, 323], "fridai": [211, 320, 415, 444, 732, 845, 919, 1017, 1050, 1053], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 69, 81, 93, 97, 113, 117, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 179, 182, 189, 190, 191, 197, 199, 202, 203, 209, 211, 223, 224, 225, 226, 227, 228, 236, 245, 249, 252, 253, 255, 256, 258, 259, 267, 275, 282, 284, 285, 287, 288, 289, 290, 296, 320, 323, 324, 369, 378, 408, 409, 410, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 467, 477, 479, 491, 505, 523, 535, 547, 556, 564, 589, 590, 592, 597, 598, 601, 604, 606, 617, 618, 620, 622, 624, 626, 628, 631, 633, 635, 638, 650, 662, 663, 668, 670, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 716, 728, 729, 732, 733, 745, 746, 747, 748, 749, 750, 751, 765, 780, 784, 791, 792, 793, 801, 804, 805, 823, 831, 832, 833, 841, 845, 849, 850, 851, 859, 866, 868, 870, 871, 878, 883, 885, 886, 891, 892, 919, 924, 925, 968, 976, 1011, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1071, 1073, 1078, 1114, 1132, 1144, 1156, 1173, 1174, 1176, 1177, 1180, 1185, 1197, 1209, 1236, 1237, 1242, 1244, 1254, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1271, 1286, 1301, 1310, 1319, 1320, 1321, 1322, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341], "from_arrai": 784, "from_arrow": 123, "from_json": 805, "from_panda": 123, "from_repr": [276, 320, 1288, 1310], "fromkei": [52, 54], "front": [211, 320, 845, 919], "fruit": [273, 320, 614, 659, 684, 691, 805, 1233, 1258, 1265], "fruits_revers": [614, 805], "fsspec": [135, 136, 141, 143, 150, 151, 157], "fsspecfileio": 151, "full": [11, 45, 49, 51, 59, 66, 93, 125, 128, 135, 136, 137, 139, 144, 145, 147, 149, 150, 151, 153, 154, 155, 225, 289, 320, 668, 670, 676, 677, 690, 691, 692, 693, 697, 746, 747, 849, 855, 886, 919, 925, 1242, 1244, 1250, 1251, 1264, 1265, 1266, 1267, 1271, 1310, 1326, 1341], "full_sent": 736, "fulli": [167, 244, 256, 278, 320], "funcnam": [40, 320], "function": [0, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 67, 69, 72, 89, 90, 120, 123, 127, 129, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 174, 176, 178, 181, 187, 190, 197, 204, 227, 230, 236, 244, 245, 249, 267, 277, 278, 279, 282, 283, 284, 287, 288, 289, 306, 320, 323, 324, 332, 369, 389, 390, 407, 408, 410, 442, 463, 465, 466, 488, 547, 555, 556, 581, 582, 597, 601, 604, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 644, 647, 667, 711, 712, 713, 722, 726, 734, 738, 740, 741, 742, 754, 755, 757, 759, 760, 763, 766, 767, 770, 772, 775, 777, 779, 781, 782, 786, 790, 794, 796, 801, 805, 817, 821, 827, 832, 851, 855, 859, 863, 866, 878, 882, 885, 886, 893, 902, 919, 923, 927, 968, 987, 994, 1010, 1011, 1048, 1071, 1072, 1074, 1075, 1095, 1156, 1164, 1185, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1210, 1212, 1217, 1219, 1222, 1241, 1289, 1292, 1294, 1295, 1310, 1315, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1337, 1338, 1339, 1340, 1341], "function_nam": 923, "further": 801, "futur": [58, 178, 189, 225, 261, 320, 827, 831, 849, 873, 919], "g": [37, 46, 132, 135, 139, 141, 143, 150, 155, 167, 178, 190, 222, 278, 288, 320, 329, 410, 464, 467, 556, 642, 753, 805, 832, 866, 919, 1073, 1310, 1341], "g1": [473, 720, 805], "g2": [473, 720, 805], "g_1": [647, 805, 1222, 1310], "gag": 26, "gamma": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "gantt": [864, 919], "gather": [136, 205, 320, 345, 481, 523, 730, 805, 843, 919, 944, 1087, 1132, 1310], "gather_everi": [320, 805, 919, 1310], "gb": [197, 320, 378, 1071, 1310], "gbp": 1341, "gc": [39, 139, 150, 151, 320], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 151, 152, 153, 154, 320, 919], "gdp": [226, 320, 850, 919], "gdp2": [226, 320, 850, 919], "gdp_date": [226, 320, 850, 919], "ge": [805, 1310], "gener": [1, 132, 137, 138, 156, 162, 163, 164, 165, 166, 167, 169, 178, 185, 187, 245, 256, 275, 278, 284, 320, 535, 638, 643, 727, 746, 749, 761, 762, 764, 780, 792, 793, 805, 919, 988, 1144, 1209, 1218, 1286, 1310, 1341], "geq": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "germani": [226, 320, 850, 919], "get": [51, 58, 69, 142, 148, 155, 179, 181, 185, 186, 195, 203, 206, 208, 211, 213, 214, 218, 220, 221, 229, 232, 239, 240, 245, 252, 253, 257, 262, 265, 271, 279, 283, 293, 303, 314, 320, 330, 343, 344, 345, 347, 355, 358, 370, 378, 390, 392, 403, 404, 405, 406, 415, 425, 474, 480, 487, 504, 506, 509, 521, 527, 548, 557, 558, 559, 567, 569, 575, 589, 590, 599, 600, 605, 616, 617, 648, 652, 661, 707, 708, 712, 713, 715, 719, 730, 732, 754, 759, 763, 767, 768, 769, 770, 772, 773, 774, 776, 786, 790, 794, 805, 821, 826, 827, 829, 836, 842, 845, 846, 852, 854, 868, 869, 876, 881, 882, 888, 899, 910, 919, 923, 924, 929, 942, 943, 944, 945, 946, 954, 957, 969, 976, 989, 997, 1006, 1007, 1008, 1009, 1017, 1027, 1066, 1083, 1084, 1089, 1094, 1099, 1100, 1112, 1115, 1118, 1130, 1136, 1157, 1165, 1167, 1168, 1170, 1172, 1173, 1174, 1181, 1182, 1186, 1196, 1223, 1226, 1235, 1282, 1286, 1292, 1296, 1300, 1310], "get_chunk": 1310, "get_column": [178, 280, 320], "get_column_index": 320, "get_token": 33, "get_worksheet_by_nam": [40, 320], "gevent": [58, 157, 827, 919], "gh": 677, "gh45": 677, "gh45ij67kl": 677, "ghi": [329, 663, 805, 925, 1237], "gil": [556, 805], "git": 56, "github": [138, 320], "give": [145, 152, 153, 226, 236, 285, 287, 320, 425, 477, 505, 610, 714, 718, 805, 817, 850, 859, 883, 885, 919, 1027, 1114, 1299, 1310, 1337], "given": [40, 51, 99, 104, 121, 122, 124, 125, 126, 128, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 160, 161, 162, 163, 165, 167, 168, 169, 170, 176, 197, 198, 200, 211, 221, 230, 243, 244, 253, 254, 255, 263, 266, 282, 289, 320, 352, 364, 369, 378, 390, 397, 416, 420, 444, 446, 447, 460, 464, 488, 493, 515, 540, 547, 550, 556, 597, 601, 607, 610, 611, 613, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 641, 663, 664, 674, 675, 690, 693, 700, 703, 713, 753, 754, 763, 766, 767, 780, 781, 782, 805, 838, 845, 855, 863, 874, 877, 886, 902, 919, 924, 925, 927, 951, 963, 968, 976, 999, 1018, 1022, 1050, 1052, 1053, 1067, 1071, 1073, 1095, 1099, 1113, 1124, 1149, 1156, 1159, 1162, 1164, 1177, 1183, 1187, 1193, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1211, 1215, 1237, 1238, 1248, 1249, 1264, 1267, 1274, 1298, 1301, 1310, 1319, 1321, 1326, 1328, 1329, 1332, 1333, 1338, 1340, 1341], "glimps": [189, 213, 320], "glob": [135, 136, 140, 147, 149, 152, 153, 154], "global": [50, 89, 90, 140, 156, 165, 173, 267, 320, 611, 612, 784, 805, 878, 919, 990, 993, 1191, 1192, 1310, 1320, 1322, 1337], "gmt": [420, 424, 441, 1022, 1026, 1047], "go": [12, 135, 136, 149, 659, 1233], "godfath": 1319, "goe": 12, "gonfruit": 1265, "good": [45, 47, 49, 223, 320, 919, 1332], "goodby": 1, "googl": [34, 139, 150, 151], "gpu": [277, 320, 826, 894, 916, 919, 1289, 1310], "gpu_devic": [277, 320], "gpudevic": [277, 320], "gpuengin": [826, 919], "grade": [1114, 1310], "grain": [826, 916, 919], "granular": 1338, "grape": 1333, "graph": [57, 137, 228, 320, 571, 826, 847, 891, 919], "graphviz": [228, 320, 571, 875, 919], "great": [320, 324], "great_tabl": [320, 324], "greater": [183, 226, 320, 482, 484, 493, 647, 674, 675, 683, 700, 805, 850, 919, 1099, 1222, 1248, 1249, 1257, 1274, 1310], "greatest": [1327, 1331], "greatli": [141, 152], "green": [50, 89, 90, 306, 718, 805, 902, 1299, 1310], "greenlet": [58, 827, 919], "greet": 1, "grid": [491, 805], "grid_point": [491, 805], "gridlin": [40, 320], "gross": 1319, "group": [9, 27, 45, 49, 136, 154, 182, 210, 211, 224, 226, 241, 243, 245, 252, 255, 288, 290, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 330, 390, 407, 469, 475, 480, 483, 519, 555, 556, 567, 569, 597, 607, 616, 617, 649, 650, 654, 662, 663, 664, 666, 676, 677, 713, 718, 767, 805, 823, 844, 845, 850, 868, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 923, 925, 1010, 1128, 1196, 1228, 1236, 1237, 1238, 1240, 1250, 1251, 1299, 1310, 1319, 1327, 1337, 1338], "group_bi": [211, 241, 245, 252, 290, 319, 320, 330, 380, 385, 388, 390, 473, 475, 480, 483, 555, 556, 597, 649, 650, 713, 720, 746, 749, 767, 805, 826, 827, 837, 845, 864, 868, 875, 917, 919, 925], "group_by_dynam": [252, 320, 868, 919], "group_by_partit": [864, 919], "group_col": [473, 720, 805], "group_df": [306, 902], "group_dtyp": [597, 805], "group_index": [662, 1236], "group_to_row": [597, 805], "groupbi": [210, 320, 556, 767, 805], "grouper": [380, 385, 388, 805], "grow": [292, 320], "grown": [215, 320], "gt": [320, 324, 805, 1310], "gte": [473, 720, 805], "guarante": [45, 49, 135, 136, 181, 189, 212, 283, 285, 320, 389, 390, 486, 711, 712, 713, 805, 821, 831, 882, 883, 919, 987, 1093, 1293, 1295, 1310], "guid": [805, 923, 1341], "gzip": [45, 49, 320, 919], "h": [288, 320, 329, 444, 447, 642, 676, 677, 690, 693, 697, 805, 1250, 1251, 1264, 1267, 1271, 1333, 1334], "ha": [39, 40, 51, 58, 127, 137, 149, 172, 178, 290, 296, 301, 320, 389, 390, 407, 479, 555, 568, 574, 668, 691, 701, 712, 713, 737, 754, 763, 801, 805, 827, 892, 897, 902, 919, 987, 998, 1010, 1012, 1242, 1265, 1295, 1310], "half": [282, 320, 442, 463, 464, 465, 466, 805, 1048, 1072, 1073, 1074, 1075, 1310], "half_lif": [463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310], "ham": [35, 37, 39, 41, 42, 45, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 207, 212, 213, 215, 225, 229, 231, 233, 235, 238, 242, 247, 249, 250, 253, 256, 257, 258, 265, 268, 269, 271, 275, 276, 278, 279, 280, 285, 291, 292, 320, 392, 571, 572, 801, 823, 828, 829, 833, 834, 835, 836, 841, 849, 862, 866, 869, 870, 883, 891, 919, 989, 1326, 1327], "ham_a": [275, 320], "ham_b": [275, 320], "ham_right": [225, 320, 849, 919], "hamburg": 801, "hand": [40, 135, 136, 149, 320, 536, 537, 538, 539, 1145, 1146, 1147, 1148], "handi": [415, 732, 1017], "handl": [39, 57, 58, 59, 96, 129, 135, 136, 149, 155, 202, 206, 320, 411, 517, 661, 700, 805, 826, 827, 841, 919, 923, 1013, 1126, 1235, 1274, 1310], "handler": [133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 410, 805, 832, 919], "happen": [137, 420, 604, 805, 1022, 1185, 1310], "hard": [149, 855, 919], "harder": [211, 320, 845, 919], "hardwar": 1341, "has_head": [135, 136, 140, 146, 149], "has_nul": [805, 1092, 1310], "has_prefix": 684, "has_suffix": 659, "has_two": 1328, "has_valid": 1310, "hash": [212, 320, 805, 1310], "hash_row": 320, "hat": [676, 677, 1250, 1251], "have": [5, 14, 30, 40, 50, 51, 66, 90, 123, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 179, 190, 199, 223, 225, 226, 245, 248, 252, 254, 255, 274, 282, 297, 320, 407, 410, 463, 465, 466, 556, 568, 607, 611, 612, 617, 664, 678, 734, 805, 832, 849, 850, 859, 868, 892, 893, 919, 923, 925, 1010, 1012, 1072, 1074, 1075, 1078, 1187, 1191, 1192, 1250, 1252, 1310, 1337, 1339, 1341], "haystack": [663, 1237], "he": 686, "head": [69, 149, 209, 229, 271, 320, 335, 509, 805, 854, 919, 1118, 1282, 1310], "header": [37, 40, 45, 46, 49, 129, 135, 136, 140, 146, 149, 195, 284, 320, 919], "header_format": [40, 320], "header_nam": [284, 320], "headerless": 149, "heap": [197, 320, 805, 923, 1071, 1310], "heatmap": [40, 320], "heavili": 154, "height": [40, 132, 165, 194, 320, 323, 1310, 1315], "hell": [685, 1259], "hello": [1, 20, 685, 686, 687, 925, 1135, 1259, 1260, 1261, 1321, 1324], "hello_": 756, "hello_data": 1324, "hello_world": 1324, "help": [40, 158, 159, 160, 161, 320, 919], "helper": [320, 324, 801], "henc": [676, 1251], "here": [37, 39, 40, 41, 45, 46, 47, 48, 49, 122, 124, 125, 126, 128, 137, 138, 139, 144, 145, 147, 149, 150, 151, 152, 153, 154, 163, 165, 169, 179, 245, 320, 415, 555, 556, 571, 664, 671, 732, 805, 875, 919, 925, 1017, 1245], "hex": [374, 375, 657, 658, 695, 972, 973, 1231, 1232, 1269], "hexadecim": [972, 973], "hf": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "hf_token": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "hi": [1, 1333], "hidden": [40, 320], "hidden_column": [40, 320], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 320], "hide_password": 137, "high": [255, 320, 324, 604, 805, 817, 1185, 1310], "higher": [45, 49, 189, 247, 312, 320, 605, 627, 628, 778, 805, 831, 865, 908, 919, 1012, 1186, 1202, 1310], "highest": [320, 324, 607, 717, 737, 805, 919, 1187, 1310], "highli": [805, 923], "hippopotamu": [674, 675, 1248, 1249], "hist": [805, 1310, 1315], "histogram": [1310, 1315], "hit": [822, 919], "hive": [147, 152, 154], "hive_partit": [147, 152, 154], "hive_schema": [147, 152, 154], "hmm": 925, "hold": [264, 278, 320, 1291, 1310], "holidai": [415, 732, 1017], "home": [698, 1272], "horizont": [20, 59, 98, 204, 215, 232, 234, 239, 270, 288, 320, 723, 725, 734, 735, 736, 741, 742, 744, 752, 755, 769, 771, 774, 779, 789, 891, 919], "host": [56, 135, 141, 143, 154], "hour": [145, 149, 152, 153, 211, 226, 252, 290, 320, 429, 431, 432, 436, 437, 440, 442, 443, 447, 449, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 748, 749, 750, 751, 791, 792, 793, 805, 845, 850, 868, 919, 925, 1043, 1046, 1048, 1055, 1061, 1073, 1310, 1334], "hours_diff": 449, "hous": [282, 320], "how": [11, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 98, 138, 145, 147, 149, 152, 153, 154, 194, 202, 225, 226, 245, 288, 289, 320, 353, 411, 440, 441, 491, 516, 517, 597, 610, 629, 690, 693, 732, 748, 795, 805, 841, 849, 850, 886, 891, 919, 923, 952, 1013, 1046, 1047, 1125, 1126, 1203, 1264, 1267, 1310], "howev": [1, 125, 137, 147, 154, 174, 197, 230, 278, 320, 597, 805, 826, 919, 1071, 1310], "hstack": [98, 320], "html": [32, 40, 41, 42, 123, 137, 141, 143, 176, 177, 178, 187, 320, 927, 928], "http": [20, 32, 40, 41, 42, 69, 123, 137, 138, 141, 143, 176, 177, 178, 187, 320, 571, 662, 664, 875, 919, 927, 928, 1236, 1238], "httpmethod": 69, "hug": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "hut": [676, 677, 1250, 1251], "hvplot": [320, 323, 1310, 1315], "hyperbol": [338, 340, 342, 399, 646, 710, 805, 937, 939, 941, 1002, 1221, 1284, 1310], "hyperloglog": [180, 320, 336, 726, 805, 820, 919, 935, 1310], "hyphen": [653, 1227], "hypothesi": [163, 165, 168, 169, 1341], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 65, 66, 67, 68, 69, 72, 82, 90, 94, 96, 97, 98, 99, 100, 101, 103, 104, 109, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 179, 180, 181, 182, 184, 185, 189, 190, 193, 194, 196, 197, 199, 202, 206, 210, 211, 212, 213, 216, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 241, 243, 244, 245, 249, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 297, 298, 306, 320, 323, 324, 329, 332, 334, 335, 336, 346, 349, 356, 357, 364, 369, 377, 389, 390, 391, 393, 394, 407, 408, 410, 413, 414, 415, 416, 419, 427, 434, 435, 437, 442, 444, 447, 455, 463, 464, 465, 466, 469, 473, 477, 486, 488, 490, 493, 505, 511, 518, 519, 522, 524, 526, 535, 540, 541, 543, 547, 549, 552, 555, 556, 560, 562, 563, 564, 566, 567, 568, 570, 579, 597, 602, 604, 607, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 643, 644, 647, 648, 649, 650, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 685, 686, 687, 690, 691, 692, 693, 695, 697, 698, 700, 705, 712, 713, 718, 719, 722, 723, 724, 725, 726, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 746, 747, 749, 750, 755, 759, 760, 761, 762, 764, 765, 767, 770, 772, 775, 777, 780, 781, 782, 783, 784, 786, 790, 792, 793, 794, 795, 796, 801, 805, 820, 821, 822, 825, 826, 827, 829, 831, 832, 834, 835, 836, 837, 841, 844, 845, 848, 849, 850, 851, 853, 855, 859, 860, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 893, 894, 902, 912, 919, 923, 925, 932, 933, 934, 935, 948, 955, 956, 963, 968, 975, 987, 990, 991, 992, 994, 999, 1000, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1021, 1029, 1043, 1048, 1050, 1053, 1061, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1082, 1083, 1093, 1094, 1095, 1099, 1101, 1111, 1113, 1114, 1115, 1118, 1120, 1127, 1128, 1131, 1133, 1135, 1144, 1149, 1150, 1156, 1164, 1183, 1185, 1187, 1189, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1213, 1215, 1218, 1219, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1257, 1259, 1260, 1261, 1264, 1265, 1266, 1267, 1269, 1271, 1272, 1274, 1282, 1285, 1289, 1291, 1292, 1294, 1295, 1299, 1300, 1310, 1315, 1319, 1320, 1325, 1329, 1330, 1333, 1336, 1338, 1339, 1341], "i0e0": 1341, "i16": [1, 54, 423, 438, 457, 642, 805, 925, 1044, 1288, 1310, 1341], "i32": [1, 54, 122, 125, 129, 162, 164, 165, 258, 267, 320, 355, 356, 358, 377, 391, 418, 426, 428, 429, 430, 431, 432, 436, 459, 642, 732, 795, 805, 870, 919, 924, 954, 955, 957, 975, 1020, 1030, 1034, 1035, 1036, 1042, 1065, 1162, 1310, 1330, 1334, 1341], "i64": [1, 10, 13, 16, 17, 21, 27, 52, 53, 54, 55, 59, 60, 77, 97, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 137, 144, 145, 149, 179, 181, 182, 183, 184, 186, 190, 191, 194, 195, 198, 199, 201, 202, 205, 206, 208, 209, 210, 211, 213, 215, 216, 218, 220, 222, 225, 226, 227, 229, 230, 231, 237, 238, 243, 244, 245, 246, 249, 250, 251, 252, 256, 258, 260, 263, 265, 266, 267, 269, 271, 273, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 310, 313, 314, 320, 329, 331, 335, 345, 350, 351, 353, 354, 359, 361, 362, 363, 364, 365, 367, 370, 372, 380, 385, 388, 389, 390, 397, 403, 404, 405, 406, 407, 408, 411, 412, 425, 440, 446, 448, 449, 450, 451, 452, 453, 454, 464, 467, 469, 470, 472, 473, 474, 475, 477, 478, 480, 481, 483, 487, 489, 490, 491, 492, 493, 496, 497, 499, 500, 501, 502, 503, 506, 509, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 553, 555, 556, 576, 577, 578, 580, 581, 583, 585, 587, 588, 593, 597, 598, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 638, 640, 641, 642, 643, 648, 649, 650, 668, 676, 677, 691, 695, 700, 701, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 717, 720, 727, 730, 733, 734, 735, 736, 741, 742, 743, 744, 745, 748, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 779, 783, 784, 785, 788, 789, 790, 791, 795, 801, 805, 821, 823, 824, 826, 827, 832, 833, 835, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 855, 856, 860, 861, 863, 864, 866, 867, 868, 870, 872, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 889, 892, 893, 895, 896, 898, 899, 900, 902, 903, 906, 909, 910, 919, 925, 929, 930, 931, 934, 953, 958, 960, 962, 963, 964, 966, 969, 987, 999, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1027, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1077, 1078, 1079, 1081, 1082, 1086, 1087, 1089, 1094, 1096, 1104, 1118, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1138, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1156, 1157, 1164, 1169, 1177, 1183, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198, 1201, 1205, 1209, 1210, 1212, 1215, 1216, 1218, 1223, 1224, 1269, 1275, 1280, 1282, 1287, 1295, 1296, 1301, 1310, 1319, 1320, 1322, 1326, 1327, 1328, 1329, 1330, 1332, 1335, 1336, 1338, 1339, 1341], "i8": [368, 369, 423, 426, 429, 431, 432, 433, 436, 438, 439, 443, 456, 457, 546, 642, 777, 780, 796, 805, 967, 968, 1013, 1025, 1028, 1038, 1039, 1045, 1049, 1062, 1063, 1155, 1194, 1216, 1298, 1310, 1334], "i_bitand_j": 1329, "i_bitand_op_j": 1329, "i_bitcount": 1329, "i_bitor_j": 1329, "i_bitor_op_j": 1329, "i_bitxor_j": 1329, "i_bitxor_op_j": 1329, "iceberg": [151, 817], "icon": [40, 320], "id": [26, 40, 59, 132, 135, 151, 227, 277, 284, 297, 306, 320, 616, 676, 677, 716, 805, 851, 893, 902, 919, 925, 1196, 1297, 1310, 1338, 1339, 1341], "id_char": 1341, "id_var": [236, 287, 320, 859, 885, 919], "ideal": 131, "ident": [33, 129, 183, 184, 320, 444, 615, 616, 805, 824, 825, 919, 998, 1000, 1050, 1195, 1196, 1310], "identif": [140, 146], "identifi": [129, 137, 236, 243, 285, 287, 298, 320, 859, 883, 885, 919], "idiograph": 925, "idiomat": [801, 829, 836, 869, 888, 902, 919], "idx": [149, 211, 224, 297, 320, 356, 369, 547, 845, 893, 919, 968, 1156, 1240], "idx_lit": 1240, "idx_rx": 1240, "ieee": [714, 805], "if_set": [5, 30], "if_table_exist": [38, 320], "ifnul": 1331, "ignor": [39, 137, 164, 165, 169, 234, 270, 289, 320, 332, 334, 357, 377, 411, 441, 463, 465, 466, 517, 526, 589, 590, 653, 669, 722, 724, 736, 771, 789, 805, 886, 919, 925, 932, 933, 956, 975, 1013, 1047, 1072, 1074, 1075, 1126, 1135, 1173, 1174, 1227, 1243, 1310], "ignore_error": [135, 136, 145, 149, 153], "ignore_nul": [234, 270, 320, 332, 334, 357, 463, 465, 466, 526, 653, 669, 722, 724, 736, 771, 789, 805, 932, 933, 956, 1072, 1074, 1075, 1135, 1227, 1243, 1310], "ignore_spac": 925, "ij": 677, "ij67": 677, "ijkl": 1333, "ilmsuxu": [654, 662, 663, 666, 676, 677, 1228, 1236, 1237, 1240, 1250, 1251], "imbal": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "imdb_scor": 1319, "immedi": [174, 607, 727, 731, 746, 747, 749, 750, 761, 762, 777, 780, 783, 787, 792, 793, 796, 805, 1187, 1310, 1320], "immut": [278, 320, 1291, 1310], "impact": [211, 320, 845, 919, 1319, 1338], "impl": 151, "implement": [45, 123, 137, 178, 212, 230, 306, 320, 323, 324, 486, 556, 580, 581, 583, 585, 587, 588, 701, 711, 767, 805, 902, 1093, 1164, 1210, 1212, 1293, 1310, 1315], "implic": [410, 805, 832, 919], "implicit": [289, 320, 886, 919], "implicitli": [202, 320, 473, 795, 805, 841, 919, 1338], "implod": [805, 1310, 1328], "import": [10, 16, 28, 35, 37, 39, 40, 41, 42, 45, 51, 66, 69, 122, 123, 126, 127, 135, 137, 138, 144, 145, 149, 155, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 182, 189, 190, 191, 194, 209, 211, 224, 226, 243, 245, 260, 267, 275, 277, 282, 287, 288, 290, 320, 323, 324, 378, 409, 410, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 563, 564, 570, 597, 618, 620, 622, 624, 626, 628, 631, 633, 635, 732, 745, 746, 747, 748, 749, 750, 751, 784, 792, 793, 801, 805, 817, 823, 827, 831, 832, 833, 835, 845, 850, 855, 872, 885, 919, 976, 1001, 1003, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1073, 1102, 1105, 1107, 1108, 1197, 1220, 1283, 1310, 1315, 1320, 1335, 1338, 1341], "improv": [38, 49, 141, 152, 225, 320, 555, 805, 849, 919], "in_plac": [215, 264, 292, 320, 1188, 1217, 1224, 1310], "includ": [7, 20, 30, 37, 39, 40, 46, 56, 127, 137, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 165, 166, 174, 185, 189, 197, 202, 227, 243, 245, 255, 266, 282, 284, 288, 289, 320, 408, 443, 473, 477, 488, 493, 563, 604, 619, 621, 623, 625, 627, 629, 630, 632, 634, 676, 677, 681, 682, 685, 686, 732, 741, 781, 782, 805, 831, 841, 851, 877, 886, 919, 925, 1011, 1012, 1049, 1071, 1082, 1095, 1099, 1185, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1250, 1251, 1255, 1256, 1259, 1310, 1338], "include_bom": [37, 46, 320, 919], "include_boundari": [211, 320, 845, 919], "include_break": [408, 604, 805, 1011, 1185, 1310], "include_breakpoint": [488, 805, 1095, 1310], "include_categor": 925, "include_categori": [488, 805, 1095, 1310], "include_col": 165, "include_file_path": [140, 145, 146, 147, 149, 152, 153, 154], "include_head": [37, 40, 46, 136, 284, 320, 919], "include_index": 127, "include_init": 741, "include_kei": [243, 255, 320], "include_nul": [289, 320, 886, 919], "inclus": [179, 211, 252, 320, 447, 493, 617, 620, 622, 624, 626, 628, 631, 633, 635, 681, 682, 727, 746, 747, 749, 750, 761, 762, 792, 793, 805, 845, 868, 919, 1053, 1099, 1255, 1256, 1310], "incom": 137, "incompat": 116, "incomplet": [612, 805, 1192, 1310], "incorpor": 1338, "incorrect": [261, 320, 458, 555, 556, 640, 805, 873, 902, 919, 1064, 1213, 1310], "incorrectli": [135, 547], "increas": [40, 51, 135, 140, 146, 147, 154, 320, 407, 616, 805, 1010, 1196, 1310], "independ": [57, 58, 162, 165, 169, 282, 320, 643, 805, 826, 827, 837, 864, 875, 919], "index": [40, 104, 123, 127, 130, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 157, 178, 205, 207, 211, 216, 221, 223, 245, 250, 252, 253, 254, 263, 265, 277, 278, 280, 287, 289, 290, 296, 297, 320, 330, 343, 344, 345, 347, 350, 351, 356, 364, 369, 464, 480, 481, 483, 512, 513, 522, 523, 524, 540, 541, 547, 617, 620, 622, 624, 626, 628, 631, 633, 635, 639, 641, 648, 654, 662, 666, 668, 680, 691, 701, 730, 761, 764, 805, 843, 845, 868, 874, 876, 885, 886, 892, 893, 919, 925, 942, 943, 944, 945, 946, 949, 950, 955, 963, 968, 1073, 1086, 1087, 1113, 1121, 1122, 1131, 1132, 1133, 1149, 1150, 1156, 1177, 1210, 1211, 1215, 1223, 1236, 1240, 1242, 1254, 1265, 1310, 1315, 1328, 1333], "index_column": [211, 252, 320, 617, 805, 845, 868, 919], "indexord": [277, 278, 320], "indic": [37, 40, 41, 45, 46, 47, 48, 49, 65, 66, 68, 82, 97, 107, 133, 135, 136, 137, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 162, 163, 169, 211, 252, 255, 261, 263, 275, 320, 346, 364, 480, 488, 494, 495, 496, 498, 499, 500, 501, 502, 503, 522, 540, 560, 561, 562, 563, 564, 565, 566, 617, 620, 622, 624, 626, 628, 631, 633, 635, 639, 641, 730, 731, 776, 805, 845, 868, 873, 874, 919, 923, 925, 963, 1086, 1095, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1131, 1149, 1210, 1211, 1215, 1286, 1310, 1341], "indistinguish": [37, 46, 320, 919], "individu": [40, 49, 174, 252, 277, 278, 282, 320, 556, 663, 704, 805, 826, 868, 919, 925, 997, 1237, 1310], "inequ": [591, 805], "inexact": [158, 159, 160, 161], "inf": [162, 165, 169, 342, 408, 495, 498, 604, 714, 805, 941, 1003, 1011, 1102, 1105, 1162, 1180, 1185, 1298, 1310, 1335], "infer": [37, 41, 45, 46, 47, 48, 49, 67, 81, 97, 122, 124, 125, 126, 127, 128, 135, 136, 137, 140, 144, 145, 146, 147, 149, 152, 153, 154, 230, 320, 555, 556, 613, 670, 690, 692, 693, 694, 697, 751, 765, 780, 805, 919, 1164, 1193, 1244, 1264, 1266, 1267, 1268, 1271, 1310], "infer_schema": [135, 149], "infer_schema_length": [125, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 320, 670, 919, 1244], "inference_length": [694, 1268], "inference_s": [230, 320], "infin": [698, 714, 805, 1272], "infinit": [498, 714, 805, 1105, 1310], "influenc": [140, 855, 919], "influxdb": 137, "info": [139, 150, 151, 157], "inform": [19, 23, 37, 38, 41, 45, 46, 47, 48, 49, 56, 139, 145, 147, 149, 150, 151, 152, 153, 154, 158, 160, 176, 187, 189, 320, 324, 505, 556, 647, 654, 662, 663, 666, 676, 677, 805, 826, 831, 864, 919, 923, 927, 993, 1114, 1222, 1228, 1236, 1237, 1240, 1250, 1251, 1310], "inherit": [253, 320, 410, 805, 832, 919], "init": [174, 1319], "initcap": 1331, "initi": [32, 33, 34, 40, 81, 174, 320, 741, 755, 795, 1338], "initialis": [69, 137, 174, 919], "inject": [40, 51, 320], "inlin": [24, 255, 320, 654, 662, 663, 666, 676, 677, 1228, 1236, 1237, 1240, 1250, 1251, 1328], "inner": [60, 77, 164, 225, 227, 289, 320, 357, 368, 412, 526, 546, 556, 610, 711, 784, 805, 849, 851, 886, 919, 956, 967, 1014, 1135, 1155, 1164, 1293, 1310, 1326, 1338], "inner_dtyp": [164, 167], "innermost": [164, 167], "innter": 955, "inprocessqueri": [826, 919], "input": [0, 51, 57, 97, 125, 127, 135, 136, 181, 191, 210, 227, 230, 234, 243, 245, 249, 258, 259, 263, 266, 270, 283, 294, 295, 299, 320, 329, 390, 397, 464, 467, 479, 493, 551, 555, 556, 568, 597, 611, 612, 644, 650, 668, 678, 680, 686, 687, 688, 689, 691, 693, 705, 713, 721, 723, 725, 727, 730, 733, 734, 735, 736, 744, 751, 753, 761, 762, 765, 766, 767, 769, 771, 774, 783, 787, 789, 795, 801, 805, 817, 821, 833, 844, 851, 866, 870, 871, 874, 877, 882, 889, 890, 895, 919, 923, 999, 1073, 1099, 1160, 1161, 1164, 1183, 1191, 1192, 1215, 1219, 1242, 1254, 1265, 1267, 1310, 1332, 1333, 1335], "input_wildcard_expans": [805, 923], "insensit": [655, 663, 665, 667, 676, 677, 678, 925, 1228, 1229, 1237, 1239, 1240, 1241, 1250, 1251, 1252], "insensitive_match": [654, 666], "insert": [38, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 216, 284, 286, 320, 639, 653, 669, 700, 805, 884, 919, 1211, 1227, 1243, 1274, 1310], "insert_aft": [40, 320], "insert_befor": [40, 320], "insert_chart": [40, 320], "insert_column": 320, "insid": [58, 555, 805, 827, 919], "inspect": [805, 919], "instal": [32, 33, 34, 101, 127, 135, 136, 138, 141, 143, 187, 279, 320, 415, 571, 732, 875, 919, 1017, 1292, 1310], "instanc": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 165, 169, 199, 204, 320, 568, 741, 755, 801, 817, 823, 855, 892, 893, 919, 1078, 1310], "instanti": [38, 40, 137, 167, 258, 276, 277, 294, 320, 870, 889, 919, 924, 1288, 1289, 1310], "instantli": [58, 827, 919], "instead": [33, 37, 39, 43, 44, 51, 58, 59, 124, 125, 128, 135, 136, 137, 140, 146, 147, 149, 154, 155, 162, 163, 164, 165, 169, 180, 181, 209, 222, 223, 226, 230, 236, 241, 243, 253, 254, 255, 258, 259, 260, 263, 277, 278, 279, 283, 295, 296, 320, 323, 324, 345, 364, 390, 391, 393, 394, 408, 422, 447, 464, 467, 477, 540, 570, 604, 611, 641, 653, 661, 672, 673, 685, 686, 687, 688, 689, 700, 713, 720, 727, 729, 731, 738, 746, 747, 749, 750, 751, 761, 762, 777, 780, 783, 784, 787, 792, 793, 796, 805, 820, 821, 827, 837, 850, 859, 870, 871, 872, 874, 882, 890, 891, 892, 894, 919, 925, 944, 963, 972, 988, 991, 992, 1011, 1024, 1032, 1033, 1053, 1073, 1092, 1149, 1185, 1191, 1210, 1212, 1215, 1224, 1227, 1235, 1246, 1247, 1259, 1260, 1261, 1274, 1291, 1292, 1310, 1315, 1319, 1320, 1324, 1338, 1339], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 41, 45, 46, 47, 48, 49, 53, 60, 67, 125, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 181, 183, 189, 197, 200, 201, 205, 207, 209, 212, 213, 214, 216, 221, 223, 224, 226, 229, 230, 240, 241, 250, 252, 253, 256, 262, 263, 265, 268, 271, 276, 280, 283, 288, 291, 293, 296, 297, 303, 314, 320, 329, 352, 356, 364, 366, 369, 371, 372, 389, 390, 407, 411, 415, 440, 463, 465, 466, 470, 471, 472, 478, 480, 481, 483, 486, 487, 488, 509, 515, 517, 522, 523, 524, 525, 535, 540, 541, 543, 545, 546, 547, 549, 596, 598, 601, 602, 604, 607, 610, 613, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 648, 652, 662, 668, 670, 674, 675, 676, 680, 682, 683, 691, 694, 695, 700, 708, 712, 713, 719, 721, 727, 737, 739, 745, 748, 751, 757, 759, 761, 762, 776, 777, 780, 781, 782, 786, 787, 790, 791, 794, 796, 805, 821, 824, 831, 839, 840, 843, 846, 850, 854, 864, 874, 876, 879, 881, 882, 887, 888, 892, 893, 894, 899, 910, 919, 924, 925, 942, 943, 951, 955, 963, 965, 968, 970, 987, 988, 997, 998, 1004, 1010, 1013, 1014, 1017, 1046, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1086, 1087, 1093, 1094, 1095, 1113, 1117, 1118, 1124, 1126, 1131, 1132, 1133, 1134, 1144, 1149, 1150, 1152, 1154, 1155, 1156, 1158, 1170, 1171, 1173, 1174, 1177, 1179, 1180, 1183, 1184, 1185, 1187, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1218, 1223, 1226, 1236, 1242, 1244, 1248, 1249, 1250, 1254, 1256, 1257, 1265, 1268, 1269, 1274, 1281, 1282, 1288, 1295, 1300, 1310, 1322, 1325, 1338, 1341], "int16": [1, 54, 282, 320, 405, 406, 438, 707, 805, 925, 1008, 1009, 1044, 1281, 1288, 1310], "int32": [1, 40, 54, 59, 122, 125, 162, 164, 165, 211, 224, 252, 277, 320, 355, 356, 358, 377, 391, 418, 428, 429, 430, 431, 436, 459, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 711, 780, 805, 845, 868, 919, 924, 925, 951, 954, 955, 957, 975, 1020, 1030, 1034, 1035, 1036, 1042, 1065, 1073, 1162, 1293, 1294, 1310], "int64": [1, 39, 40, 53, 54, 59, 60, 81, 99, 135, 144, 185, 195, 204, 211, 244, 252, 257, 258, 272, 279, 320, 350, 351, 353, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 405, 406, 448, 449, 450, 451, 452, 453, 454, 458, 464, 467, 555, 556, 582, 584, 586, 601, 609, 617, 620, 622, 624, 626, 628, 631, 633, 635, 670, 695, 707, 711, 727, 734, 753, 761, 762, 765, 780, 787, 801, 805, 828, 836, 845, 863, 868, 869, 870, 919, 925, 949, 950, 952, 953, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 1008, 1009, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1064, 1066, 1073, 1164, 1189, 1269, 1281, 1291, 1292, 1293, 1294, 1310], "int64arrai": [1285, 1310], "int8": [1, 54, 81, 204, 320, 368, 369, 405, 406, 423, 426, 432, 433, 439, 443, 456, 457, 546, 707, 777, 780, 796, 805, 924, 967, 968, 1008, 1009, 1013, 1025, 1028, 1038, 1039, 1045, 1049, 1062, 1063, 1155, 1194, 1281, 1291, 1298, 1310], "int_rang": [211, 288, 297, 306, 320, 727, 764, 783, 845, 855, 893, 902, 919], "integ": [37, 40, 46, 65, 66, 68, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 156, 163, 165, 168, 170, 194, 211, 252, 275, 278, 320, 333, 396, 443, 476, 477, 596, 602, 604, 609, 616, 617, 629, 668, 691, 695, 721, 727, 757, 761, 762, 780, 805, 835, 845, 868, 919, 925, 996, 1049, 1085, 1183, 1185, 1189, 1196, 1203, 1210, 1242, 1265, 1269, 1291, 1310, 1332, 1338, 1341], "integer_list": 77, "integr": [40, 282, 320, 620, 622, 624, 626, 628, 631, 633, 635, 805, 1341], "intend": [1, 158, 159, 160, 161, 700, 1274], "intens": [230, 306, 320, 597, 805, 1164, 1310], "interact": [165, 169, 189, 320, 323, 831, 919, 1310, 1315], "interchang": [123, 178], "interest": [136, 444, 447, 1050, 1053], "interfac": [0, 112, 113, 177, 817, 928, 1338], "interleav": 1333, "intermedi": [217, 320, 848, 919, 1341], "intern": [41, 42, 137, 156, 223, 272, 320, 477, 805, 1285, 1310, 1320], "interoper": [176, 927], "interpol": [189, 247, 312, 320, 472, 492, 559, 605, 627, 628, 778, 805, 831, 865, 908, 919, 1012, 1098, 1186, 1202, 1310, 1327], "interpolate_bi": [805, 1310], "interpolationmethod": [491, 805, 1097, 1310], "interpret": [126, 128, 135, 136, 149, 320, 377, 919, 975], "intersect": [40, 320, 537, 925, 1146, 1337], "interv": [211, 252, 290, 320, 408, 442, 455, 488, 493, 604, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 868, 919, 1011, 1025, 1027, 1028, 1034, 1036, 1038, 1039, 1042, 1044, 1045, 1048, 1052, 1061, 1062, 1095, 1099, 1185, 1310, 1327], "intoexpr": [181, 210, 211, 252, 258, 259, 263, 266, 283, 294, 295, 299, 320, 335, 353, 373, 376, 379, 390, 415, 440, 464, 470, 480, 488, 492, 493, 516, 536, 537, 538, 539, 597, 611, 612, 620, 622, 624, 626, 628, 631, 633, 635, 639, 641, 650, 655, 665, 667, 678, 681, 682, 683, 688, 689, 705, 713, 723, 725, 730, 733, 734, 735, 736, 737, 739, 741, 744, 748, 755, 769, 771, 774, 780, 783, 787, 789, 805, 821, 844, 845, 868, 870, 871, 874, 877, 882, 889, 890, 895, 919, 923, 952, 971, 974, 977, 1017, 1073, 1079, 1098, 1099, 1125, 1191, 1192, 1211, 1215, 1241, 1255, 1256, 1257, 1262, 1263, 1310], "intoexprcolumn": [202, 216, 320, 352, 356, 357, 364, 389, 390, 397, 442, 470, 473, 515, 523, 526, 535, 540, 598, 602, 638, 641, 662, 668, 671, 680, 685, 686, 687, 691, 695, 700, 712, 713, 727, 732, 746, 747, 749, 750, 761, 762, 792, 793, 795, 805, 841, 874, 919, 951, 955, 956, 963, 999, 1048, 1061, 1079, 1124, 1132, 1135, 1144, 1149, 1180, 1236, 1242, 1245, 1254, 1259, 1260, 1261, 1265, 1274, 1310], "introduc": [50, 90, 690, 692, 693, 1264, 1266, 1267], "introduct": 1337, "intuit": [477, 805, 925], "invalid": [37, 46, 113, 135, 136, 149, 182, 320, 391, 670, 671, 695, 714, 805, 919, 972, 988, 1244, 1245, 1269, 1310], "invalid_valu": 972, "invalidoperationerror": [612, 805, 1192, 1310, 1336], "invari": [855, 919], "invers": [337, 338, 339, 340, 341, 342, 805, 936, 937, 938, 939, 940, 941, 1291, 1310, 1335], "invert": 925, "invok": [174, 555, 805], "involv": [202, 320, 841, 919], "io": [35, 37, 40, 41, 42, 45, 133, 135, 141, 142, 143, 144, 145, 148, 149, 151, 152, 153, 190, 260, 320, 410, 479, 570, 805, 832, 872, 919], "iobas": [43, 44, 144, 145, 190, 260, 320, 410, 570, 574, 805, 832, 872, 919], "ipc": [41, 42, 47, 141, 142, 143, 152, 155, 320, 817, 919], "ipccompress": [41, 42, 320], "is_between": [805, 1310], "is_dupl": [320, 805, 1310], "is_elementwis": [555, 805, 923], "is_empti": [320, 1310], "is_finit": [805, 1310], "is_first_distinct": [805, 1310], "is_in": [99, 202, 320, 805, 1310], "is_infinit": [805, 1310], "is_last_distinct": [805, 1310], "is_nan": [193, 320, 805, 834, 919, 1310], "is_not_nan": [805, 1310], "is_not_nul": [805, 1310], "is_nul": [194, 320, 805, 835, 919, 1310], "is_numer": 1341, "is_odd": [258, 320, 870, 919, 925], "is_selector": 925, "is_sort": 1310, "is_uniqu": [320, 805, 1310], "isn": 795, "iso": [428, 447, 456, 457, 1030, 1053, 1062, 1063, 1333], "iso8601": [135, 136, 149, 447, 1053], "iso_lang": 1333, "iso_year": 459, "isodow": 1334, "isoweek": 1334, "isoyear": 1334, "issu": [92, 93, 96, 97, 100, 107, 109, 120, 135, 136, 137, 149, 320, 405, 406, 707, 805, 1008, 1009, 1281, 1310, 1338], "ital": [40, 320], "item": [13, 59, 136, 209, 253, 256, 320, 352, 356, 357, 411, 469, 515, 517, 524, 526, 535, 638, 683, 805, 951, 955, 956, 1013, 1077, 1124, 1126, 1133, 1135, 1144, 1209, 1257, 1310], "iter": [57, 58, 59, 69, 122, 125, 137, 168, 170, 181, 191, 202, 210, 211, 222, 223, 224, 227, 252, 253, 254, 255, 258, 259, 266, 283, 284, 294, 295, 298, 299, 320, 390, 407, 415, 473, 597, 650, 705, 713, 723, 725, 730, 732, 733, 734, 735, 736, 744, 769, 771, 774, 783, 787, 789, 795, 801, 805, 821, 833, 841, 844, 845, 851, 868, 870, 871, 877, 882, 889, 890, 895, 919, 923, 924, 925, 1010, 1017, 1082, 1210, 1310, 1341], "iter_batch": 137, "iter_column": 320, "iter_row": [224, 253, 254, 255, 320], "iter_slic": 320, "its": [91, 129, 157, 197, 278, 320, 419, 442, 455, 464, 555, 615, 650, 704, 795, 805, 829, 836, 888, 919, 993, 1021, 1048, 1061, 1071, 1073, 1195, 1291, 1310, 1340], "itself": [163, 320, 323, 324, 556, 619, 621, 623, 625, 627, 629, 630, 632, 634, 781, 782, 805, 853, 919, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1310, 1315, 1319, 1320, 1338], "ix": [245, 320], "j": [284, 320, 1329], "jax": [277, 320, 1289, 1310], "jax_enable_x64": [277, 320], "jaxexporttyp": [277, 320], "jjk": 925, "jkl": [663, 1237], "jklmn": 1333, "job": [822, 919], "join": [46, 47, 48, 49, 50, 51, 57, 58, 59, 90, 202, 226, 227, 289, 320, 473, 491, 597, 653, 784, 805, 826, 827, 837, 841, 850, 851, 864, 875, 886, 891, 919, 1227, 1320, 1322, 1328, 1337, 1338], "join_asof": [225, 320, 849, 919], "join_nul": [225, 320, 849, 919], "join_wher": [320, 919], "joinstrategi": [51, 225, 320, 849, 919], "joinvalid": [225, 320, 849, 919], "jpy": 1341, "json": [2, 3, 5, 6, 43, 44, 132, 144, 145, 151, 153, 190, 260, 320, 410, 479, 570, 574, 670, 671, 702, 805, 817, 832, 872, 919, 923, 1244, 1245, 1277], "json_path": [671, 1245], "json_path_match": [670, 1244], "json_stat": 5, "json_str": [144, 145], "json_val": [671, 1245], "jsonpath": [670, 671, 1244, 1245], "jst": [129, 925], "jul": [690, 1264, 1333], "juli": [1053, 1333, 1334], "just": [40, 127, 137, 149, 236, 287, 320, 859, 885, 919, 925], "k": [181, 255, 283, 284, 320, 389, 390, 402, 505, 712, 713, 805, 821, 882, 919, 987, 1005, 1114, 1295, 1310], "k_2": [647, 805, 1222, 1310], "k_3": [647, 805, 1222, 1310], "kanji": 925, "karen": [245, 320], "kathmandu": [1023, 1024, 1051], "kb": [197, 320, 378, 976, 1071, 1310], "kde": [1310, 1315], "keep": [51, 135, 136, 145, 149, 152, 153, 202, 285, 289, 290, 320, 479, 555, 573, 581, 611, 733, 805, 841, 883, 886, 919, 1191, 1310], "kei": [33, 37, 40, 41, 45, 46, 47, 48, 49, 51, 56, 59, 145, 147, 149, 151, 152, 153, 154, 179, 211, 223, 225, 226, 237, 243, 249, 251, 254, 255, 289, 320, 473, 556, 611, 612, 678, 746, 749, 787, 805, 845, 849, 850, 860, 866, 867, 886, 919, 925, 929, 1191, 1192, 1252, 1310, 1326], "kept": [285, 320, 883, 919], "keyerror": 16, "keystrok": 801, "keyword": [39, 139, 147, 150, 165, 169, 187, 210, 244, 253, 258, 259, 279, 294, 295, 299, 320, 473, 601, 705, 783, 787, 795, 805, 844, 863, 870, 871, 889, 890, 895, 919, 1292, 1310, 1323], "kl": 677, "kleen": [332, 334, 722, 723, 724, 725, 805, 932, 933, 1310], "klmnoopqrstuvwxyz": [224, 320], "knight": 1319, "know": [51, 137, 245, 287, 320, 547, 555, 805, 885, 919], "known": [141, 369, 547, 902, 968, 1156], "kurtosi": [805, 1310], "kuzu_db_conn": 137, "kwarg": [31, 32, 36, 50, 61, 62, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 134, 137, 138, 165, 167, 169, 187, 202, 244, 279, 320, 323, 601, 805, 841, 863, 894, 919, 923, 1292, 1310, 1315, 1323, 1338], "k\u00f9zudb": 137, "l1": 59, "l2": 59, "label": [211, 277, 282, 320, 323, 324, 408, 604, 618, 619, 621, 623, 625, 627, 630, 632, 634, 805, 845, 864, 919, 1011, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1310, 1315], "label_column": [282, 320], "labelangl": [320, 323, 1310, 1315], "lag": [263, 320, 364, 540, 641, 735, 805, 874, 919, 963, 1149, 1215, 1310], "lake": [39, 139, 150, 320, 817], "lambda": [149, 204, 230, 244, 245, 249, 306, 320, 369, 465, 466, 547, 555, 556, 581, 582, 741, 742, 755, 766, 767, 779, 805, 855, 863, 866, 902, 919, 968, 1074, 1075, 1156, 1164, 1310], "land": [415, 1017], "languag": [149, 211, 226, 252, 290, 320, 437, 442, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061, 1073, 1310], "larg": [10, 11, 14, 51, 137, 140, 146, 154], "large_str": [224, 272, 279, 320], "larger": [10, 46, 47, 48, 49, 57, 58, 477, 737, 805, 826, 827, 919], "largest": [181, 283, 320, 390, 712, 713, 805, 821, 882, 919, 1295, 1310], "last": [39, 145, 149, 152, 153, 158, 159, 160, 161, 213, 226, 229, 245, 255, 266, 271, 278, 285, 314, 320, 345, 356, 365, 407, 423, 434, 438, 456, 478, 499, 524, 542, 545, 547, 580, 581, 583, 585, 587, 588, 612, 649, 650, 668, 683, 691, 708, 730, 790, 801, 805, 850, 877, 881, 883, 910, 919, 925, 944, 955, 964, 1010, 1025, 1040, 1044, 1062, 1094, 1106, 1118, 1133, 1151, 1154, 1192, 1224, 1242, 1257, 1265, 1282, 1291, 1310, 1331, 1333], "last_column": [40, 320], "later": [226, 260, 320, 570, 850, 872, 919], "latest": [32, 123, 139, 150, 178, 440, 441, 568, 690, 693, 748, 1046, 1047, 1264, 1267], "latt": 925, "latter": [40, 199, 320, 1078, 1310], "lazi": [1, 59, 149, 165, 226, 244, 245, 267, 320, 556, 757, 777, 780, 796, 805, 831, 849, 850, 891, 895, 896, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 919, 925, 1319, 1320, 1321, 1322, 1323, 1325, 1338, 1341], "lazili": [135, 136, 149, 150, 151, 152, 153, 154, 827, 919], "lazy_fram": [57, 58], "lazyfram": [0, 1, 51, 52, 53, 54, 55, 57, 58, 59, 149, 150, 151, 152, 153, 154, 155, 158, 159, 165, 185, 190, 228, 244, 245, 260, 267, 320, 410, 473, 547, 570, 783, 784, 805, 817, 916, 917, 918, 924, 925, 1319, 1320, 1323, 1325, 1338, 1339, 1341], "lazygroupbi": [844, 845, 868, 919], "lbl": [277, 282, 320], "ldf": [1, 895, 896, 898, 900, 903, 904, 905, 906, 907, 908, 909], "ldot": [464, 805, 1073, 1310], "le": [659, 805, 1310], "lead": [14, 45, 129, 155, 234, 261, 263, 270, 320, 364, 480, 483, 540, 547, 555, 556, 640, 641, 685, 687, 737, 771, 789, 805, 855, 873, 874, 902, 919, 963, 1149, 1164, 1213, 1215, 1259, 1261, 1310], "leap": [427, 437, 1029, 1043], "leap_year": 427, "learn": [282, 320], "least": [103, 245, 320, 386, 387, 598, 662, 664, 805, 984, 985, 1180, 1236, 1238, 1310, 1331], "leav": [6, 236, 287, 320, 547, 859, 885, 919], "left": [15, 16, 40, 51, 158, 159, 160, 161, 211, 225, 226, 252, 289, 320, 408, 463, 464, 465, 466, 491, 493, 604, 617, 620, 622, 624, 626, 628, 631, 633, 635, 639, 711, 733, 741, 742, 746, 747, 749, 750, 755, 779, 792, 793, 795, 805, 845, 849, 850, 868, 886, 919, 1011, 1072, 1073, 1074, 1075, 1099, 1185, 1211, 1293, 1310, 1322, 1326, 1331], "left_clos": [408, 604, 805, 1011, 1185, 1310], "left_on": [225, 226, 289, 320, 849, 850, 886, 919], "left_right": [225, 320, 849, 919], "leftmost": [639, 805, 1211, 1310, 1333], "len": [12, 40, 165, 169, 185, 224, 245, 297, 301, 306, 320, 401, 556, 567, 569, 615, 738, 761, 805, 828, 888, 893, 897, 902, 919, 924, 1004, 1195, 1310], "len_byt": [12, 394, 673, 992, 1247], "len_char": [393, 672, 991, 1246], "length": [59, 60, 77, 140, 146, 149, 163, 167, 209, 211, 252, 265, 320, 323, 393, 407, 442, 455, 541, 547, 568, 611, 612, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 648, 668, 672, 673, 674, 675, 678, 680, 691, 700, 734, 777, 780, 781, 782, 796, 805, 845, 864, 868, 876, 919, 923, 991, 997, 1010, 1021, 1048, 1061, 1150, 1156, 1177, 1191, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1223, 1242, 1246, 1247, 1248, 1249, 1252, 1254, 1265, 1274, 1310, 1327, 1328, 1331], "leq": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "less": [149, 226, 320, 477, 507, 554, 555, 683, 805, 850, 919, 1257, 1341], "letter": [198, 303, 314, 320, 467, 655, 663, 665, 667, 678, 698, 753, 805, 838, 899, 910, 919, 925, 1229, 1237, 1239, 1241, 1252, 1272, 1333], "level": [10, 40, 41, 42, 45, 49, 132, 149, 152, 153, 154, 204, 230, 241, 267, 272, 320, 324, 473, 805, 817, 878, 919, 1285, 1310, 1338], "lexic": [63, 925, 994], "lf": [46, 47, 48, 49, 54, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 891, 892, 893, 897, 901, 919, 1327, 1338, 1341], "lf1": [784, 878, 919, 1323, 1325, 1339], "lf2": [784, 878, 919, 1323, 1325, 1339], "lf3": [919, 1323], "lf4": [919, 1323], "lf5": 919, "lf6": 919, "lf_other": [891, 919], "lib": [805, 1285, 1310], "librari": [1, 105, 137, 140, 555, 805, 923, 1341], "life": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "lifetim": [174, 816, 1325], "light": [40, 320], "like": [35, 37, 39, 41, 42, 43, 44, 45, 58, 123, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 190, 211, 218, 220, 225, 255, 260, 277, 278, 320, 323, 410, 416, 479, 519, 555, 573, 607, 662, 686, 687, 718, 801, 805, 822, 827, 832, 845, 919, 923, 1018, 1128, 1187, 1236, 1299, 1310, 1315], "limit": [10, 11, 49, 137, 138, 171, 201, 320, 372, 472, 478, 805, 840, 919, 1081, 1310, 1328, 1337], "line": [10, 20, 40, 135, 136, 140, 149, 209, 218, 220, 320, 323, 662, 1236, 1310, 1315], "line_termin": [37, 46, 320, 919], "linear": [189, 217, 247, 312, 320, 491, 492, 514, 559, 605, 627, 628, 735, 736, 778, 805, 831, 848, 865, 908, 919, 1012, 1097, 1098, 1123, 1186, 1202, 1310], "lineitem": [131, 136, 138], "list": [1, 13, 33, 39, 40, 51, 52, 54, 57, 58, 60, 66, 81, 97, 122, 124, 125, 126, 128, 129, 131, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 163, 164, 165, 169, 186, 191, 195, 197, 198, 202, 208, 210, 211, 215, 223, 240, 243, 252, 253, 254, 255, 258, 266, 273, 274, 282, 284, 285, 286, 288, 294, 299, 300, 320, 330, 357, 368, 369, 370, 408, 415, 469, 475, 480, 489, 497, 555, 556, 568, 569, 597, 604, 610, 613, 618, 619, 621, 623, 625, 627, 630, 632, 634, 649, 650, 661, 663, 665, 667, 681, 701, 703, 704, 711, 730, 732, 735, 746, 747, 749, 750, 752, 760, 762, 765, 767, 785, 787, 793, 801, 805, 829, 836, 838, 841, 844, 845, 870, 877, 883, 884, 889, 891, 895, 896, 919, 924, 925, 956, 967, 968, 969, 997, 1011, 1017, 1071, 1077, 1086, 1089, 1095, 1096, 1104, 1164, 1185, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1229, 1235, 1237, 1239, 1241, 1252, 1255, 1290, 1293, 1310, 1319, 1324, 1328, 1330, 1340, 1341], "list_of_seri": 767, "listtostructwidthstrategi": [547, 1156], "lit": [1, 331, 373, 493, 564, 580, 666, 734, 735, 741, 755, 777, 780, 796, 805, 1081, 1310], "liter": [15, 16, 20, 37, 39, 41, 45, 46, 47, 48, 49, 137, 145, 147, 149, 152, 153, 154, 168, 169, 170, 240, 258, 259, 263, 289, 294, 295, 320, 331, 373, 397, 419, 440, 461, 462, 470, 477, 482, 484, 493, 507, 554, 564, 576, 578, 591, 592, 602, 611, 612, 654, 655, 656, 665, 666, 667, 676, 677, 678, 705, 706, 714, 723, 725, 727, 733, 734, 735, 736, 744, 745, 748, 761, 765, 769, 771, 774, 783, 787, 789, 791, 805, 840, 870, 871, 874, 886, 889, 890, 919, 925, 971, 999, 1021, 1046, 1069, 1079, 1099, 1176, 1191, 1192, 1210, 1212, 1215, 1228, 1229, 1230, 1239, 1240, 1241, 1250, 1251, 1252, 1310, 1333], "littl": [254, 320, 377, 975], "lmn": 925, "ln": [463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310, 1331], "ln_a": 1332, "load": [3, 5, 6, 125, 127, 137, 139, 140, 146, 150, 151, 168, 170, 320, 805, 817, 919, 923, 1341], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 140, "load_workbook": 140, "loader": [282, 320], "lobster": [666, 1240], "loc": [320, 324], "local": [4, 39, 137, 139, 150, 151, 154, 320, 455, 599, 600, 805, 990, 993, 1023, 1024, 1048, 1051, 1061, 1181, 1182, 1310, 1320], "localhost": 137, "localis": [442, 455, 1061], "locat": [40, 147, 149, 152, 154, 199, 250, 280, 286, 320, 639, 805, 884, 919, 1078, 1086, 1210, 1211, 1310], "lock": 171, "log": [29, 53, 390, 460, 552, 578, 602, 713, 805, 1067, 1310, 1331], "log10": [805, 1310, 1331], "log10_a": 1332, "log16_a": 1332, "log1p": [805, 1310, 1331], "log1p_a": 1332, "log2": 1331, "logarithm": [550, 551, 552, 805, 1159, 1160, 1161, 1310, 1332], "logic": [59, 230, 306, 320, 323, 324, 332, 334, 410, 556, 711, 722, 723, 724, 725, 767, 805, 832, 837, 849, 872, 902, 919, 932, 933, 1164, 1291, 1293, 1310, 1315], "london": [420, 424, 441, 1022, 1026, 1047], "london_timezon": [441, 1047], "london_to_amsterdam": [441, 1047], "long": [198, 236, 245, 287, 288, 320, 377, 838, 859, 885, 919, 975], "longer": [135, 136, 149], "longest": 547, "look": [10, 211, 320, 373, 547, 845, 919, 971], "lookup": 801, "loop": [556, 805], "lose": [417, 1019], "lossi": [135, 136, 149], "love": [655, 678, 1229, 1252], "low": [17, 137, 397, 604, 805, 1185, 1310], "low_memori": [135, 136, 145, 147, 149, 153, 154], "lower": [149, 189, 211, 247, 312, 320, 397, 493, 553, 581, 605, 609, 627, 628, 727, 746, 747, 749, 750, 778, 792, 793, 805, 831, 845, 865, 908, 919, 999, 1012, 1099, 1162, 1186, 1189, 1202, 1298, 1310, 1328, 1331], "lower_bound": [211, 320, 397, 493, 805, 845, 919, 999, 1099, 1298, 1310], "lowercas": [587, 696, 698, 1270, 1272, 1333], "lowest": [553, 805], "lru_cach": [230, 320, 556, 805, 1164, 1310], "lst": 164, "lt": [157, 473, 720, 805, 1310], "ltrim": 1331, "lyric": [655, 678, 1229, 1252], "lz4": [41, 42, 45, 47, 49, 320, 919], "lzo": [45, 49, 320, 919], "m": [66, 68, 225, 320, 416, 417, 419, 424, 425, 444, 446, 447, 458, 662, 690, 692, 693, 697, 748, 749, 750, 751, 757, 849, 919, 925, 1018, 1019, 1021, 1026, 1027, 1050, 1052, 1053, 1064, 1236, 1264, 1266, 1267, 1271, 1323, 1333, 1334], "m_2": [647, 805, 1222, 1310], "m_3": [647, 805, 1222, 1310], "m_i": [647, 805, 1222, 1310], "machin": 1341, "maco": 157, "made": [33, 40, 137, 320, 447, 1053], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 59, 67, 69, 72, 122, 124, 125, 126, 128, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 174, 189, 190, 197, 199, 211, 225, 226, 227, 230, 252, 260, 267, 277, 279, 282, 288, 289, 290, 320, 323, 324, 393, 407, 408, 410, 415, 416, 417, 428, 437, 442, 444, 455, 467, 488, 522, 547, 555, 556, 567, 570, 604, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 665, 667, 670, 672, 677, 732, 734, 741, 742, 746, 747, 749, 750, 755, 779, 781, 782, 792, 793, 805, 826, 827, 831, 832, 837, 845, 849, 850, 851, 855, 868, 872, 878, 886, 892, 893, 902, 919, 991, 993, 994, 1010, 1011, 1012, 1017, 1018, 1019, 1030, 1043, 1048, 1050, 1061, 1071, 1078, 1095, 1131, 1164, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1239, 1241, 1244, 1246, 1289, 1292, 1294, 1310, 1315, 1341], "main": [157, 827, 919], "maintain": [46, 47, 48, 49, 266, 320, 370, 548, 639, 650, 715, 730, 805, 831, 877, 919, 969, 1157, 1211, 1296, 1310], "maintain_ord": [46, 47, 48, 49, 210, 225, 243, 245, 266, 285, 290, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 330, 370, 380, 385, 388, 390, 480, 483, 548, 556, 650, 713, 715, 730, 805, 827, 837, 844, 849, 864, 875, 877, 883, 896, 898, 900, 903, 904, 905, 906, 907, 908, 909, 919, 969, 1157, 1296, 1310], "maintainorderjoin": [225, 320, 849, 919], "major": [140, 277, 320], "make": [40, 59, 81, 122, 127, 135, 136, 139, 140, 141, 143, 147, 150, 237, 241, 248, 278, 290, 320, 323, 465, 466, 488, 587, 588, 597, 610, 682, 805, 860, 919, 923, 1074, 1075, 1095, 1256, 1291, 1310], "man": [679, 1253], "manag": [50, 89, 90, 816, 817, 1325, 1338], "mandatori": [40, 320], "mango": [659, 684, 1233, 1258], "mani": [137, 138, 154, 199, 320, 665, 667, 678, 1078, 1239, 1241, 1252, 1310, 1314], "manner": 137, "many_to_mani": [225, 320, 849, 919], "many_to_on": [225, 320, 849, 919], "map": [81, 124, 125, 135, 136, 137, 138, 141, 142, 147, 148, 149, 152, 165, 182, 185, 203, 223, 230, 249, 253, 254, 255, 257, 273, 320, 331, 442, 455, 555, 556, 580, 582, 583, 585, 587, 588, 611, 612, 678, 718, 766, 805, 823, 866, 869, 919, 924, 925, 1012, 1048, 1061, 1164, 1191, 1192, 1252, 1299, 1310, 1320, 1322, 1323, 1338], "map_": 109, "map_batch": [805, 919], "map_el": [100, 230, 320, 555, 721, 805, 1310], "map_field": [584, 586], "map_row": 320, "mapelementsstrategi": [556, 805], "mapping_strategi": [597, 805], "march": [444, 1050], "mariadb": 138, "mark": [40, 132, 320, 391, 805, 988, 1310], "mark_area": [1310, 1315], "mark_attr": [320, 323, 1310, 1315], "mark_bar": [320, 323, 1310, 1315], "mark_lin": [320, 323], "mark_point": [320, 323], "markdown": [7, 20, 174], "marker": [40, 320], "mask": [154, 165, 169, 218, 220, 320, 374, 494, 496, 499, 504, 599, 600, 654, 657, 666, 805, 972, 1082, 1099, 1100, 1103, 1106, 1112, 1181, 1182, 1212, 1228, 1231, 1240, 1301, 1310], "mass": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "massag": [236, 287, 320, 859, 885, 919], "match": [39, 40, 59, 66, 111, 122, 124, 125, 126, 128, 135, 137, 144, 145, 147, 153, 154, 158, 159, 160, 161, 182, 201, 225, 226, 253, 289, 320, 563, 564, 565, 611, 612, 629, 654, 655, 656, 659, 662, 663, 665, 666, 667, 670, 671, 676, 677, 678, 684, 690, 692, 693, 795, 801, 805, 823, 840, 849, 850, 886, 919, 925, 1070, 1191, 1192, 1203, 1228, 1229, 1230, 1233, 1236, 1237, 1239, 1240, 1241, 1244, 1245, 1250, 1251, 1252, 1258, 1264, 1266, 1267, 1310, 1333], "matches_overlap": [665, 667, 1241], "matches_supertyp": [201, 320, 840, 919], "materi": [230, 255, 306, 320, 826, 864, 902, 912, 919, 925, 1164, 1310], "materialis": [223, 224, 253, 254, 320], "math": [1, 10, 55, 245, 320, 409, 805, 1001, 1003, 1220, 1283, 1310, 1331, 1335, 1337], "mathemat": [714, 752, 805, 1331], "mathshortcut": [1, 55], "matplotlib": [157, 571, 864, 875, 919], "matter": [211, 223, 252, 254, 255, 274, 320, 617, 686, 687, 805, 845, 868, 919], "max": [25, 40, 45, 49, 132, 189, 201, 210, 232, 245, 252, 320, 324, 403, 472, 547, 555, 597, 607, 611, 612, 617, 619, 620, 640, 683, 734, 746, 749, 769, 785, 805, 831, 840, 844, 868, 919, 1006, 1012, 1081, 1156, 1187, 1198, 1213, 1257, 1310, 1319, 1328, 1331], "max_a": [252, 320, 617, 805, 868, 919], "max_binary_s": 137, "max_col": [163, 165], "max_colname_length": [209, 320], "max_color": [40, 320], "max_data_s": 169, "max_elem": 1328, "max_horizont": [320, 768], "max_items_per_column": [209, 320], "max_level": 132, "max_siz": [164, 165, 167, 169, 1341], "max_text_s": 137, "max_valu": 1341, "max_width": [547, 1156], "maxim": [307, 343, 805, 903, 942, 1310], "maximum": [10, 26, 37, 45, 46, 49, 67, 125, 128, 135, 136, 137, 140, 144, 145, 146, 149, 153, 155, 163, 164, 165, 167, 169, 209, 211, 231, 232, 320, 350, 394, 512, 557, 589, 599, 607, 668, 670, 673, 680, 691, 768, 769, 805, 845, 856, 919, 949, 992, 1031, 1121, 1165, 1173, 1181, 1187, 1242, 1244, 1247, 1254, 1265, 1310, 1327], "mb": [197, 320, 378, 1071, 1310], "me": [655, 678, 698, 1229, 1252, 1272], "mean": [45, 49, 135, 136, 141, 147, 149, 152, 174, 189, 201, 210, 211, 226, 234, 245, 252, 290, 299, 320, 437, 442, 455, 469, 472, 477, 617, 620, 621, 622, 624, 626, 628, 631, 633, 635, 647, 653, 662, 669, 746, 747, 749, 750, 751, 771, 792, 793, 795, 805, 831, 840, 844, 845, 850, 855, 868, 895, 919, 1012, 1043, 1048, 1061, 1077, 1081, 1199, 1222, 1227, 1236, 1243, 1310, 1327, 1328], "mean_horizont": [320, 770], "measur": [236, 287, 320, 324, 859, 885, 919], "measure_a": [320, 324], "measure_b": [320, 324], "median": [189, 245, 320, 472, 623, 624, 805, 831, 891, 919, 1012, 1200, 1310, 1331], "mediat": 1338, "medium": [40, 320], "megan": [237, 320, 860, 919], "melt": [287, 320, 885, 919], "member": [211, 320, 845, 919, 1104, 1310], "membership": [352, 515, 951, 1124], "memori": [14, 45, 49, 57, 58, 59, 122, 123, 126, 127, 128, 135, 136, 137, 139, 140, 141, 145, 147, 149, 150, 152, 153, 154, 178, 199, 230, 254, 255, 264, 278, 306, 320, 597, 608, 642, 805, 826, 827, 894, 919, 1078, 1164, 1188, 1216, 1217, 1291, 1310], "memory_map": [141, 147, 152], "memory_resourc": 894, "merg": [39, 225, 226, 237, 320, 849, 850, 860, 919], "merge_sort": [320, 919], "messi": [662, 664, 1236, 1238], "met": 795, "meta": [91, 410, 660, 805, 1234], "metadata": [0, 151, 817], "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 121, 123, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 162, 165, 169, 174, 176, 185, 189, 190, 193, 194, 199, 206, 210, 217, 223, 230, 241, 247, 253, 254, 255, 263, 285, 294, 301, 306, 312, 320, 329, 332, 333, 364, 397, 410, 444, 447, 461, 462, 470, 477, 479, 482, 484, 491, 507, 540, 554, 556, 574, 576, 578, 580, 581, 583, 585, 587, 588, 591, 592, 593, 596, 602, 605, 607, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 641, 655, 665, 667, 678, 686, 687, 688, 689, 694, 700, 706, 714, 716, 721, 737, 767, 778, 797, 798, 800, 801, 805, 806, 807, 810, 811, 812, 813, 814, 817, 827, 831, 832, 834, 835, 848, 865, 874, 883, 889, 894, 897, 902, 908, 919, 924, 927, 934, 963, 999, 1012, 1050, 1053, 1068, 1069, 1078, 1079, 1088, 1090, 1097, 1116, 1149, 1163, 1164, 1175, 1176, 1186, 1187, 1202, 1215, 1229, 1239, 1241, 1252, 1268, 1274, 1293, 1302, 1304, 1306, 1310, 1311, 1314, 1316, 1317, 1318, 1320, 1324], "metric": 137, "micro": [443, 1049], "microsecond": [66, 68, 211, 223, 226, 252, 254, 255, 274, 290, 320, 437, 440, 442, 447, 450, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 748, 749, 750, 751, 791, 792, 793, 805, 845, 850, 864, 868, 919, 925, 1043, 1046, 1048, 1056, 1061, 1073, 1310, 1334], "microsoft": [33, 40, 320], "mid_color": [40, 320], "midnight": 82, "midpoint": [189, 247, 312, 320, 605, 627, 628, 778, 805, 831, 865, 908, 919, 1012, 1186, 1202, 1310], "might": [135, 136, 149, 171, 225, 245, 278, 287, 320, 556, 716, 805, 849, 877, 885, 919], "millennia": 1334, "millennium": 1334, "milli": [443, 1049], "millisecond": [211, 226, 252, 290, 320, 426, 432, 437, 442, 451, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 925, 1043, 1048, 1057, 1061, 1073, 1310, 1334], "milliseconds_diff": [450, 451, 453], "mimic": 735, "min": [40, 45, 49, 189, 201, 239, 245, 252, 320, 404, 472, 556, 597, 607, 617, 625, 626, 746, 749, 774, 783, 805, 831, 840, 868, 919, 923, 1007, 1012, 1081, 1187, 1201, 1310, 1328, 1331, 1334, 1341], "min_a": [252, 320, 617, 805, 868, 919], "min_col": [163, 165], "min_color": [40, 320], "min_elem": 1328, "min_horizont": [320, 773, 783], "min_period": [407, 463, 465, 466, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 781, 782, 805, 1010, 1072, 1074, 1075, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1310], "min_siz": [164, 165, 167, 169, 1341], "min_valu": 1341, "mincol": 163, "minim": [310, 344, 351, 513, 642, 650, 805, 906, 943, 950, 1122, 1168, 1216, 1310], "minimum": [45, 49, 163, 164, 165, 167, 169, 204, 238, 239, 320, 463, 465, 466, 575, 590, 600, 607, 773, 774, 805, 861, 919, 1037, 1072, 1074, 1075, 1174, 1182, 1187, 1310, 1327, 1341], "minu": [437, 593, 805, 1043], "minut": [211, 226, 252, 290, 320, 426, 429, 431, 436, 437, 440, 442, 443, 452, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 748, 749, 750, 751, 791, 792, 793, 805, 845, 850, 868, 919, 925, 1043, 1046, 1048, 1058, 1061, 1073, 1310, 1334], "minutes_diff": 452, "misc": 1325, "miscellan": 817, "mismatch": [59, 114, 145, 153, 158, 160], "miss": [59, 135, 136, 149, 200, 206, 320, 372, 463, 465, 466, 471, 478, 500, 501, 547, 805, 839, 919, 1072, 1074, 1075, 1080, 1310], "missing_utf8_is_empty_str": [135, 136, 149], "mix": [11, 226, 278, 320, 734, 784, 850, 878, 919, 925, 1012, 1310], "mixin": 1, "mlnm": 430, "mm": [40, 320], "mn": 1333, "mno": [16, 20], "mnop": 1333, "mo": 751, "mocha": 925, "mod": [805, 1331], "mode": [38, 39, 46, 47, 48, 49, 57, 58, 158, 160, 245, 267, 320, 663, 777, 780, 796, 805, 826, 827, 837, 919, 1237, 1310, 1319, 1320, 1338], "model": [282, 320], "modifi": [135, 136, 149, 171, 174, 199, 215, 222, 223, 292, 320, 346, 441, 458, 654, 662, 663, 666, 676, 677, 696, 698, 699, 805, 934, 1047, 1064, 1078, 1228, 1236, 1237, 1240, 1250, 1251, 1270, 1272, 1273, 1310], "modul": [93, 101, 140, 804, 925, 1341], "modulu": [576, 805], "moment": [45, 187, 320, 505, 647, 805, 1114, 1222, 1310], "mon": [320, 323, 1334], "mondai": [211, 320, 415, 455, 457, 732, 845, 919, 1017, 1061, 1063], "monkei": [674, 675, 1248, 1249], "month": [211, 226, 252, 290, 320, 423, 434, 435, 437, 440, 442, 444, 447, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 745, 746, 747, 748, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 1025, 1040, 1041, 1043, 1046, 1048, 1050, 1053, 1061, 1073, 1310, 1334], "month_nam": [444, 447], "monthbegin": [435, 1041], "monthend": [434, 1040], "moos": 925, "more": [20, 40, 45, 49, 51, 59, 89, 90, 119, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 144, 145, 146, 147, 150, 151, 153, 158, 160, 165, 174, 176, 187, 189, 193, 202, 222, 223, 230, 236, 241, 253, 254, 256, 267, 277, 278, 282, 285, 287, 306, 320, 324, 333, 370, 393, 473, 477, 485, 505, 535, 548, 552, 555, 556, 596, 597, 638, 647, 663, 672, 690, 692, 693, 715, 726, 738, 754, 760, 763, 770, 772, 775, 776, 785, 795, 801, 805, 831, 834, 835, 841, 859, 878, 883, 885, 894, 919, 923, 925, 927, 969, 991, 993, 1012, 1091, 1092, 1114, 1144, 1157, 1164, 1209, 1222, 1237, 1246, 1264, 1266, 1267, 1289, 1291, 1296, 1310, 1325, 1326, 1336, 1339, 1340, 1341], "more_bi": [243, 266, 320, 650, 805, 877, 919], "more_column": [198, 286, 320, 467, 753, 805, 838, 884, 919, 925], "more_expr": [597, 730, 733, 734, 735, 736, 805], "more_nam": [701, 801], "most": [40, 122, 135, 136, 138, 149, 158, 159, 160, 161, 278, 320, 383, 384, 568, 577, 598, 612, 683, 805, 981, 982, 1169, 1180, 1192, 1257, 1291, 1310, 1322, 1338], "mostli": [272, 320, 473, 805], "move": [245, 255, 320, 415, 463, 464, 465, 466, 619, 621, 625, 632, 805, 1017, 1072, 1073, 1074, 1075, 1198, 1199, 1201, 1205, 1310], "mr": 894, "mssql": [38, 320], "much": [230, 288, 306, 320, 393, 394, 407, 522, 556, 672, 673, 767, 805, 902, 991, 992, 1010, 1131, 1164, 1246, 1247, 1310], "mul": 805, "multi": [8, 40, 135, 136, 282, 320, 467, 662, 805, 1236], "multi_fram": [40, 320], "multicolselector": 179, "multiindexselector": [179, 929], "multipl": [40, 57, 58, 59, 106, 135, 136, 140, 146, 149, 152, 153, 154, 163, 165, 169, 191, 197, 199, 202, 210, 211, 215, 224, 227, 243, 245, 255, 258, 261, 266, 289, 294, 299, 320, 390, 522, 555, 561, 568, 577, 578, 597, 611, 613, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 650, 701, 713, 730, 738, 755, 766, 768, 773, 779, 785, 788, 795, 801, 805, 817, 826, 827, 833, 841, 844, 845, 851, 870, 873, 877, 886, 889, 895, 902, 919, 934, 964, 1071, 1078, 1131, 1151, 1169, 1191, 1193, 1224, 1310, 1323, 1328], "multipli": [555, 618, 619, 621, 623, 625, 627, 630, 632, 634, 705, 805, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1310], "multithread": [266, 320, 650, 730, 805, 877, 919, 964, 1151, 1224, 1310], "must": [40, 69, 123, 124, 135, 139, 147, 150, 151, 154, 155, 189, 198, 211, 226, 227, 237, 245, 252, 253, 320, 408, 547, 556, 571, 604, 611, 612, 617, 678, 734, 746, 747, 795, 805, 831, 838, 845, 850, 851, 855, 860, 868, 875, 894, 919, 923, 1011, 1012, 1185, 1191, 1192, 1252, 1310], "mutual": [253, 320], "my": [151, 155, 320, 323, 1310, 1315], "my_column": 902, "my_column_": [284, 320], "my_column_0": [284, 320], "my_column_1": [284, 320], "my_column_2": [284, 320], "my_custom_aggreg": 767, "my_fil": 141, "my_holidai": [415, 732, 1017], "my_larger_than_ram_fil": [46, 47, 48, 49, 919], "my_long_fil": 149, "my_struct": 787, "mydf": 149, "myrol": 138, "mysql": 138, "n": [1, 12, 13, 17, 25, 37, 44, 46, 52, 53, 54, 55, 66, 68, 131, 135, 136, 140, 145, 149, 165, 183, 199, 205, 211, 213, 223, 224, 229, 230, 254, 255, 256, 263, 268, 271, 274, 276, 291, 303, 305, 314, 320, 336, 364, 369, 378, 380, 385, 388, 389, 390, 393, 394, 407, 411, 415, 417, 419, 425, 446, 458, 464, 470, 473, 481, 487, 509, 517, 523, 525, 535, 536, 540, 543, 545, 547, 549, 598, 601, 610, 630, 631, 634, 635, 638, 641, 647, 652, 668, 672, 673, 676, 677, 682, 683, 685, 686, 691, 693, 708, 712, 713, 714, 718, 719, 721, 739, 748, 749, 750, 751, 757, 759, 777, 780, 781, 782, 783, 786, 790, 794, 796, 805, 824, 843, 845, 846, 854, 874, 879, 881, 887, 899, 901, 910, 919, 925, 963, 968, 976, 987, 991, 992, 998, 1010, 1013, 1017, 1019, 1021, 1027, 1052, 1064, 1073, 1078, 1079, 1087, 1094, 1118, 1126, 1132, 1134, 1144, 1145, 1149, 1154, 1156, 1180, 1204, 1206, 1209, 1215, 1222, 1226, 1242, 1246, 1247, 1250, 1251, 1256, 1257, 1265, 1267, 1282, 1288, 1295, 1299, 1300, 1310, 1322, 1323, 1330, 1333, 1334, 1336, 1338, 1341], "n0": [369, 547], "n00": [968, 1156], "n01": [968, 1156], "n02": [968, 1156], "n1": [369, 547], "n2": [1, 369], "n3": 1, "n_1": [473, 805], "n_2": [473, 805], "n_3": [473, 805], "n_bar": 1327, "n_bit": 1333, "n_byte": [378, 393, 394, 672, 673, 1333], "n_char": [393, 394, 672, 673, 1333], "n_chunk": [320, 934, 1078, 1188, 1310], "n_elem": 1328, "n_even": 925, "n_field_strategi": [547, 1156], "n_film": 1319, "n_foo_uniqu": 1327, "n_kilobyt": 378, "n_row": [133, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 224, 320, 919], "n_thread": [135, 136], "n_uniqu": [320, 336, 805, 1310], "na": [279, 320, 684, 1292, 1310], "naiv": [419, 420, 693, 1021, 1022, 1267], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 46, 52, 53, 54, 55, 59, 81, 98, 122, 124, 125, 126, 127, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 160, 161, 162, 163, 165, 168, 169, 170, 181, 182, 185, 186, 191, 192, 193, 194, 198, 202, 203, 206, 207, 209, 210, 221, 222, 223, 225, 226, 227, 230, 232, 234, 236, 237, 239, 243, 245, 249, 253, 254, 255, 257, 258, 259, 266, 267, 270, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 305, 320, 324, 331, 369, 373, 374, 376, 379, 390, 397, 408, 444, 447, 467, 473, 493, 500, 501, 502, 503, 547, 556, 561, 565, 567, 569, 573, 597, 604, 614, 650, 663, 664, 676, 677, 678, 701, 703, 705, 713, 718, 722, 723, 724, 725, 726, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 753, 754, 759, 760, 763, 768, 769, 770, 771, 772, 773, 774, 775, 778, 781, 782, 783, 784, 786, 787, 788, 789, 790, 794, 795, 801, 805, 821, 823, 828, 829, 833, 834, 835, 838, 841, 844, 849, 850, 851, 859, 860, 866, 869, 870, 871, 877, 878, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 895, 901, 919, 923, 924, 925, 931, 968, 998, 1011, 1050, 1053, 1070, 1156, 1185, 1190, 1236, 1237, 1238, 1250, 1251, 1275, 1278, 1286, 1287, 1292, 1299, 1310, 1315, 1320, 1321, 1322, 1323, 1324, 1325, 1337, 1338, 1341], "name_gener": [284, 320], "named_agg": [299, 895], "named_bi": [210, 320, 844, 919], "named_expr": [258, 259, 294, 295, 320, 705, 783, 787, 870, 871, 889, 890, 919], "named_fram": [1323, 1338], "nameless": 127, "namespac": [1, 137, 319, 320, 323, 701, 784, 804, 817, 917, 918, 1310, 1315, 1341], "nan": [127, 165, 178, 193, 200, 278, 279, 320, 413, 414, 461, 462, 471, 482, 484, 491, 500, 501, 502, 503, 507, 554, 557, 575, 589, 590, 591, 592, 618, 644, 714, 737, 805, 834, 839, 919, 937, 941, 1015, 1016, 1080, 1107, 1108, 1173, 1174, 1197, 1219, 1291, 1292, 1310, 1341], "nan_as_nul": 178, "nan_max": [805, 1310], "nan_min": [805, 1310], "nan_to_nul": [127, 320, 919, 1310], "nana": 1333, "nanmax": [589, 590, 805, 1173, 1174, 1310], "nanosecond": [82, 211, 226, 252, 290, 320, 437, 442, 443, 453, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1049, 1059, 1061, 1073, 1310, 1334], "nansum": [618, 805, 1197, 1310], "nativ": [10, 38, 135, 137, 140, 141, 143, 147, 223, 230, 254, 255, 274, 278, 306, 320, 556, 767, 784, 805, 811, 878, 902, 919, 1164, 1291, 1310, 1314, 1338, 1341], "natur": [552, 805, 1161, 1310, 1326, 1332], "ndarrai": [126, 176, 202, 278, 320, 480, 639, 805, 841, 919, 927, 1086, 1210, 1211, 1291, 1310], "ndjson": [48, 919], "ne": [592, 805, 1176, 1310], "ne_miss": [202, 320, 805, 841, 919, 1069, 1310], "nearest": [53, 189, 226, 247, 312, 320, 396, 476, 491, 605, 627, 628, 778, 805, 831, 850, 865, 908, 919, 996, 1012, 1085, 1097, 1186, 1202, 1310, 1332], "nearest_pow2": 53, "necessari": [37, 38, 46, 50, 90, 140, 278, 320, 919, 1291, 1310], "need": [59, 92, 101, 129, 135, 136, 138, 147, 149, 152, 154, 174, 211, 252, 255, 264, 320, 323, 547, 617, 642, 676, 677, 678, 694, 751, 777, 780, 796, 805, 845, 868, 919, 1216, 1250, 1251, 1252, 1268, 1310, 1315, 1341], "neg": [13, 65, 66, 67, 68, 135, 136, 141, 143, 147, 156, 213, 229, 252, 263, 265, 271, 297, 320, 364, 540, 541, 601, 602, 617, 641, 648, 668, 680, 691, 805, 868, 874, 876, 892, 893, 919, 925, 963, 1094, 1118, 1149, 1150, 1183, 1215, 1223, 1242, 1254, 1265, 1282, 1310], "negat": [594, 805, 1178, 1310], "neither": [129, 140, 146, 256, 320, 369, 547, 968, 1156], "nest": [50, 129, 132, 166, 167, 197, 320, 817, 1071, 1310, 1338, 1341], "nest_asyncio": 157, "nesting_level": 166, "net": [663, 1237], "netherland": [226, 320, 850, 919], "never": [37, 46, 137, 225, 226, 253, 320, 849, 850, 919], "new": [38, 39, 40, 149, 174, 179, 205, 215, 216, 230, 241, 242, 245, 249, 284, 286, 288, 289, 294, 295, 320, 331, 419, 469, 479, 481, 491, 581, 582, 597, 611, 612, 616, 676, 677, 682, 683, 701, 703, 801, 805, 817, 843, 866, 884, 886, 889, 890, 902, 919, 929, 931, 1021, 1077, 1087, 1177, 1190, 1191, 1192, 1196, 1250, 1251, 1256, 1257, 1275, 1278, 1287, 1310, 1338, 1340], "new_column": [135, 136, 140, 149], "new_dai": 440, "new_dat": 437, "new_df": [289, 320, 886, 919], "new_fil": [35, 37, 41, 42, 45, 320], "new_from_index": 1310, "new_id": [284, 320], "new_lf": [886, 919], "new_tabl": 1340, "new_valu": [741, 742, 755, 779], "new_york": 749, "newli": 51, "newlin": [44, 135, 145, 149, 153, 320], "next": [18, 53, 211, 226, 252, 290, 320, 372, 415, 437, 442, 455, 607, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1017, 1043, 1048, 1061, 1187, 1310], "next_batch": 136, "next_pow2": 53, "nfruit": 691, "nl": [415, 732, 1017], "nnel_id": 129, "no1": 925, "no_default": [206, 320, 611, 612, 678, 805, 1191, 1192, 1252, 1310], "no_optim": [46, 47, 48, 49, 57, 58, 826, 827, 855, 864, 919], "nodataerror": [135, 136, 140, 146, 149], "nodd": [662, 1236], "node": [822, 826, 847, 855, 859, 864, 866, 919], "nodefault": [206, 320, 611, 612, 678, 805, 1191, 1192, 1252, 1310], "non": [4, 5, 37, 39, 40, 46, 51, 66, 67, 127, 156, 181, 188, 224, 236, 252, 258, 259, 263, 283, 284, 287, 289, 294, 295, 320, 372, 389, 390, 393, 397, 401, 402, 415, 441, 478, 493, 547, 555, 556, 562, 597, 598, 611, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 656, 663, 672, 676, 677, 678, 698, 700, 705, 712, 713, 723, 725, 733, 734, 735, 736, 738, 740, 744, 751, 769, 771, 774, 781, 782, 783, 787, 789, 805, 821, 830, 859, 868, 870, 871, 874, 882, 885, 886, 889, 890, 919, 923, 925, 987, 991, 999, 1004, 1005, 1012, 1017, 1047, 1099, 1156, 1164, 1180, 1191, 1192, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1215, 1230, 1237, 1246, 1250, 1251, 1272, 1274, 1291, 1295, 1310, 1330, 1338], "non_exist": [441, 1047], "non_numer": [37, 46, 320, 919], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 66, 67, 68, 69, 77, 81, 90, 122, 124, 125, 126, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 177, 183, 188, 189, 193, 194, 200, 201, 202, 204, 206, 209, 211, 212, 217, 221, 225, 226, 228, 230, 233, 236, 241, 242, 245, 252, 253, 256, 260, 263, 265, 266, 272, 273, 275, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 301, 305, 320, 332, 334, 335, 347, 348, 349, 356, 357, 369, 372, 393, 394, 397, 401, 402, 403, 406, 408, 413, 414, 422, 437, 440, 441, 447, 462, 463, 464, 465, 466, 467, 470, 471, 472, 478, 485, 486, 488, 491, 492, 493, 500, 501, 502, 503, 508, 510, 511, 518, 524, 526, 528, 535, 536, 537, 538, 539, 541, 547, 555, 556, 567, 570, 571, 572, 574, 579, 592, 593, 594, 595, 597, 598, 604, 607, 608, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 648, 649, 653, 654, 656, 658, 659, 660, 663, 666, 668, 669, 670, 671, 672, 673, 674, 675, 680, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 695, 697, 700, 701, 702, 703, 704, 711, 718, 723, 724, 725, 727, 733, 734, 735, 736, 737, 738, 740, 744, 746, 747, 748, 749, 750, 751, 753, 754, 761, 762, 763, 764, 765, 766, 767, 769, 771, 774, 780, 781, 782, 787, 789, 791, 792, 793, 795, 805, 824, 825, 827, 830, 831, 834, 835, 837, 839, 840, 841, 845, 848, 849, 850, 853, 855, 859, 862, 868, 872, 874, 875, 876, 877, 883, 884, 885, 886, 891, 894, 897, 901, 902, 911, 912, 919, 923, 924, 925, 927, 928, 932, 933, 935, 942, 943, 947, 948, 955, 956, 968, 978, 983, 986, 991, 992, 998, 999, 1004, 1005, 1011, 1012, 1014, 1015, 1016, 1024, 1031, 1032, 1033, 1037, 1046, 1047, 1053, 1067, 1069, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1083, 1091, 1093, 1095, 1097, 1098, 1099, 1109, 1110, 1113, 1114, 1115, 1117, 1119, 1120, 1123, 1127, 1133, 1135, 1137, 1144, 1145, 1146, 1147, 1148, 1150, 1156, 1164, 1165, 1166, 1167, 1168, 1176, 1179, 1185, 1186, 1187, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1215, 1218, 1219, 1222, 1223, 1226, 1227, 1228, 1230, 1232, 1233, 1234, 1237, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1265, 1266, 1267, 1269, 1271, 1274, 1277, 1285, 1287, 1288, 1289, 1291, 1292, 1293, 1299, 1300, 1310, 1319, 1321, 1322, 1323, 1325, 1328, 1330, 1334, 1338], "nonexist": [441, 1047], "nor": [140, 146, 256, 320], "normal": [39, 132, 211, 320, 460, 505, 647, 718, 805, 845, 919, 1067, 1114, 1222, 1299, 1310], "normalised_scor": 137, "norowsreturnederror": [253, 320], "north": 69, "not_": [294, 320, 805, 889, 919, 925, 1310], "not_c": [294, 320, 889, 919], "notabl": 137, "notat": [11, 40, 320], "note": [4, 10, 20, 39, 40, 45, 50, 51, 58, 65, 66, 68, 82, 89, 90, 122, 123, 124, 126, 128, 129, 135, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 153, 155, 158, 160, 163, 165, 169, 171, 174, 178, 185, 187, 189, 190, 193, 200, 202, 211, 212, 221, 222, 223, 225, 226, 230, 241, 244, 245, 249, 252, 253, 254, 255, 260, 263, 267, 274, 277, 279, 282, 284, 285, 287, 289, 290, 294, 296, 297, 320, 364, 377, 393, 394, 397, 405, 406, 410, 413, 414, 420, 434, 435, 437, 442, 447, 455, 464, 471, 477, 479, 486, 493, 500, 501, 519, 522, 540, 547, 556, 570, 571, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 641, 643, 647, 653, 654, 655, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 676, 677, 678, 680, 685, 686, 687, 690, 691, 698, 700, 701, 707, 714, 723, 725, 732, 741, 746, 747, 749, 750, 751, 755, 765, 777, 779, 780, 784, 792, 793, 795, 796, 801, 805, 816, 827, 831, 832, 834, 839, 841, 845, 850, 866, 868, 872, 874, 875, 877, 878, 883, 885, 886, 889, 892, 893, 919, 925, 963, 975, 991, 992, 999, 1008, 1009, 1012, 1015, 1016, 1022, 1040, 1041, 1043, 1048, 1053, 1061, 1073, 1080, 1093, 1099, 1128, 1131, 1149, 1164, 1191, 1192, 1196, 1203, 1210, 1212, 1215, 1217, 1222, 1227, 1228, 1229, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1246, 1247, 1250, 1251, 1252, 1254, 1259, 1260, 1261, 1264, 1265, 1272, 1274, 1281, 1292, 1294, 1310, 1319, 1320, 1324, 1325, 1336, 1338], "noth": [20, 662, 671, 1236, 1245], "notic": [137, 202, 320, 841, 919, 1310], "notimplementederror": 178, "now": [51, 140, 252, 278, 320, 564, 868, 919, 1291, 1310], "np": [126, 176, 202, 278, 320, 480, 555, 639, 805, 841, 919, 927, 1086, 1102, 1105, 1107, 1108, 1210, 1211, 1310], "npt": [176, 927], "nr": [303, 314, 899, 910], "nth": [205, 320, 481, 683, 801, 805, 843, 919, 1087, 1257, 1310], "nthe": [662, 1236], "nthose": [662, 1236], "nu": 659, "null": [16, 37, 39, 45, 46, 49, 51, 59, 66, 124, 125, 128, 132, 135, 136, 145, 147, 149, 153, 154, 155, 162, 165, 169, 178, 181, 182, 183, 188, 189, 193, 194, 196, 201, 202, 204, 217, 225, 233, 234, 235, 242, 245, 247, 263, 266, 268, 269, 270, 273, 278, 279, 283, 286, 289, 291, 294, 301, 320, 332, 334, 335, 345, 348, 349, 356, 357, 364, 365, 372, 374, 377, 389, 390, 391, 393, 394, 397, 401, 402, 403, 406, 411, 413, 414, 437, 440, 441, 448, 449, 450, 451, 452, 453, 454, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 478, 485, 491, 492, 500, 501, 502, 503, 508, 510, 511, 517, 518, 521, 522, 524, 526, 527, 528, 536, 537, 538, 539, 540, 542, 547, 555, 556, 579, 592, 593, 594, 595, 598, 608, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 641, 642, 644, 649, 650, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 680, 682, 683, 684, 690, 691, 693, 695, 700, 701, 702, 703, 704, 711, 712, 713, 722, 723, 724, 725, 730, 733, 734, 735, 736, 738, 740, 744, 748, 753, 764, 765, 769, 771, 774, 781, 782, 787, 789, 795, 805, 821, 824, 830, 831, 834, 835, 840, 841, 848, 849, 862, 874, 877, 882, 884, 886, 889, 891, 897, 919, 925, 932, 933, 944, 947, 948, 955, 956, 963, 964, 972, 975, 987, 988, 991, 992, 998, 999, 1004, 1005, 1013, 1015, 1016, 1046, 1047, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1069, 1070, 1072, 1073, 1074, 1075, 1079, 1081, 1082, 1091, 1092, 1097, 1098, 1109, 1110, 1111, 1117, 1119, 1120, 1123, 1126, 1127, 1130, 1131, 1133, 1135, 1136, 1137, 1146, 1148, 1149, 1151, 1156, 1164, 1176, 1179, 1180, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1215, 1219, 1224, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1254, 1256, 1257, 1258, 1264, 1265, 1267, 1269, 1274, 1277, 1288, 1291, 1292, 1293, 1295, 1310, 1322, 1326, 1328, 1330, 1334, 1336, 1338, 1339, 1341], "null_behavior": [411, 517, 805, 1013, 1126, 1310], "null_count": [45, 49, 189, 194, 320, 407, 805, 831, 919, 1010, 1012, 1310], "null_equ": [196, 320, 1070, 1310], "null_on_oob": [356, 522, 524, 955, 1131, 1133], "null_prob": [162, 165, 169], "null_valu": [37, 46, 135, 136, 149, 320, 919], "nullabl": [39, 320], "nullbehavior": [411, 517, 805, 1013, 1126, 1310], "nullif": 1331, "nulls_last": [266, 320, 345, 365, 542, 649, 650, 730, 805, 877, 919, 944, 964, 1111, 1151, 1224, 1310], "num": [13, 40, 281, 320, 493, 805, 1099, 1310], "num_row": 178, "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 82, 90, 111, 122, 124, 125, 126, 128, 131, 132, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 152, 153, 154, 156, 163, 165, 168, 170, 171, 172, 181, 183, 188, 197, 198, 200, 201, 209, 213, 214, 223, 224, 229, 240, 241, 252, 256, 263, 268, 271, 283, 288, 291, 293, 301, 303, 305, 314, 320, 346, 362, 364, 369, 372, 381, 382, 383, 384, 386, 387, 389, 390, 394, 401, 407, 408, 411, 415, 418, 426, 428, 430, 432, 433, 443, 456, 457, 459, 463, 464, 465, 466, 470, 471, 472, 478, 487, 500, 501, 508, 509, 517, 525, 528, 533, 535, 540, 543, 545, 547, 549, 597, 601, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 652, 668, 670, 672, 673, 676, 680, 682, 683, 691, 694, 708, 712, 713, 719, 732, 737, 738, 739, 751, 759, 764, 781, 782, 786, 790, 794, 805, 821, 824, 830, 838, 839, 840, 846, 854, 864, 874, 879, 881, 882, 887, 888, 897, 899, 901, 910, 919, 924, 961, 963, 968, 979, 980, 981, 982, 984, 985, 987, 992, 998, 1004, 1010, 1011, 1013, 1017, 1020, 1028, 1030, 1035, 1038, 1039, 1049, 1062, 1063, 1065, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1094, 1117, 1118, 1126, 1134, 1137, 1142, 1144, 1149, 1154, 1156, 1170, 1171, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1215, 1218, 1226, 1242, 1244, 1246, 1247, 1250, 1254, 1256, 1257, 1265, 1268, 1282, 1295, 1300, 1310, 1326, 1329, 1332, 1341], "number_of_two": [353, 516], "numbers_decim": 694, "numer": [10, 16, 37, 40, 46, 139, 150, 182, 191, 226, 278, 279, 287, 288, 320, 329, 377, 391, 397, 477, 493, 552, 576, 578, 602, 610, 642, 644, 664, 700, 706, 714, 805, 817, 823, 833, 850, 885, 919, 925, 975, 988, 999, 1012, 1099, 1216, 1219, 1238, 1274, 1291, 1310, 1332, 1341], "numeric_dtyp": 1341, "numericliter": [397, 805, 999, 1310], "numpi": [96, 126, 157, 176, 187, 223, 254, 255, 274, 278, 279, 320, 555, 589, 590, 618, 805, 919, 927, 1102, 1105, 1107, 1108, 1173, 1174, 1197, 1291, 1292, 1310], "nworld": 685, "o": [141, 152, 378, 389, 390, 407, 661, 712, 713, 805, 976, 987, 1010, 1235, 1259, 1295, 1310, 1323], "oauth": 151, "obj": 925, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 81, 99, 123, 124, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 163, 165, 166, 177, 178, 185, 190, 210, 211, 226, 228, 243, 252, 255, 260, 267, 277, 278, 279, 320, 410, 570, 746, 747, 749, 750, 765, 784, 792, 793, 805, 817, 826, 832, 845, 850, 853, 868, 878, 916, 919, 925, 928, 1285, 1310, 1320, 1322, 1325, 1338, 1340], "observ": [225, 320, 408, 463, 464, 465, 466, 604, 805, 849, 919, 1011, 1072, 1073, 1074, 1075, 1185, 1310], "obtain": 547, "obvious": 703, "occur": [40, 57, 58, 97, 106, 112, 227, 320, 353, 516, 577, 607, 805, 826, 827, 837, 851, 864, 875, 919, 952, 1125, 1169, 1187, 1291, 1310], "occurr": [488, 496, 499, 718, 805, 1095, 1103, 1106, 1299, 1310], "oct": 1333, "octet_length": 1331, "octob": [447, 1053, 1333], "od": [146, 817], "odbc": [38, 137, 320], "odd": 662, "odi": [665, 667, 1241], "off": [46, 47, 48, 49, 57, 58, 135, 136, 149, 225, 226, 320, 415, 732, 826, 827, 837, 849, 850, 855, 864, 919, 1017], "offer": [244, 320, 601, 805, 863, 919, 1334, 1338], "offic": [40, 320], "offset": [68, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 205, 211, 252, 265, 296, 297, 320, 415, 416, 424, 434, 435, 437, 442, 455, 481, 523, 541, 617, 648, 666, 667, 680, 693, 805, 843, 845, 868, 876, 892, 893, 919, 1017, 1018, 1026, 1040, 1041, 1043, 1048, 1061, 1087, 1132, 1150, 1223, 1240, 1241, 1254, 1267, 1310, 1337], "offset_bi": 751, "often": [138, 174, 211, 252, 320, 353, 516, 610, 617, 805, 845, 868, 919, 952, 1125, 1325, 1338], "ok": 547, "old": [39, 249, 320, 611, 612, 805, 866, 919, 1191, 1192, 1310], "old_tabl": 1340, "older": [45, 49, 320, 919], "oldw": 686, "omit": [27, 125, 129, 140, 146, 163, 174, 241, 255, 277, 282, 320, 746, 749, 761, 762, 792, 793, 925, 1339], "onc": [135, 136, 171, 230, 254, 256, 299, 320, 535, 555, 556, 638, 688, 689, 805, 822, 895, 919, 1144, 1164, 1209, 1262, 1263, 1310, 1323], "one": [20, 37, 38, 40, 46, 51, 103, 122, 124, 125, 126, 127, 128, 135, 136, 140, 144, 145, 146, 149, 153, 168, 170, 174, 182, 190, 193, 201, 202, 209, 210, 211, 223, 227, 228, 236, 245, 252, 253, 254, 260, 261, 263, 278, 281, 287, 300, 320, 330, 364, 408, 410, 472, 473, 477, 480, 483, 485, 540, 547, 552, 570, 580, 581, 583, 585, 587, 588, 597, 616, 617, 641, 649, 662, 663, 664, 678, 701, 746, 749, 767, 785, 795, 801, 805, 823, 832, 834, 835, 840, 841, 844, 845, 851, 859, 868, 872, 873, 874, 885, 891, 896, 919, 934, 963, 968, 1011, 1081, 1091, 1092, 1149, 1156, 1161, 1185, 1196, 1215, 1236, 1237, 1238, 1252, 1275, 1291, 1310, 1325, 1326, 1328, 1332, 1340], "one_to_mani": [225, 320, 849, 919], "one_to_on": [225, 320, 849, 919], "oneormoredatatyp": [40, 163, 320], "ones": [620, 622, 624, 626, 628, 631, 633, 635, 805, 925], "onf": [680, 1254], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 46, 50, 51, 56, 59, 90, 135, 136, 137, 140, 141, 143, 145, 147, 149, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 174, 193, 194, 199, 211, 212, 223, 226, 227, 230, 245, 252, 254, 255, 274, 276, 277, 278, 289, 290, 306, 320, 330, 332, 334, 346, 396, 397, 410, 415, 437, 445, 447, 467, 476, 486, 555, 556, 563, 564, 580, 581, 582, 583, 584, 585, 586, 587, 588, 597, 609, 655, 665, 667, 678, 716, 732, 767, 805, 829, 832, 834, 835, 836, 845, 850, 851, 868, 869, 886, 888, 902, 919, 923, 925, 932, 933, 934, 996, 999, 1017, 1043, 1053, 1078, 1085, 1093, 1164, 1189, 1229, 1239, 1241, 1252, 1285, 1288, 1291, 1310, 1319, 1322, 1338, 1339, 1341], "onlin": [199, 320, 1078, 1310], "ont": [665, 667, 1239, 1241], "onto": 165, "oof": [679, 1253, 1328, 1333], "op": [20, 135, 136, 169, 249, 320, 563, 610, 805, 853, 866, 919, 1310], "opac": [320, 323, 1310, 1315], "opaqu": 902, "open": [40, 133, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 410, 805, 832, 919], "openoffic": 146, "openpyxl": [140, 157], "oper": [4, 40, 50, 59, 90, 99, 102, 109, 116, 122, 124, 125, 126, 127, 128, 135, 137, 184, 199, 202, 204, 210, 216, 228, 230, 237, 241, 243, 244, 245, 248, 250, 252, 255, 256, 261, 263, 272, 278, 279, 284, 287, 288, 298, 299, 320, 329, 330, 333, 364, 402, 403, 404, 405, 406, 407, 461, 462, 477, 479, 482, 484, 507, 535, 536, 537, 538, 539, 540, 547, 554, 573, 576, 578, 579, 580, 581, 583, 585, 587, 588, 591, 592, 593, 596, 597, 602, 609, 638, 641, 706, 714, 721, 722, 724, 735, 736, 740, 752, 784, 795, 805, 817, 825, 829, 831, 836, 841, 844, 849, 859, 860, 869, 873, 874, 878, 885, 888, 895, 919, 923, 963, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1068, 1069, 1078, 1088, 1090, 1116, 1144, 1145, 1146, 1147, 1148, 1149, 1163, 1175, 1176, 1189, 1209, 1215, 1250, 1285, 1290, 1291, 1292, 1310, 1329, 1337, 1338], "operand": [714, 805], "opp": 925, "oppos": 732, "opposit": [263, 320, 364, 540, 641, 805, 874, 919, 963, 1149, 1215, 1310], "opt": [282, 320], "optim": [46, 47, 48, 49, 57, 58, 147, 149, 152, 153, 154, 223, 228, 244, 248, 254, 285, 320, 822, 826, 827, 837, 855, 864, 875, 883, 892, 893, 902, 919, 995, 1210, 1310], "optimis": [137, 230, 255, 306, 320, 919, 1164, 1212, 1310, 1341], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 67, 69, 135, 137, 138, 139, 140, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 155, 157, 162, 163, 164, 165, 168, 169, 170, 190, 206, 211, 221, 226, 236, 260, 267, 273, 284, 287, 289, 320, 377, 410, 415, 505, 563, 564, 570, 597, 618, 619, 621, 623, 625, 627, 630, 632, 634, 647, 655, 665, 667, 678, 680, 718, 787, 795, 805, 817, 826, 832, 845, 849, 850, 859, 872, 878, 885, 886, 894, 919, 925, 975, 1017, 1114, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1222, 1229, 1239, 1241, 1252, 1254, 1287, 1299, 1310, 1328, 1333], "optional_memb": [497, 805, 1104, 1310], "or_": 805, "oracl": 138, "orang": [186, 301, 302, 304, 305, 307, 308, 310, 312, 313, 320, 390, 713, 805, 897, 898, 900, 901, 903, 904, 906, 908, 909, 1333], "order": [10, 40, 46, 47, 48, 49, 51, 57, 63, 125, 135, 137, 156, 158, 159, 160, 161, 181, 185, 186, 193, 194, 195, 202, 210, 211, 225, 227, 243, 244, 245, 252, 254, 256, 257, 261, 266, 277, 278, 283, 285, 290, 320, 345, 365, 370, 389, 390, 413, 414, 473, 518, 535, 542, 548, 597, 602, 607, 617, 638, 639, 640, 649, 650, 679, 686, 687, 688, 689, 703, 712, 713, 715, 716, 718, 730, 784, 795, 805, 816, 821, 829, 834, 835, 836, 841, 844, 845, 849, 851, 859, 868, 869, 873, 877, 878, 882, 883, 919, 924, 925, 944, 964, 969, 987, 994, 1015, 1016, 1082, 1111, 1127, 1144, 1151, 1157, 1183, 1187, 1194, 1209, 1211, 1213, 1224, 1253, 1278, 1295, 1296, 1297, 1299, 1310, 1319, 1322, 1328, 1337, 1338, 1341], "order_bi": [597, 805], "ordin": [438, 607, 805, 1044, 1187, 1310, 1339], "ordinal_dai": [423, 457], "org": [20, 41, 42, 123, 137, 138, 141, 143, 176, 177, 178, 187, 320, 571, 875, 919, 927, 928], "orient": [52, 54, 97, 126, 128, 241, 320, 919, 1319], "origin": [51, 135, 136, 149, 193, 194, 202, 285, 320, 413, 414, 441, 442, 455, 473, 518, 556, 580, 597, 609, 610, 611, 612, 613, 615, 656, 662, 671, 728, 729, 805, 834, 835, 841, 883, 919, 1015, 1016, 1047, 1048, 1061, 1082, 1127, 1191, 1192, 1193, 1195, 1230, 1236, 1245, 1310], "orld": 1260, "other": [1, 20, 36, 40, 45, 58, 134, 135, 136, 137, 140, 149, 154, 158, 159, 160, 161, 194, 196, 199, 202, 225, 226, 227, 236, 237, 245, 253, 255, 258, 259, 282, 287, 289, 292, 294, 295, 318, 320, 323, 329, 333, 335, 345, 346, 397, 412, 447, 461, 462, 473, 477, 482, 484, 493, 497, 507, 514, 536, 537, 538, 539, 554, 560, 566, 576, 578, 591, 592, 596, 611, 612, 643, 650, 678, 705, 706, 711, 714, 721, 723, 725, 730, 733, 734, 735, 736, 744, 751, 769, 771, 774, 783, 787, 789, 805, 817, 827, 841, 849, 850, 851, 859, 860, 870, 871, 885, 886, 889, 890, 891, 919, 925, 934, 999, 1014, 1053, 1068, 1069, 1070, 1078, 1088, 1090, 1104, 1116, 1123, 1145, 1146, 1147, 1148, 1163, 1175, 1176, 1191, 1192, 1293, 1301, 1309, 1310, 1315, 1325, 1338], "other_df": [225, 320], "other_lf": [849, 919], "otherwis": [38, 137, 140, 147, 152, 164, 167, 171, 206, 230, 237, 255, 258, 277, 282, 306, 320, 369, 374, 394, 397, 408, 463, 464, 465, 466, 547, 556, 567, 597, 601, 602, 604, 609, 644, 654, 657, 661, 666, 668, 673, 676, 677, 680, 691, 718, 722, 751, 754, 763, 767, 795, 805, 860, 870, 902, 919, 924, 968, 972, 992, 999, 1011, 1072, 1073, 1074, 1075, 1156, 1164, 1183, 1185, 1189, 1210, 1212, 1219, 1228, 1231, 1235, 1240, 1242, 1247, 1250, 1251, 1254, 1265, 1299, 1310, 1330], "our": 179, "out": [8, 14, 38, 46, 47, 48, 49, 104, 129, 154, 157, 165, 169, 202, 252, 255, 320, 356, 374, 522, 524, 654, 657, 666, 795, 841, 868, 919, 955, 972, 1131, 1133, 1228, 1231, 1240, 1336], "outcom": [597, 805], "outer": [51, 59, 289, 320, 886, 919], "outermost": 50, "outlin": 7, "output": [0, 8, 30, 37, 40, 41, 42, 43, 44, 45, 46, 181, 189, 223, 230, 234, 237, 243, 245, 254, 258, 260, 270, 283, 290, 294, 320, 332, 334, 357, 389, 390, 394, 408, 447, 526, 547, 555, 556, 567, 570, 581, 604, 611, 653, 669, 673, 712, 713, 718, 722, 723, 724, 725, 735, 736, 737, 766, 767, 771, 789, 805, 817, 821, 831, 837, 855, 859, 860, 870, 872, 882, 889, 902, 919, 932, 933, 956, 987, 992, 1011, 1053, 1135, 1164, 1185, 1227, 1243, 1247, 1295, 1299, 1310], "output_path": [571, 875, 919], "outsid": [397, 805, 999, 1310], "over": [131, 135, 136, 137, 140, 146, 149, 154, 165, 166, 181, 199, 222, 223, 224, 230, 253, 254, 255, 267, 283, 284, 298, 306, 320, 324, 389, 390, 407, 410, 464, 472, 555, 556, 567, 569, 570, 571, 572, 573, 581, 582, 607, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 712, 713, 741, 742, 755, 766, 767, 779, 784, 805, 821, 826, 878, 882, 894, 902, 916, 919, 925, 987, 1010, 1073, 1078, 1164, 1198, 1199, 1201, 1205, 1295, 1310, 1338], "overflow": [391, 405, 406, 695, 707, 805, 823, 919, 988, 1008, 1009, 1269, 1281, 1310], "overhead": [50, 90, 149, 152, 153, 154], "overlap": [656, 663, 665, 667, 1230, 1237, 1239, 1241], "overrid": [1, 40, 122, 124, 125, 126, 127, 128, 135, 137, 138, 140, 144, 145, 146, 153, 162, 163, 169, 171, 320, 919], "overridden": [40, 122, 124, 126, 128, 144, 145, 153, 171, 320, 919], "overview": [320, 805, 817, 919, 1310, 1337, 1341], "overwrit": [14, 38, 39, 122, 124, 125, 126, 128, 132, 135, 136, 144, 145, 149, 153, 178, 289, 320, 331, 705, 805, 886, 919], "overwrite_schema": [39, 320], "ow": 685, "own": [795, 1291, 1310, 1341], "p": [53, 244, 320, 601, 787, 805, 863, 919, 925, 1240, 1242, 1323], "p13dt14h0": 447, "p1dt42": 447, "pa": [39, 122, 155, 320, 784], "pa_tabl": 784, "pacif": [416, 1018], "pack": [241, 320], "packag": [32, 33, 34, 137, 320, 324, 415, 732, 923, 1017], "pad": [674, 675, 700, 1248, 1249, 1274], "pad_end": [675, 1249], "pad_start": [674, 700, 1248, 1274], "page": [45, 49, 141, 147, 152, 154, 320, 805, 817, 919, 1310, 1337], "pair": [122, 124, 125, 126, 128, 144, 145, 153, 249, 320, 866, 919, 1341], "pairwis": [187, 320], "panda": [38, 123, 127, 132, 157, 202, 211, 279, 285, 287, 320, 434, 435, 711, 784, 805, 841, 845, 883, 885, 919, 1040, 1041, 1292, 1293, 1310, 1320, 1322, 1338], "pandas_df": 1338, "pane": [40, 320], "panic": 105, "pap": 1242, "papa": 668, "papai": [668, 1242], "papaya": [668, 680, 691, 1242, 1254, 1265], "parallel": [57, 59, 131, 138, 147, 154, 211, 226, 228, 244, 259, 295, 320, 407, 519, 718, 795, 805, 817, 845, 849, 850, 871, 890, 902, 919, 1010, 1128, 1299, 1310], "parallelis": [230, 306, 320, 1164, 1310], "parallelstrategi": [147, 154], "param": [40, 122, 124, 125, 126, 128, 135, 136, 144, 145, 149, 153, 164, 165, 169, 253, 320, 919], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 77, 81, 91, 97, 106, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 221, 223, 224, 225, 226, 227, 229, 230, 234, 236, 237, 240, 241, 243, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 303, 305, 306, 312, 314, 320, 329, 331, 332, 333, 334, 335, 345, 352, 353, 356, 357, 364, 365, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 389, 390, 391, 397, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 415, 417, 419, 420, 425, 437, 440, 441, 442, 443, 444, 446, 447, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 491, 492, 493, 497, 505, 507, 509, 514, 515, 516, 517, 519, 522, 523, 524, 525, 526, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 554, 555, 556, 563, 564, 570, 571, 572, 576, 578, 581, 582, 583, 584, 585, 586, 591, 592, 596, 597, 598, 601, 602, 604, 605, 607, 609, 610, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 700, 701, 703, 705, 706, 708, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 821, 823, 824, 826, 827, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 849, 850, 851, 854, 855, 859, 860, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 899, 901, 902, 908, 910, 919, 923, 924, 925, 929, 931, 932, 933, 934, 944, 951, 952, 955, 956, 963, 964, 968, 969, 971, 972, 973, 974, 975, 977, 987, 988, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1021, 1022, 1027, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1061, 1064, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1082, 1086, 1087, 1093, 1094, 1095, 1097, 1098, 1099, 1111, 1114, 1118, 1123, 1124, 1125, 1126, 1128, 1131, 1132, 1133, 1134, 1135, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1156, 1157, 1164, 1176, 1180, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1218, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1274, 1275, 1278, 1282, 1285, 1286, 1287, 1288, 1289, 1291, 1292, 1295, 1296, 1299, 1300, 1301, 1310, 1319, 1320, 1321, 1322, 1323, 1325, 1330, 1333, 1338], "parameteris": 137, "parametr": 817, "paramount": [855, 919], "parent": [40, 204, 320], "parenthes": 18, "parquet": [45, 49, 147, 148, 154, 320, 817, 919], "parquetcompress": [45, 320], "pars": [37, 46, 134, 135, 136, 138, 140, 145, 146, 147, 149, 152, 153, 154, 181, 210, 258, 259, 263, 266, 283, 294, 295, 299, 320, 390, 397, 493, 597, 611, 612, 650, 670, 678, 694, 695, 705, 713, 723, 725, 730, 733, 734, 735, 736, 744, 757, 769, 771, 774, 783, 785, 787, 789, 795, 805, 821, 844, 870, 871, 874, 877, 882, 889, 890, 895, 919, 999, 1099, 1191, 1192, 1215, 1244, 1268, 1269, 1310, 1319], "parseerror": [695, 1269], "parser": [135, 140], "part": [122, 140, 174, 179, 277, 282, 320, 597, 663, 682, 683, 805, 837, 864, 875, 891, 919, 929, 1237, 1256, 1257, 1334], "parti": [555, 805], "partial": [125, 135, 149, 320, 919], "particip": [40, 320], "particular": [135, 141, 143, 181, 197, 283, 320, 389, 390, 712, 713, 805, 821, 882, 919, 987, 1071, 1295, 1310], "partit": [45, 138, 147, 150, 152, 154, 155, 224, 243, 320, 597, 805], "partition_bi": [45, 136, 224, 320, 597, 805], "partition_chunk_size_byt": [45, 320], "partition_col": [45, 138, 320], "partition_df": 136, "partition_num": 138, "partition_on": 138, "partition_rang": 138, "partitioned_object": [45, 320], "pass": [32, 33, 34, 36, 38, 39, 40, 45, 51, 97, 124, 132, 134, 137, 138, 140, 147, 149, 152, 155, 158, 160, 163, 165, 167, 169, 181, 187, 191, 210, 211, 213, 226, 229, 243, 244, 245, 249, 252, 258, 263, 266, 271, 279, 282, 283, 290, 294, 299, 320, 364, 390, 415, 425, 437, 441, 447, 470, 490, 540, 555, 556, 571, 597, 601, 611, 612, 617, 641, 650, 678, 685, 686, 687, 713, 722, 730, 732, 757, 787, 795, 801, 805, 821, 833, 844, 845, 847, 850, 855, 863, 866, 868, 870, 874, 875, 877, 882, 889, 894, 895, 902, 919, 923, 924, 963, 1017, 1027, 1047, 1053, 1079, 1094, 1118, 1149, 1164, 1191, 1192, 1215, 1252, 1259, 1260, 1261, 1282, 1292, 1310, 1323, 1338], "pass_nam": [556, 805], "pass_name_to_appli": [805, 923], "password": [135, 138, 141, 143], "past": [36, 320, 855, 919], "pat": [666, 1240], "patch": 69, "path": [3, 6, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 260, 320, 410, 570, 571, 574, 640, 671, 805, 832, 872, 875, 919, 923, 1213, 1245, 1310, 1341], "pathlib": [35, 37, 41, 42, 45, 149, 320], "pattern": [59, 93, 135, 136, 140, 149, 152, 153, 154, 223, 320, 565, 654, 655, 656, 659, 662, 663, 664, 665, 666, 667, 676, 677, 678, 684, 902, 925, 1210, 1212, 1228, 1229, 1230, 1233, 1236, 1237, 1238, 1239, 1240, 1241, 1250, 1251, 1252, 1258, 1310, 1333], "paya": 691, "pct": 165, "pct_chang": [805, 1310], "pd": [123, 127, 711, 784, 805, 1292, 1293, 1310, 1320, 1338], "pd_df": 127, "pd_frame": 784, "pd_seri": 127, "pdsh": [131, 136], "pea": 668, "peak": [254, 320, 599, 600, 805, 1181, 1182, 1310], "peak_max": [805, 1310], "peak_min": [805, 1310], "pear": [668, 680, 691, 1242, 1254, 1265], "pearson": [187, 320, 505, 647, 737, 805, 1114, 1222, 1310], "penalti": [690, 692, 693, 1264, 1266, 1267], "per": [14, 37, 40, 46, 140, 163, 165, 181, 209, 241, 242, 245, 259, 266, 283, 295, 309, 311, 312, 320, 356, 390, 519, 522, 524, 555, 556, 580, 581, 583, 585, 587, 588, 650, 713, 718, 730, 805, 821, 871, 877, 882, 890, 905, 907, 908, 919, 923, 955, 1128, 1131, 1133, 1299, 1310], "percent": [598, 805, 1180, 1310], "percentag": [162, 165, 169, 598, 805, 1180, 1310], "percentil": [189, 320, 831, 919, 1012, 1310], "perform": [38, 45, 47, 49, 51, 95, 100, 102, 107, 109, 116, 123, 135, 136, 137, 141, 145, 147, 149, 152, 153, 154, 178, 202, 210, 211, 225, 226, 227, 230, 248, 252, 254, 255, 278, 306, 320, 380, 385, 388, 393, 394, 477, 547, 555, 556, 597, 617, 655, 665, 667, 672, 673, 678, 690, 692, 693, 805, 841, 845, 849, 850, 851, 868, 877, 892, 893, 919, 978, 983, 986, 991, 992, 1164, 1229, 1239, 1241, 1246, 1247, 1252, 1264, 1266, 1267, 1291, 1310], "perhap": [284, 320], "period": [135, 136, 149, 211, 252, 320, 442, 455, 463, 465, 466, 598, 617, 746, 747, 749, 750, 792, 793, 805, 845, 868, 919, 1048, 1061, 1072, 1074, 1075, 1180, 1310], "persist": 1325, "phase": [38, 288, 320], "philadelphia": [676, 677], "phone": [698, 1272], "physic": [50, 63, 90, 135, 136, 226, 245, 320, 711, 805, 822, 849, 850, 919, 993, 1293, 1310], "pi": [10, 409, 805, 1001, 1003, 1220, 1283, 1310, 1331, 1335], "pick": [166, 795], "pickl": [410, 805, 832, 919], "pip": [415, 732, 1017], "pipe": [320, 805, 919], "pipelin": [140, 282, 320], "pitfal": 107, "pivot": [288, 320, 925], "pivot_long": [287, 320, 885, 919], "pivot_wid": [245, 320], "pivotagg": [245, 320], "pixel": [40, 320], "pk": [460, 805, 1067, 1310], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 77, 81, 89, 90, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 149, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 171, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 924, 925, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1341], "pl_frame": 784, "place": [10, 11, 37, 46, 174, 192, 199, 215, 216, 245, 250, 255, 266, 292, 320, 324, 345, 357, 365, 526, 542, 649, 650, 730, 805, 877, 919, 934, 944, 956, 964, 1078, 1135, 1151, 1188, 1224, 1310], "placehold": 756, "plai": [12, 736], "plain": [837, 919], "plan": [226, 228, 320, 410, 805, 822, 826, 832, 837, 849, 850, 872, 875, 919, 1340], "plane": [728, 729], "platform": 157, "ple": 1333, "pleas": [127, 137, 138, 202, 211, 236, 320, 324, 464, 738, 751, 805, 841, 845, 859, 919, 1073, 1310], "plenti": 925, "plot": [320, 864, 875, 919, 1310], "plu": [408, 552, 805, 1011, 1161, 1185, 1310, 1332], "plugin": [0, 805, 817], "plugin_path": 923, "point": [10, 11, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 70, 71, 72, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 193, 200, 211, 227, 228, 267, 277, 282, 288, 289, 320, 323, 324, 396, 407, 408, 413, 442, 443, 471, 476, 477, 488, 500, 501, 535, 556, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 734, 781, 782, 805, 826, 827, 834, 837, 839, 845, 851, 855, 866, 878, 886, 919, 994, 996, 1010, 1011, 1015, 1048, 1049, 1080, 1085, 1095, 1144, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1289, 1294, 1310, 1315, 1338], "poison": [589, 590, 805, 1173, 1174, 1310], "pola": 320, "polar": [1, 320, 323, 324, 804, 805, 811, 817, 919, 923, 924, 925, 1310, 1314, 1315, 1337, 1338, 1340], "polars_df": 1338, "polars_file_cache_ttl": [145, 149, 152, 153], "polars_hypothesis_profil": [168, 170], "polars_max_thread": 171, "polars_seri": 1338, "polars_verbos": [826, 919], "polarsdatafram": 178, "polarsdataset": [282, 320], "polarsdatatyp": [60, 77, 135, 136, 149, 162, 163, 164, 165, 166, 169, 182, 230, 277, 282, 320, 377, 391, 467, 555, 556, 611, 612, 670, 753, 765, 766, 767, 777, 780, 796, 801, 805, 823, 919, 925, 975, 988, 1164, 1191, 1192, 1244, 1310], "polarsintegertyp": [727, 761, 762], "polarstemporaltyp": [690, 1264], "polarstyp": 59, "pool": [14, 58, 171, 172, 827, 919], "poor": 137, "pop2": [226, 320, 850, 919], "popul": [226, 320, 850, 919], "port": [38, 135, 137, 138, 141, 143, 320], "portion": 1333, "pos_a": 1333, "posit": [40, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 179, 191, 198, 210, 243, 258, 259, 263, 266, 286, 294, 295, 299, 320, 364, 463, 465, 466, 467, 540, 597, 602, 604, 641, 650, 664, 676, 677, 695, 705, 728, 729, 730, 733, 734, 735, 736, 753, 783, 787, 801, 805, 833, 838, 844, 870, 871, 874, 877, 884, 889, 890, 895, 919, 925, 963, 1072, 1074, 1075, 1149, 1183, 1185, 1215, 1238, 1269, 1310, 1339], "position": 1310, "possibl": [40, 45, 49, 97, 99, 124, 125, 128, 135, 140, 162, 165, 169, 210, 223, 230, 254, 285, 306, 320, 553, 556, 567, 618, 683, 717, 805, 826, 844, 877, 883, 919, 1164, 1197, 1257, 1310], "post": [51, 69], "postgresql": [38, 137, 138, 320, 597, 805, 1336], "potenti": [107, 109, 140, 149, 152, 153, 223, 253, 255, 320, 580, 676, 677, 829, 831, 836, 869, 888, 919, 923, 1250, 1251], "pow": [805, 1310, 1331], "pow_n": 53, "power": [785, 1183, 1310, 1332], "powersofn": 53, "pre": [547, 556, 604, 777, 780, 796, 805, 1185, 1310], "preced": [165, 925], "precis": [10, 11, 37, 40, 46, 67, 137, 223, 254, 255, 274, 277, 282, 320, 417, 694, 919, 925, 1019, 1268], "predefin": [245, 320], "predic": [39, 46, 47, 48, 49, 57, 58, 149, 152, 153, 154, 155, 182, 202, 221, 227, 253, 320, 391, 473, 720, 755, 795, 805, 826, 827, 837, 841, 851, 855, 864, 866, 875, 892, 893, 919, 1082, 1210, 1212, 1310], "predicate_pushdown": [46, 47, 48, 49, 57, 58, 826, 827, 837, 855, 864, 875, 919], "predict": [248, 290, 320], "prefer": [135, 136, 140, 149, 170, 181, 199, 223, 230, 253, 254, 283, 306, 320, 389, 390, 467, 556, 712, 713, 805, 821, 882, 919, 987, 1078, 1164, 1295, 1310, 1320, 1341], "prefilt": 154, "prefix": [39, 135, 136, 149, 174, 320, 331, 379, 447, 565, 581, 584, 585, 587, 588, 684, 687, 688, 700, 805, 925, 977, 1258, 1262, 1274], "prefix_": 584, "prefix_a": 584, "prefix_b": 584, "prefix_field": [582, 586], "presenc": [754, 763, 925], "present": [125, 165, 206, 320, 497, 571, 686, 687, 805, 875, 919], "preserv": [193, 194, 202, 210, 225, 227, 230, 278, 279, 320, 413, 414, 415, 434, 435, 473, 518, 597, 611, 644, 661, 805, 834, 835, 841, 849, 851, 919, 1015, 1016, 1017, 1082, 1127, 1191, 1219, 1235, 1292, 1310], "pressur": [49, 135, 136, 145, 147, 149, 153, 154, 642, 805, 919, 1216, 1310], "presum": [555, 805], "prev_pow2": 53, "prevent": [278, 320, 331, 405, 406, 580, 707, 805, 919, 1008, 1009, 1281, 1310], "preview": [209, 320], "previou": [53, 174, 320, 323, 415, 580, 581, 583, 585, 587, 588, 598, 703, 805, 1017, 1180, 1310, 1315], "previous": [2, 3], "price": [320, 323, 1341], "primari": [140, 1338, 1341], "primarili": 1, "primit": [39, 320, 497, 805], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 136, 157, 158, 160, 195, 209, 210, 224, 228, 276, 298, 320, 490, 572, 746, 749, 805, 826, 847, 919, 925, 1104, 1288, 1310, 1341], "prior": [127, 320, 323, 1310, 1315], "prioriti": 166, "probabl": [460, 604, 805, 1067, 1185, 1310], "process": [14, 37, 46, 47, 48, 49, 57, 58, 135, 136, 137, 149, 171, 254, 320, 826, 827, 919], "process_index": [277, 320], "produc": [2, 3, 165, 169, 182, 225, 320, 353, 391, 516, 567, 766, 805, 849, 855, 919, 952, 1125], "product": [51, 187, 225, 320, 405, 412, 805, 849, 919, 1008, 1014, 1310], "profil": [32, 168, 170, 826, 919], "profile_nam": 32, "programmat": [189, 320, 831, 919], "progress": [67, 69, 72], "project": [46, 47, 48, 49, 57, 58, 149, 151, 152, 153, 154, 649, 650, 805, 826, 827, 837, 855, 864, 866, 875, 919], "projection_pushdown": [46, 47, 48, 49, 57, 58, 826, 827, 837, 855, 864, 875, 919], "prompt": 129, "propag": [357, 462, 526, 589, 590, 592, 653, 669, 735, 736, 805, 956, 1069, 1135, 1173, 1174, 1176, 1227, 1243, 1310], "propagate_nan": 737, "proper": [227, 320, 851, 919], "properti": [40, 178, 185, 186, 195, 203, 214, 257, 262, 293, 297, 320, 323, 324, 828, 829, 836, 869, 888, 893, 919, 924, 925, 1066, 1084, 1172, 1214, 1310, 1315, 1341], "proport": [718, 805, 1299, 1310], "protocol": [39, 123, 138, 178, 320], "prototyp": 801, "provid": [31, 32, 33, 34, 37, 38, 40, 41, 45, 46, 47, 48, 49, 135, 136, 138, 139, 140, 145, 147, 149, 150, 151, 152, 153, 154, 165, 169, 202, 206, 221, 267, 277, 320, 323, 374, 375, 447, 467, 488, 547, 555, 556, 657, 658, 662, 670, 671, 686, 687, 688, 689, 757, 787, 805, 817, 826, 841, 878, 894, 916, 919, 972, 973, 1053, 1095, 1113, 1164, 1231, 1232, 1236, 1244, 1245, 1289, 1310, 1323, 1330, 1333, 1338, 1341], "provis": 818, "prune": [147, 152, 154, 855, 919], "pt0": 447, "public": [138, 320, 805, 817, 919, 1310, 1337], "pulp": 1319, "pure": [40, 320], "purpos": [579, 805, 919], "push": [149, 152, 153, 154, 155, 182, 320, 391, 805], "pushdown": [46, 47, 48, 49, 57, 58, 826, 827, 837, 855, 864, 866, 875, 892, 893, 919, 1210, 1212, 1310], "put": [37, 46, 69, 320, 324, 919], "pwd": 137, "py": 151, "pyarrow": [39, 45, 122, 127, 135, 138, 139, 141, 143, 147, 150, 155, 157, 272, 278, 279, 320, 784, 817, 1285, 1291, 1292, 1310, 1320, 1322, 1338], "pyarrow_opt": [45, 139, 147, 150, 320], "pyarrow_t": 1338, "pycapsul": [177, 928], "pycapsuleinterfac": [177, 928], "pydant": 157, "pyiceberg": [151, 157], "pyodbc": [38, 320], "pyodbc_uri": [38, 320], "pyspark": 171, "pytest": [158, 160], "python": [0, 32, 33, 34, 41, 42, 69, 79, 93, 123, 135, 136, 141, 143, 157, 158, 160, 178, 223, 230, 254, 255, 274, 306, 320, 410, 415, 419, 477, 555, 556, 664, 732, 746, 747, 749, 750, 792, 793, 795, 805, 811, 832, 902, 919, 924, 1017, 1021, 1031, 1032, 1033, 1037, 1164, 1238, 1290, 1310, 1314, 1337], "pythondatatyp": [60, 77, 182, 320, 801, 823, 919, 925], "pythonliter": [935, 978, 983, 986, 1083, 1115, 1165, 1166, 1167, 1168, 1210, 1310], "pytorch": [282, 320, 1294, 1310], "q": [255, 320, 787, 1310, 1315, 1323], "q1": [40, 320], "q2": [40, 320], "q3": [40, 320], "q4": [40, 320], "qcut": [408, 805, 1011, 1310], "qhoo": 1341, "qmark": 137, "qqr": 925, "quad": [464, 805, 1073, 1310], "qualifi": [38, 320], "quantifi": [663, 1237], "quantil": [320, 604, 627, 628, 805, 919, 1185, 1202, 1310, 1327], "quantile_cont": 1331, "quantile_disc": 1331, "quarter": [211, 226, 252, 290, 320, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061, 1334], "queri": [46, 47, 48, 49, 57, 58, 137, 138, 141, 149, 152, 153, 154, 199, 228, 244, 267, 320, 547, 555, 556, 671, 784, 805, 826, 827, 837, 864, 875, 878, 892, 893, 894, 902, 911, 919, 1078, 1164, 1245, 1310, 1319, 1320, 1322, 1326, 1337, 1339, 1340], "quick": [801, 1012, 1310, 1341], "quit": [226, 320, 850, 919], "quot": [37, 38, 46, 135, 136, 138, 149, 320, 698, 919, 1272], "quota_project_id": 34, "quote_char": [37, 46, 135, 136, 149, 320, 919], "quote_plu": 138, "quote_styl": [37, 46, 320, 919], "quotes_titl": 698, "quotient": 1332, "r": [135, 136, 149, 320, 562, 601, 656, 661, 662, 663, 664, 676, 677, 805, 925, 1230, 1235, 1236, 1237, 1238, 1250, 1251, 1265, 1323, 1333], "r1": 59, "r2": 59, "r3": 59, "rab": [654, 679, 1228, 1253, 1328], "rad": 1335, "radian": [409, 728, 805, 1331], "radix": [695, 1269], "rai": [728, 729], "raini": [676, 677, 1250, 1251], "rais": [1, 15, 16, 20, 39, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 135, 136, 140, 146, 147, 149, 154, 158, 160, 178, 182, 206, 245, 253, 278, 320, 356, 374, 391, 415, 440, 441, 522, 524, 567, 602, 604, 612, 654, 657, 666, 690, 692, 693, 695, 697, 748, 765, 805, 894, 955, 972, 1017, 1046, 1047, 1131, 1133, 1183, 1185, 1192, 1228, 1231, 1240, 1264, 1266, 1267, 1269, 1271, 1291, 1310], "raise_if_empti": [135, 136, 140, 146, 149], "raise_if_undetermin": 567, "raise_on_fail": 894, "raker": 132, "ram": [46, 47, 48, 49, 919], "ran": [805, 923], "random": [40, 41, 141, 156, 163, 212, 256, 320, 486, 535, 607, 638, 643, 718, 805, 817, 1093, 1144, 1187, 1209, 1218, 1299, 1310], "randomli": 164, "rang": [17, 40, 137, 138, 189, 197, 211, 224, 320, 336, 409, 415, 423, 433, 438, 439, 440, 442, 455, 456, 491, 727, 732, 735, 745, 746, 747, 748, 749, 750, 761, 762, 791, 792, 793, 805, 831, 845, 919, 925, 1012, 1017, 1025, 1039, 1044, 1045, 1046, 1048, 1061, 1062, 1071, 1180, 1310, 1333], "rank": [345, 519, 730, 737, 752, 805, 944, 1128, 1310], "rankmethod": [607, 805, 1187, 1310], "rare": [416, 1018], "rather": [226, 320, 479, 555, 572, 604, 616, 700, 805, 850, 919, 1185, 1196, 1274, 1310], "raw": 138, "raw_output": [571, 875, 919], "re": [206, 211, 222, 285, 287, 320, 434, 435, 444, 447, 845, 883, 885, 919, 1040, 1041, 1050, 1053, 1338], "reach": [674, 675, 700, 1248, 1249, 1274], "read": [36, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 199, 320, 323, 410, 479, 795, 805, 832, 919, 1078, 1310, 1315], "read_arrow_batches_from_odbc": 137, "read_clipboard": [36, 320], "read_csv": [134, 140, 149], "read_csv_batch": 131, "read_databas": 138, "read_database_uri": 137, "read_excel": 146, "read_ndjson": 144, "read_od": 140, "read_opt": 140, "read_parquet": 154, "read_tabl": 147, "readabl": 801, "reader": [45, 49, 131, 135, 136, 141, 143, 147, 320, 919], "readi": 912, "readthedoc": [40, 320], "real": [663, 1237], "realli": [407, 655, 678, 805, 1010, 1229, 1252, 1310], "realloc": [145, 149, 152, 153, 199, 320, 1078, 1310], "rearrang": [230, 320], "reason": [171, 189, 320, 547, 555, 805, 831, 919], "receiv": [51, 137, 149, 230, 244, 306, 320, 556, 601, 805, 863, 919, 1341], "recent": [158, 159, 160, 161, 278, 320, 598, 612, 805, 1180, 1192, 1291, 1310, 1322, 1338], "rechunk": [59, 122, 127, 135, 136, 139, 141, 143, 145, 147, 149, 150, 152, 153, 154, 199, 320, 805, 997, 1078, 1089, 1170, 1310], "recognis": [15, 16, 20, 925], "recommend": [40, 171, 189, 223, 228, 244, 320, 547, 822, 831, 919, 925], "record": [37, 42, 46, 132, 143, 155, 320, 919], "record_batch": [224, 320], "recordbatch": [122, 224, 320, 784, 1320, 1322, 1338], "recurs": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "red": [50, 89, 90, 306, 718, 805, 902, 1299, 1310], "redempt": 1319, "redshift": 138, "reduc": [49, 135, 136, 145, 147, 149, 152, 153, 154, 254, 307, 308, 310, 313, 320, 642, 742, 755, 805, 903, 904, 906, 909, 919, 1166, 1184, 1216, 1281, 1310], "reduct": [204, 320, 556, 805], "ref": [662, 664, 1236, 1238], "refer": [0, 32, 40, 93, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 187, 190, 320, 324, 410, 444, 447, 607, 662, 676, 677, 690, 692, 693, 697, 805, 832, 919, 1050, 1053, 1187, 1250, 1251, 1264, 1266, 1267, 1271, 1310], "referenc": [40, 320, 555, 676, 677, 703, 805, 1250, 1251, 1320, 1338], "refin": 140, "reg": 132, "regard": [135, 737], "regardless": [127, 181, 210, 226, 283, 320, 390, 420, 671, 713, 795, 805, 821, 850, 882, 919, 1022, 1245], "regex": [91, 467, 562, 563, 565, 654, 656, 662, 663, 664, 666, 676, 677, 701, 753, 805, 925, 1228, 1230, 1236, 1237, 1238, 1240, 1250, 1251], "regexp_lik": 1331, "region": [40, 151, 320], "regist": [1, 52, 53, 54, 55, 168, 170, 267, 320, 805, 878, 919, 923, 1319, 1320, 1322, 1323, 1324, 1325, 1338, 1340], "register_dataframe_namespac": [1, 53, 54, 55], "register_expr_namespac": [1, 52, 54, 55], "register_glob": [1321, 1323, 1325, 1338], "register_lazyframe_namespac": [1, 52, 53, 55], "register_mani": [1321, 1322, 1325], "register_plugin": 805, "register_plugin_funct": [805, 923], "register_series_namespac": [1, 52, 53, 54], "registr": [267, 320, 784, 817, 878, 919, 1325, 1338], "regrid": [491, 805], "regular": [130, 223, 253, 254, 290, 297, 320, 467, 654, 655, 656, 660, 662, 663, 664, 665, 666, 667, 676, 677, 678, 732, 753, 801, 805, 893, 919, 925, 1228, 1229, 1230, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1250, 1251, 1252, 1336], "reinterpret": [805, 1310], "rel": [40, 138, 139, 150, 151, 158, 159, 160, 161, 320, 437, 463, 465, 466, 718, 805, 1043, 1072, 1074, 1075, 1299, 1310], "relat": [137, 174, 676, 677, 925, 1250, 1251, 1326], "releas": [58, 225, 320, 556, 805, 827, 849, 919, 1341], "release_year": 1319, "relev": 59, "reli": [225, 320, 849, 919], "reliabl": [89, 90], "remain": [135, 136, 149, 193, 194, 197, 202, 245, 320, 413, 414, 473, 518, 611, 682, 683, 805, 834, 835, 841, 855, 919, 1015, 1016, 1071, 1082, 1127, 1191, 1256, 1257, 1310, 1325], "remaind": [377, 683, 975, 1257, 1332], "remap": 92, "remot": [135, 136, 141, 143], "remov": [4, 135, 136, 149, 178, 191, 275, 320, 467, 581, 685, 686, 687, 688, 689, 753, 805, 833, 919, 1259, 1260, 1261, 1262, 1263, 1286, 1310, 1340], "removes_pronoun": 678, "renam": [1, 125, 135, 136, 172, 210, 258, 259, 294, 295, 299, 301, 320, 331, 479, 573, 574, 580, 581, 582, 583, 585, 587, 588, 703, 705, 783, 787, 805, 844, 870, 871, 889, 890, 895, 897, 919, 931, 1240, 1278, 1287, 1310, 1338], "rename_field": [682, 683, 1256, 1257], "render": [571, 875, 919], "render_as_str": 137, "reoconstruct": [255, 320], "repeat": [141, 152, 608, 610, 777, 796, 805], "repeat_bi": 805, "replac": [38, 39, 135, 136, 149, 200, 201, 250, 284, 287, 294, 295, 320, 323, 419, 441, 471, 555, 556, 612, 677, 678, 693, 805, 839, 885, 889, 890, 919, 1021, 1047, 1080, 1192, 1210, 1212, 1251, 1252, 1267, 1310, 1315, 1331], "replace_al": [612, 676, 805, 1191, 1192, 1250, 1310], "replace_column": 320, "replace_strict": [611, 805, 1191, 1310], "replace_time_zon": [416, 422, 424, 1023, 1024, 1051], "replace_with": [678, 1252], "replic": [711, 805, 1293, 1310], "report": 137, "repr": [129, 447, 1053], "repres": [37, 40, 46, 65, 66, 68, 78, 82, 87, 122, 124, 126, 127, 128, 137, 245, 267, 268, 277, 278, 291, 298, 320, 394, 477, 500, 501, 543, 549, 555, 652, 668, 673, 676, 677, 680, 691, 719, 722, 739, 751, 753, 765, 766, 767, 776, 781, 782, 786, 794, 801, 805, 878, 879, 887, 919, 925, 992, 1210, 1226, 1242, 1247, 1250, 1251, 1254, 1265, 1291, 1300, 1310, 1338], "represent": [10, 43, 44, 65, 66, 68, 82, 129, 260, 276, 320, 393, 394, 418, 423, 426, 428, 429, 430, 431, 432, 433, 436, 438, 439, 443, 456, 457, 459, 570, 711, 805, 837, 853, 872, 919, 991, 992, 993, 1020, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1049, 1062, 1063, 1065, 1288, 1293, 1310, 1329], "request": 34, "requested_schema": [177, 928], "requir": [1, 32, 33, 34, 39, 40, 51, 127, 137, 138, 158, 159, 160, 161, 187, 193, 253, 277, 278, 279, 282, 320, 370, 463, 465, 466, 548, 556, 597, 620, 622, 624, 626, 628, 631, 633, 635, 642, 690, 692, 693, 715, 780, 805, 829, 834, 835, 836, 877, 888, 919, 969, 1070, 1072, 1074, 1075, 1157, 1216, 1250, 1264, 1266, 1267, 1291, 1292, 1296, 1310], "require_al": 925, "rerais": [58, 827, 919], "rerun": [199, 320, 1078, 1310], "resampl": [211, 320, 845, 919], "reset": [4, 174], "reset_index": [127, 211, 320, 845, 919], "reshap": [245, 278, 320, 520, 734, 805, 1129, 1310], "resolv": [419, 547, 828, 829, 836, 869, 888, 919], "resourc": [894, 923], "respect": [40, 135, 149, 320, 655, 665, 667, 678, 925, 1229, 1239, 1241, 1252, 1294, 1310], "respons": [138, 237, 320, 860, 919], "rest": [698, 1272], "restor": [174, 320, 323, 1310, 1315], "restore_default": 174, "restrict": [30, 683, 1257], "result": [13, 37, 43, 44, 45, 46, 47, 48, 49, 51, 59, 126, 127, 128, 137, 138, 140, 149, 152, 154, 155, 169, 199, 202, 211, 212, 225, 226, 227, 241, 245, 252, 255, 260, 261, 263, 277, 278, 279, 290, 297, 299, 305, 320, 415, 442, 444, 447, 455, 463, 464, 465, 466, 470, 477, 486, 493, 505, 546, 547, 555, 556, 570, 597, 602, 604, 611, 612, 613, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 641, 661, 677, 681, 682, 693, 714, 718, 741, 742, 746, 748, 749, 750, 751, 765, 766, 777, 780, 781, 782, 784, 796, 805, 822, 826, 831, 841, 845, 849, 850, 851, 855, 864, 868, 872, 873, 874, 893, 895, 901, 912, 913, 919, 925, 934, 1048, 1050, 1053, 1061, 1072, 1074, 1075, 1078, 1079, 1093, 1099, 1114, 1155, 1164, 1183, 1185, 1191, 1192, 1193, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1213, 1215, 1235, 1255, 1256, 1267, 1291, 1292, 1299, 1310, 1320, 1326, 1338, 1339, 1341], "resultset": 137, "retri": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 919], "retriev": [33, 206, 277, 320, 350, 351, 512, 513, 701, 776, 949, 950, 1121, 1122, 1275, 1289, 1310, 1326], "return": [1, 5, 6, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 100, 103, 111, 119, 122, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 171, 172, 176, 179, 181, 183, 186, 187, 188, 192, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 228, 229, 230, 232, 234, 239, 240, 241, 243, 244, 245, 249, 252, 253, 254, 255, 256, 260, 267, 270, 271, 277, 278, 279, 282, 283, 284, 285, 290, 293, 294, 295, 301, 303, 305, 306, 309, 314, 320, 332, 334, 337, 338, 339, 340, 341, 342, 345, 346, 350, 351, 352, 354, 356, 357, 368, 373, 374, 375, 376, 377, 378, 379, 389, 390, 393, 394, 398, 399, 400, 401, 402, 408, 409, 415, 416, 418, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 464, 469, 477, 480, 481, 483, 487, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 508, 509, 512, 513, 515, 520, 522, 524, 525, 526, 528, 535, 545, 546, 553, 555, 556, 568, 570, 571, 572, 577, 601, 604, 606, 610, 611, 612, 613, 615, 616, 638, 639, 644, 645, 646, 653, 654, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 679, 680, 681, 682, 683, 691, 695, 700, 708, 709, 710, 712, 713, 714, 716, 717, 718, 721, 722, 727, 728, 729, 730, 731, 732, 738, 740, 745, 746, 747, 748, 749, 750, 751, 754, 757, 759, 761, 762, 763, 764, 765, 766, 767, 777, 780, 783, 784, 787, 790, 791, 792, 793, 795, 796, 805, 821, 824, 826, 827, 829, 830, 831, 836, 837, 843, 845, 846, 849, 853, 854, 855, 863, 864, 866, 868, 872, 875, 881, 882, 883, 888, 889, 890, 897, 899, 901, 905, 910, 912, 919, 923, 924, 925, 927, 929, 932, 933, 934, 942, 943, 945, 946, 947, 948, 949, 950, 951, 953, 955, 956, 967, 969, 971, 972, 973, 975, 976, 987, 990, 991, 992, 994, 998, 1004, 1005, 1011, 1012, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1071, 1073, 1077, 1078, 1083, 1087, 1094, 1095, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1129, 1131, 1133, 1134, 1135, 1137, 1144, 1154, 1155, 1162, 1164, 1169, 1178, 1185, 1191, 1192, 1193, 1194, 1195, 1196, 1209, 1211, 1219, 1227, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1253, 1254, 1255, 1256, 1257, 1265, 1269, 1274, 1282, 1285, 1292, 1295, 1297, 1298, 1299, 1301, 1310, 1319, 1320, 1324, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1336, 1338, 1339, 1340, 1341], "return_as_str": [209, 320, 572], "return_dtyp": [40, 230, 320, 555, 556, 611, 612, 721, 766, 767, 805, 1164, 1191, 1192, 1310], "return_typ": [277, 282, 320], "returns_scalar": [555, 556, 767, 805, 923], "reus": [57, 58, 174, 826, 827, 837, 864, 875, 919], "reusabl": 174, "rev": [227, 320, 851, 919], "revers": [181, 197, 283, 320, 390, 402, 403, 404, 405, 406, 581, 583, 585, 713, 734, 740, 805, 821, 882, 919, 1005, 1006, 1007, 1008, 1009, 1310, 1328, 1331], "reverse_": 583, "reverse_a": 583, "reverse_b": 583, "revert": [7, 9, 10], "rhap": [665, 667, 1241], "rhapsodi": [665, 667, 1241], "right": [9, 10, 15, 16, 18, 27, 40, 67, 135, 136, 158, 159, 160, 161, 211, 225, 226, 252, 289, 320, 408, 463, 464, 465, 466, 493, 536, 537, 538, 539, 604, 617, 620, 622, 624, 626, 628, 631, 633, 635, 639, 647, 733, 746, 747, 749, 750, 792, 793, 805, 845, 849, 850, 868, 886, 919, 1011, 1072, 1073, 1074, 1075, 1099, 1145, 1146, 1147, 1148, 1185, 1211, 1222, 1310, 1326, 1331], "right_left": [225, 320, 849, 919], "right_on": [225, 226, 289, 320, 849, 850, 886, 919], "rightmost": [639, 805, 1211, 1310, 1333], "rld": [685, 687, 1261], "rle": [616, 805, 1196, 1310], "rle_id": [615, 805, 1310], "rle_id_a": [616, 805], "rle_id_ab": [616, 805], "rmm": 894, "rn": [135, 136, 149], "role": [32, 138], "roll": [211, 320, 415, 434, 435, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 735, 781, 782, 805, 845, 919, 1017, 1040, 1041, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1310], "rollback": [435, 1041], "rolled_forward": 415, "rollforward": [434, 1040], "rolling_map": [805, 1310], "rolling_max": [805, 1310], "rolling_max_bi": 805, "rolling_mean": [805, 1310], "rolling_mean_bi": 805, "rolling_median": [805, 1310], "rolling_median_bi": 805, "rolling_min": [805, 1310], "rolling_min_bi": 805, "rolling_quantil": [805, 1310], "rolling_quantile_bi": 805, "rolling_row_max": [620, 805], "rolling_row_mean": [622, 805], "rolling_row_median": [624, 805], "rolling_row_min": [626, 805], "rolling_row_quantil": [628, 805], "rolling_row_std": [631, 805], "rolling_row_sum": [633, 805], "rolling_row_var": [635, 805], "rolling_skew": [805, 1310], "rolling_std": [805, 1310], "rolling_std_bi": 805, "rolling_sum": [618, 805, 1197, 1310], "rolling_sum_bi": 805, "rolling_var": [805, 1310], "rolling_var_bi": 805, "rollinggroupbi": [252, 320], "rollinginterpolationmethod": [189, 247, 312, 320, 605, 627, 628, 778, 805, 831, 865, 908, 919, 1012, 1186, 1202, 1310], "ronaldo": [662, 1236], "root": [139, 150, 395, 569, 580, 581, 583, 585, 587, 588, 651, 804, 805, 995, 1225, 1310, 1332], "rotat": [320, 323, 1310, 1315], "round": [20, 40, 53, 129, 137, 320, 396, 400, 476, 637, 709, 805, 996, 1085, 1208, 1310, 1331], "round_sig_fig": [805, 1310], "round_str": 1048, "round_td": 1048, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 45, 46, 49, 51, 52, 54, 59, 97, 103, 111, 119, 125, 126, 127, 128, 129, 132, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 158, 159, 165, 179, 181, 182, 183, 193, 194, 199, 202, 204, 205, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 236, 241, 245, 252, 255, 256, 265, 271, 274, 276, 277, 282, 283, 285, 287, 288, 289, 296, 297, 301, 303, 305, 306, 314, 320, 324, 345, 346, 354, 369, 390, 391, 469, 477, 481, 487, 509, 520, 547, 597, 598, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 643, 648, 650, 661, 670, 708, 713, 727, 730, 736, 738, 755, 759, 761, 762, 764, 779, 781, 782, 790, 795, 805, 821, 824, 834, 835, 841, 842, 843, 845, 846, 849, 850, 851, 852, 854, 855, 859, 876, 881, 882, 883, 885, 886, 892, 893, 897, 899, 901, 902, 910, 919, 929, 944, 953, 1077, 1078, 1087, 1094, 1118, 1129, 1180, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1223, 1235, 1244, 1282, 1310, 1319, 1326, 1328, 1339, 1341], "row_group": [147, 154], "row_group_s": [45, 49, 320, 919], "row_height": [40, 320], "row_index": [40, 320], "row_index_nam": [135, 136, 141, 143, 145, 147, 149, 152, 153, 154], "row_index_offset": [135, 136, 141, 143, 145, 147, 149, 152, 153, 154], "row_nr": [296, 320, 892, 919], "row_tot": [40, 320], "rowname_col": [320, 324], "rows_by_kei": [223, 254, 273, 320], "rowserror": [253, 320], "rowtotalsdefinit": [40, 320], "rpc": 137, "rstrip": 581, "rtol": [158, 159, 160, 161], "rtrim": 1331, "ru": 1333, "rule": [135, 147, 149, 154, 204, 320, 655, 678, 693, 1229, 1252, 1267], "run": [46, 47, 48, 49, 57, 58, 66, 137, 165, 168, 169, 170, 210, 225, 228, 230, 259, 285, 295, 306, 320, 394, 407, 519, 555, 556, 615, 616, 673, 783, 805, 826, 827, 837, 844, 849, 855, 859, 864, 871, 875, 883, 890, 894, 919, 925, 992, 1010, 1128, 1164, 1195, 1196, 1247, 1310, 1338, 1341], "runtimeerror": [278, 320, 1291, 1310], "rust": [37, 45, 46, 93, 105, 141, 143, 147, 230, 306, 320, 664, 919, 923, 1164, 1238, 1310], "s1": [50, 89, 90, 160, 161, 204, 320, 968, 1069, 1070, 1089, 1113, 1123, 1156, 1176, 1188, 1301, 1310], "s2": [1, 50, 89, 90, 160, 161, 204, 320, 968, 997, 1014, 1069, 1070, 1089, 1104, 1113, 1123, 1156, 1170, 1176, 1188, 1301, 1310], "s3": [1, 39, 139, 150, 151, 154, 155, 320, 968, 1156, 1310], "s_": 447, "s_bar": 1328, "s_dt": [447, 1333, 1334], "s_dt1": 1333, "s_dt2": 1333, "s_dtm": 447, "s_foo": 1328, "s_from_str_repr": [1288, 1310], "s_head_5": 668, "s_head_n": 668, "s_tail_5": 691, "s_tail_n": 691, "s_td": 447, "s_tm": [447, 1333, 1334], "safe": [609, 805, 1189, 1310], "sale": [597, 805], "sam": 12, "same": [20, 39, 40, 50, 51, 57, 58, 59, 89, 90, 106, 141, 149, 158, 159, 160, 161, 163, 174, 202, 210, 230, 245, 254, 255, 266, 285, 294, 295, 299, 306, 320, 328, 335, 368, 393, 413, 414, 447, 473, 477, 479, 480, 483, 546, 560, 566, 597, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 650, 661, 672, 703, 801, 805, 826, 827, 841, 844, 853, 855, 877, 883, 889, 890, 895, 919, 925, 930, 967, 991, 1015, 1016, 1021, 1053, 1155, 1164, 1191, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1235, 1246, 1301, 1310, 1324, 1326, 1334], "samoa": [416, 1018], "sampl": [135, 136, 306, 320, 643, 647, 805, 902, 1222, 1310, 1327], "sample_s": [135, 136], "sampled_from": 1341, "sandwich": [207, 320], "sat": [320, 323], "satisfi": [493, 805, 1099, 1310], "saturdai": [211, 320, 845, 919], "save": [2, 3, 6, 211, 226, 252, 290, 320, 416, 424, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 751, 792, 793, 801, 805, 817, 845, 850, 868, 919, 1026, 1043, 1048, 1061], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [179, 221, 230, 253, 320, 394, 555, 639, 668, 673, 680, 691, 765, 767, 805, 923, 929, 992, 1113, 1211, 1242, 1247, 1254, 1265, 1310], "scale": [28, 67, 197, 320, 378, 556, 601, 694, 805, 925, 1071, 1268, 1310], "scale_negative_even": [601, 805], "scan": [125, 128, 135, 136, 137, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 320, 670, 919, 1244], "scan_csv": [46, 47, 48, 49, 135, 136, 919], "scan_parquet": [147, 155], "scan_pyarrow_dataset": [147, 154], "scatter": [320, 323, 1310, 1315], "scenario": 1310, "schedul": [58, 827, 919], "schema": [0, 1, 14, 28, 35, 38, 39, 52, 53, 54, 59, 97, 114, 115, 122, 124, 125, 126, 128, 132, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 154, 183, 184, 185, 191, 195, 197, 224, 228, 230, 237, 241, 249, 278, 282, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 422, 546, 547, 556, 567, 582, 584, 586, 670, 721, 787, 805, 817, 824, 825, 828, 829, 833, 836, 855, 860, 866, 888, 902, 919, 925, 1000, 1244, 1310, 1319], "schema_mod": [39, 320], "schema_overrid": [122, 124, 125, 126, 127, 128, 135, 136, 137, 138, 140, 144, 145, 146, 149, 153, 224, 278, 320, 919, 925], "schemadefinit": [122, 124, 125, 126, 128, 144, 145, 153, 320, 919], "schemadict": [81, 122, 124, 125, 126, 127, 128, 135, 137, 138, 140, 146, 147, 149, 152, 154, 320, 787, 855, 902, 919], "schemainitdatatyp": 924, "schindler": 1319, "scientif": [11, 37, 46, 320, 919], "scikit": [282, 320], "scipi": [505, 647, 805, 1114, 1222, 1310], "scope": [33, 34, 174, 816, 925, 1322, 1325, 1338], "score": [40, 245, 320], "script": [320, 323, 1310, 1315], "scroll": [40, 320], "sdiff": 538, "search": [226, 320, 547, 655, 665, 667, 678, 850, 877, 919, 1229, 1239, 1241, 1252], "search_sort": [805, 1310], "searchsortedsid": [639, 805, 1211, 1310], "searchstrategi": [162, 164, 165, 166, 167, 169], "season": [676, 677], "sec": [1334, 1341], "second": [37, 46, 145, 149, 152, 153, 158, 159, 160, 161, 211, 226, 252, 290, 320, 426, 429, 431, 432, 436, 437, 440, 442, 447, 454, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 676, 677, 690, 693, 748, 749, 750, 751, 791, 792, 793, 795, 805, 845, 850, 868, 919, 925, 1043, 1046, 1048, 1060, 1061, 1073, 1250, 1251, 1264, 1267, 1310, 1333, 1334, 1339, 1341], "second_part": [682, 683, 1256, 1257], "seconds_diff": 454, "secret": [151, 154], "section": [245, 320, 654, 662, 663, 666, 676, 677, 746, 747, 749, 750, 792, 793, 1228, 1236, 1237, 1240, 1250, 1251], "secur": [410, 805, 832, 919], "see": [37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 57, 58, 66, 137, 138, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 165, 169, 176, 187, 202, 211, 225, 244, 245, 320, 324, 383, 384, 386, 387, 397, 447, 472, 505, 555, 647, 654, 662, 663, 666, 668, 676, 677, 691, 746, 747, 749, 750, 779, 792, 793, 801, 805, 826, 827, 841, 845, 894, 919, 923, 925, 927, 981, 982, 984, 985, 993, 999, 1053, 1114, 1222, 1228, 1236, 1237, 1240, 1242, 1250, 1251, 1265, 1310, 1341], "seed": [156, 212, 256, 320, 486, 535, 607, 638, 643, 805, 1093, 1144, 1187, 1209, 1218, 1310], "seed_1": [212, 320, 486, 805, 1093, 1310], "seed_2": [212, 320, 486, 805, 1093, 1310], "seed_3": [212, 320, 486, 805, 1093, 1310], "seen": [447, 1053], "seen_group": 136, "select": [1, 8, 38, 51, 52, 53, 54, 94, 133, 135, 136, 137, 138, 139, 141, 143, 147, 149, 155, 164, 179, 180, 221, 222, 226, 230, 241, 244, 253, 259, 265, 267, 280, 286, 290, 297, 320, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 354, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 376, 379, 380, 385, 388, 389, 390, 392, 395, 396, 398, 399, 400, 401, 407, 409, 411, 412, 413, 414, 417, 419, 420, 428, 434, 435, 437, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 463, 465, 466, 467, 468, 469, 470, 474, 476, 478, 481, 485, 486, 487, 488, 489, 490, 491, 494, 495, 498, 504, 505, 506, 508, 509, 519, 520, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 563, 575, 577, 579, 580, 582, 584, 586, 589, 590, 594, 595, 596, 597, 599, 600, 603, 605, 606, 607, 608, 609, 610, 613, 614, 615, 618, 629, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 664, 665, 666, 667, 669, 690, 701, 703, 704, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 722, 724, 726, 729, 730, 731, 734, 735, 737, 738, 739, 740, 743, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 768, 770, 772, 773, 775, 776, 779, 780, 784, 785, 786, 787, 788, 790, 794, 801, 805, 820, 826, 829, 850, 863, 871, 876, 878, 884, 891, 893, 894, 919, 925, 929, 1047, 1086, 1128, 1210, 1212, 1223, 1241, 1245, 1264, 1310, 1319, 1320, 1321, 1322, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340], "select_from": [164, 167, 169], "select_seq": [320, 919], "selector": [0, 40, 182, 191, 193, 194, 198, 236, 243, 245, 266, 275, 277, 282, 285, 287, 288, 320, 324, 447, 467, 563, 805, 817, 823, 833, 834, 835, 838, 859, 877, 883, 885, 919], "selectortyp": [40, 320, 925], "self": [1, 52, 53, 54, 55, 57, 58, 267, 298, 320, 784, 805, 826, 827, 837, 864, 875, 878, 891, 919, 934, 979, 980, 981, 982, 984, 985, 988, 1000, 1005, 1078, 1082, 1096, 1162, 1164, 1177, 1181, 1182, 1188, 1191, 1192, 1210, 1212, 1213, 1224, 1298, 1301, 1310, 1321, 1322, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338], "semi": [132, 225, 320, 849, 919, 1326], "semigraph": 20, "sens": [135, 141, 143, 237, 290, 320, 597, 805, 860, 919], "sensit": [654, 663, 666, 676, 677, 1228, 1237, 1240, 1250, 1251], "sep": 132, "separ": [9, 10, 24, 27, 36, 37, 46, 131, 132, 134, 135, 136, 140, 149, 243, 245, 275, 284, 286, 320, 354, 357, 447, 520, 526, 556, 661, 736, 741, 742, 805, 884, 919, 953, 956, 1053, 1129, 1135, 1235, 1280, 1286, 1310, 1333], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 45, 51, 81, 122, 124, 125, 126, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 163, 164, 165, 166, 167, 181, 189, 198, 199, 225, 226, 236, 241, 243, 244, 245, 255, 266, 275, 277, 282, 283, 287, 288, 289, 290, 320, 369, 390, 408, 480, 497, 547, 555, 601, 604, 611, 612, 650, 678, 688, 689, 703, 713, 730, 741, 742, 755, 757, 766, 767, 776, 779, 785, 805, 821, 831, 838, 849, 850, 859, 863, 877, 882, 885, 886, 919, 925, 968, 1011, 1012, 1078, 1156, 1185, 1191, 1192, 1252, 1278, 1310], "sequenti": [57, 58, 259, 295, 320, 826, 827, 837, 864, 871, 875, 890, 919], "ser": [1023, 1024, 1051], "seri": [0, 1, 11, 25, 40, 50, 52, 53, 54, 55, 59, 60, 69, 81, 89, 90, 99, 122, 124, 127, 129, 160, 161, 165, 179, 192, 202, 204, 206, 208, 211, 212, 215, 216, 218, 220, 222, 232, 234, 239, 250, 252, 256, 270, 273, 276, 278, 280, 281, 300, 320, 335, 346, 369, 373, 392, 393, 394, 396, 441, 470, 473, 476, 480, 481, 490, 495, 497, 498, 500, 501, 502, 503, 514, 520, 522, 547, 553, 555, 556, 607, 608, 609, 610, 611, 612, 617, 618, 629, 640, 642, 668, 678, 690, 691, 692, 693, 697, 701, 712, 717, 727, 731, 734, 741, 742, 746, 747, 749, 750, 755, 757, 761, 762, 765, 766, 767, 777, 779, 780, 783, 784, 787, 792, 793, 796, 805, 817, 841, 845, 868, 896, 919, 923, 1302, 1304, 1306, 1309, 1311, 1314, 1315, 1316, 1317, 1318, 1320, 1322, 1338, 1341], "serial": [43, 44, 190, 320, 410, 574, 805, 832, 919], "serializ": [805, 923], "serializationformat": [190, 260, 320, 410, 570, 805, 832, 872, 919], "seriesplot": [1310, 1315], "server": [38, 137, 138, 320], "servic": 32, "service_account": [139, 150], "service_account_json_absolute_path": [139, 150], "session": 137, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 63, 66, 67, 69, 123, 124, 125, 128, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 178, 186, 193, 194, 203, 206, 210, 212, 223, 225, 226, 234, 236, 254, 256, 258, 260, 265, 270, 275, 277, 278, 282, 284, 285, 287, 288, 289, 294, 320, 323, 332, 334, 356, 357, 369, 381, 383, 384, 386, 387, 397, 408, 440, 441, 458, 486, 497, 522, 524, 526, 535, 536, 537, 538, 539, 541, 547, 555, 556, 563, 564, 570, 601, 604, 611, 612, 618, 619, 621, 623, 625, 627, 630, 632, 634, 638, 643, 647, 648, 653, 669, 670, 676, 677, 680, 685, 686, 687, 688, 689, 690, 692, 693, 697, 718, 722, 724, 727, 731, 736, 746, 747, 748, 749, 750, 751, 761, 762, 765, 771, 777, 780, 781, 782, 783, 787, 789, 792, 793, 795, 796, 805, 817, 826, 827, 834, 835, 837, 844, 849, 850, 855, 859, 870, 872, 876, 883, 885, 886, 889, 902, 919, 923, 932, 933, 955, 956, 968, 972, 979, 981, 982, 984, 985, 999, 1011, 1046, 1047, 1064, 1084, 1093, 1104, 1111, 1131, 1133, 1135, 1144, 1145, 1146, 1147, 1148, 1150, 1156, 1164, 1185, 1191, 1192, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1209, 1210, 1211, 1218, 1222, 1223, 1227, 1243, 1244, 1250, 1251, 1254, 1259, 1260, 1261, 1264, 1266, 1267, 1271, 1291, 1299, 1310, 1329, 1337, 1341], "set_": 174, "set_auto_structifi": [258, 294, 320, 870, 889, 919], "set_decimal_separ": 27, "set_environ": 168, "set_except": [58, 827, 919], "set_fmt_float": 30, "set_fmt_str_length": [655, 665, 667, 678, 1229, 1241, 1252], "set_index": [211, 320, 845, 919], "set_legend": [40, 320], "set_sort": [252, 290, 320, 617, 805, 868, 919, 1310], "set_stat": 30, "set_streaming_chunk_s": [826, 919], "set_styl": [40, 320], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 51], "set_tbl_row": 174, "set_tbl_width_char": 678, "set_thousands_separ": 9, "set_titl": [40, 320], "set_verbos": 174, "setosa": [320, 323], "setup": 1341, "sever": [122, 124, 125, 126, 128, 144, 145, 153, 320, 919, 1341], "sfu": 138, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 50, 51, 52, 53, 54, 55, 59, 60, 77, 81, 89, 90, 97, 116, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 144, 145, 149, 155, 162, 165, 169, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 256, 258, 260, 263, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 575, 576, 577, 578, 579, 580, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 820, 821, 823, 824, 826, 827, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 924, 925, 929, 930, 931, 934, 936, 937, 938, 939, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1089, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1169, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1280, 1282, 1283, 1284, 1286, 1287, 1288, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1310, 1319, 1320, 1321, 1322, 1324, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339], "share": [158, 159, 160, 161, 197, 320, 1071, 1310], "shawshank": 1319, "sheet": [40, 140, 146, 320], "sheet1": [40, 320], "sheet_id": [140, 146], "sheet_nam": [140, 146], "sheet_zoom": [40, 320], "sheetnam": [140, 146], "shift": [211, 320, 372, 411, 478, 517, 598, 735, 805, 845, 919, 1013, 1126, 1180, 1310], "short": [158, 160, 377, 975], "shorten": [158, 160], "shorter": [135, 136, 149, 547, 761, 762], "shorthand": [320, 323, 1310, 1315], "should": [10, 38, 40, 45, 46, 47, 48, 49, 59, 122, 124, 126, 128, 132, 140, 144, 145, 149, 153, 155, 162, 163, 165, 169, 191, 223, 226, 230, 253, 254, 255, 266, 274, 275, 286, 306, 320, 330, 407, 410, 458, 464, 467, 500, 501, 519, 556, 570, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 647, 650, 676, 677, 718, 730, 751, 753, 765, 767, 781, 782, 795, 801, 805, 826, 832, 833, 849, 850, 855, 872, 877, 884, 919, 925, 1010, 1064, 1073, 1128, 1164, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1211, 1222, 1250, 1251, 1299, 1310, 1320], "show": [30, 40, 189, 194, 209, 228, 242, 320, 488, 571, 805, 831, 864, 875, 919, 1095, 1310, 1324, 1337], "show_graph": [228, 320, 919], "show_plot": [864, 919], "shrink": [264, 320, 642, 805, 1216, 1217, 1310], "shrink_dtyp": [805, 1310], "shrink_to_fit": [320, 1310], "shuffl": [156, 256, 282, 306, 320, 535, 638, 805, 902, 1144, 1209, 1310], "side": [40, 211, 252, 320, 493, 536, 537, 538, 539, 617, 620, 622, 624, 626, 628, 631, 633, 635, 639, 746, 747, 749, 750, 792, 793, 805, 845, 868, 919, 923, 1099, 1145, 1146, 1147, 1148, 1211, 1310], "sign": [65, 66, 68, 72, 73, 74, 75, 76, 82, 437, 609, 676, 677, 700, 805, 925, 1043, 1189, 1250, 1251, 1274, 1310, 1331], "sign_x": 1332, "signed_integ": 925, "signific": [154, 223, 230, 320, 383, 384, 386, 387, 556, 637, 805, 981, 982, 984, 985, 1164, 1208, 1310], "significantli": [140, 230, 306, 320, 1164, 1310, 1341], "silenc": 97, "silent": [695, 1269], "similar": [36, 45, 134, 171, 204, 226, 263, 285, 287, 320, 364, 444, 447, 540, 597, 641, 705, 764, 795, 805, 850, 874, 883, 885, 919, 963, 1050, 1053, 1149, 1215, 1310], "similarli": [40, 125, 211, 226, 252, 290, 320, 437, 442, 455, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 1043, 1048, 1061], "simpl": [40, 241, 320], "simpler": [925, 1250], "simpli": [149, 741, 755], "simplifi": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "simplify_express": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "sin": [805, 1310, 1331], "sinc": [39, 65, 66, 82, 135, 136, 137, 139, 145, 149, 150, 152, 153, 162, 163, 164, 165, 169, 172, 180, 236, 278, 296, 301, 320, 422, 425, 458, 479, 555, 574, 611, 653, 661, 720, 729, 737, 757, 805, 820, 837, 859, 877, 891, 892, 897, 919, 1024, 1027, 1032, 1033, 1064, 1092, 1191, 1227, 1235, 1291, 1310], "sind": 1331, "sine": [339, 340, 555, 645, 646, 805, 938, 939, 1220, 1221, 1310, 1335], "singl": [40, 45, 51, 57, 58, 59, 134, 135, 136, 137, 138, 139, 140, 147, 149, 150, 152, 163, 182, 191, 192, 193, 194, 199, 206, 212, 221, 230, 243, 253, 255, 266, 277, 278, 320, 353, 394, 397, 415, 437, 480, 483, 486, 516, 522, 555, 556, 608, 611, 613, 615, 650, 653, 668, 669, 673, 680, 691, 720, 730, 734, 735, 736, 762, 766, 767, 785, 793, 801, 805, 823, 826, 827, 833, 834, 835, 877, 919, 925, 952, 992, 999, 1017, 1043, 1078, 1093, 1125, 1131, 1188, 1191, 1193, 1195, 1227, 1242, 1243, 1247, 1254, 1265, 1285, 1291, 1310, 1321], "singlecolselector": 179, "singleindexselector": [179, 929], "sinh": [805, 1310], "sink_csv": 919, "sink_ipc": 919, "sink_ndjson": 919, "sink_parquet": 919, "site_id": [320, 324], "six": [639, 805], "size": [14, 45, 49, 135, 136, 137, 162, 163, 164, 165, 169, 171, 197, 288, 320, 547, 613, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 727, 761, 762, 781, 782, 805, 826, 919, 1071, 1193, 1203, 1310, 1341], "sizeunit": [197, 320, 378, 976, 1071, 1310], "skew": [629, 805, 1203, 1310], "skewtest": [647, 805, 1222, 1310], "skip": [135, 136, 140, 147, 149, 154, 226, 288, 320, 850, 919, 1164, 1310, 1326], "skip_empty_lin": 140, "skip_lin": [135, 149], "skip_nul": [556, 805, 1164, 1310], "skip_row": [135, 136, 149], "skip_rows_after_head": [135, 136, 149], "sklearn": [282, 320], "slice": [46, 47, 48, 49, 52, 57, 58, 197, 213, 224, 271, 320, 525, 545, 556, 567, 569, 618, 619, 621, 623, 625, 627, 630, 632, 634, 668, 691, 805, 826, 827, 837, 855, 864, 875, 919, 923, 1071, 1094, 1134, 1154, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1242, 1265, 1282, 1310, 1333], "slice_pushdown": [46, 47, 48, 49, 57, 58, 826, 827, 837, 855, 864, 875, 919], "slide": [407, 805, 1010, 1310], "slightli": [46, 47, 48, 49, 93, 477, 805, 919, 1334], "slot": [407, 411, 517, 805, 1010, 1013, 1126, 1310], "slow": [109, 125, 128, 135, 136, 137, 140, 144, 145, 146, 149, 153, 154, 320, 407, 556, 618, 670, 805, 902, 919, 1010, 1197, 1244, 1310], "slower": [126, 128, 140, 210, 230, 243, 290, 306, 320, 556, 767, 805, 844, 902, 919, 1164, 1310], "small": [11, 138, 442, 919, 1341], "smaller": [45, 49, 197, 320, 919, 1071, 1310], "smallest": [181, 283, 320, 389, 390, 713, 805, 821, 882, 919, 987, 1310, 1327, 1330], "smooth": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "snappi": [35, 45, 49, 320, 919], "snapshot": 151, "snapshot_id": 151, "snowflak": [137, 138], "snowi": [676, 677], "so": [1, 40, 138, 149, 171, 174, 209, 211, 227, 245, 252, 320, 346, 356, 410, 477, 493, 524, 547, 556, 617, 676, 677, 678, 685, 686, 687, 701, 805, 832, 845, 851, 868, 919, 925, 955, 1133, 1250, 1251, 1252, 1259, 1260, 1261], "softwar": [36, 134, 320], "solut": [38, 320], "some": [14, 30, 40, 50, 90, 125, 135, 136, 137, 149, 178, 194, 245, 255, 278, 320, 324, 676, 677, 801, 1104, 1250, 1251, 1310, 1341], "some_account": [663, 1237], "some_t": 1340, "someth": [555, 805], "sometim": [751, 804], "somewher": [663, 1237], "sort": [51, 52, 181, 211, 226, 237, 244, 245, 252, 261, 283, 290, 303, 314, 320, 345, 389, 390, 464, 473, 556, 597, 617, 640, 650, 712, 713, 718, 720, 730, 746, 749, 767, 805, 821, 837, 845, 850, 860, 863, 864, 868, 873, 875, 882, 899, 910, 919, 925, 944, 987, 1073, 1111, 1213, 1295, 1296, 1299, 1310, 1326, 1339, 1341], "sort_bi": 805, "sort_column": [245, 320], "sorted_asc": [1084, 1310], "sorted_desc": [1084, 1310], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 805, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310, 1315, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1338], "source_ac": 129, "source_actor_id": 129, "source_alia": [39, 320], "source_cha": 129, "source_channel_id": 129, "south": 69, "space": [20, 211, 320, 447, 845, 919, 925, 1053], "spam": [233, 320, 663, 1237], "span": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "spanner": [320, 324], "spark": [45, 320], "sparklin": [40, 320], "speak": [647, 805, 1222, 1310], "spearman": 737, "speci": [320, 323], "special": [38, 135, 136, 138, 149, 282, 297, 320, 618, 663, 676, 677, 805, 893, 919, 1164, 1197, 1237, 1250, 1251, 1310], "specif": [1, 30, 39, 40, 41, 42, 93, 122, 124, 126, 128, 135, 138, 139, 140, 144, 145, 146, 150, 151, 153, 182, 223, 225, 272, 277, 320, 444, 447, 690, 692, 693, 697, 718, 805, 823, 849, 919, 924, 925, 1050, 1053, 1264, 1266, 1267, 1271, 1285, 1289, 1299, 1310, 1326, 1338, 1341], "specifi": [33, 37, 38, 39, 40, 45, 46, 51, 94, 97, 100, 115, 118, 135, 140, 146, 147, 149, 154, 166, 181, 182, 197, 198, 201, 206, 210, 211, 225, 226, 243, 245, 252, 253, 255, 258, 259, 263, 266, 277, 283, 286, 294, 295, 299, 320, 390, 397, 440, 447, 463, 465, 466, 467, 472, 597, 610, 612, 619, 621, 623, 625, 627, 630, 632, 634, 641, 650, 705, 713, 730, 733, 734, 735, 736, 746, 747, 749, 750, 751, 753, 783, 787, 792, 793, 801, 805, 821, 823, 838, 840, 844, 845, 849, 850, 868, 870, 871, 874, 877, 882, 884, 889, 890, 895, 919, 925, 999, 1046, 1053, 1071, 1072, 1074, 1075, 1081, 1192, 1215, 1289, 1310, 1326, 1340], "speed": [49, 261, 320, 556, 805, 873, 919, 1341], "speedup": [51, 154, 223, 230, 320, 556, 805, 1164, 1310], "split": [1, 40, 45, 52, 224, 320, 661, 682, 683, 1235, 1256, 1257], "split_by_column_dtyp": 54, "split_inclus": 681, "splitfram": [1, 52], "spreadsheet": [36, 134, 140, 146, 245, 320], "spring": [676, 677], "sql": [0, 38, 112, 113, 121, 137, 138, 225, 263, 320, 364, 540, 641, 764, 785, 805, 817, 874, 919, 963, 1149, 1215, 1310, 1319, 1320, 1322, 1324, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1336, 1339, 1340], "sql_expr": 1338, "sqlalchemi": [38, 137, 157, 320], "sqlcontext": [267, 320, 784, 878, 919, 1337], "sqlite": [38, 137, 320], "sqrt": [556, 647, 705, 805, 1164, 1222, 1310, 1331], "sqrt_x": 1332, "squar": [1, 55, 306, 505, 613, 651, 805, 902, 1114, 1193, 1225, 1310, 1332], "st": [32, 1341], "stabil": [212, 320, 486, 805, 1093, 1310], "stabl": [147, 176, 187, 189, 190, 212, 256, 260, 267, 320, 410, 486, 552, 570, 711, 805, 831, 832, 859, 872, 877, 878, 919, 927, 1093, 1293, 1310], "stack": [59, 215, 292, 320, 323, 1320], "stai": [555, 643, 805], "standalon": [163, 925], "standard": [7, 10, 40, 268, 277, 282, 320, 428, 465, 630, 631, 647, 652, 671, 786, 801, 805, 879, 919, 1030, 1069, 1074, 1176, 1222, 1226, 1245, 1310, 1327, 1341], "standardis": [40, 320], "start": [40, 133, 135, 136, 138, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 171, 205, 210, 211, 228, 265, 290, 296, 297, 320, 373, 376, 379, 415, 423, 433, 438, 442, 455, 456, 467, 481, 523, 541, 616, 620, 622, 624, 626, 628, 631, 633, 635, 648, 654, 659, 663, 667, 675, 680, 684, 685, 687, 688, 691, 700, 727, 732, 741, 745, 746, 747, 748, 749, 750, 753, 755, 761, 762, 792, 793, 795, 801, 805, 843, 844, 845, 864, 876, 892, 893, 919, 925, 977, 1017, 1019, 1022, 1025, 1027, 1028, 1034, 1036, 1038, 1039, 1042, 1044, 1048, 1052, 1061, 1062, 1087, 1132, 1150, 1196, 1223, 1233, 1237, 1241, 1249, 1254, 1258, 1259, 1261, 1265, 1274, 1310, 1326, 1333, 1341], "start_bi": [211, 320, 845, 919], "startbi": [211, 320, 845, 919], "starts_a": 1333, "starts_with": [52, 245, 320, 324, 373, 376, 563, 654, 659, 784, 878, 919, 925, 1233, 1331], "starts_with_expr": 379, "starts_with_lit": 379, "startup": [277, 320], "stat": [505, 647, 805, 1114, 1222, 1310], "state": [4, 5, 105, 741, 817, 837, 864, 875, 919, 1338], "statement": [597, 795, 805, 1324, 1339], "static": [87, 902], "statist": [45, 49, 135, 136, 147, 152, 154, 189, 320, 465, 466, 505, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 647, 805, 831, 919, 1012, 1074, 1075, 1114, 1203, 1222, 1310], "std": [189, 320, 630, 631, 805, 831, 919, 1012, 1204, 1310], "std_dev": [40, 320], "stddev": 1331, "stddev_samp": 1327, "stdev": [40, 320, 1327], "stdev_samp": 1327, "stdout": [174, 209, 320, 572], "step": [288, 320, 477, 727, 761, 762, 805], "steve": [237, 320, 860, 919], "still": [137, 138], "stock": [320, 323], "stop": [133, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 620, 622, 624, 626, 628, 631, 633, 635, 805, 1019, 1022, 1027, 1028, 1034, 1036, 1038, 1042, 1048, 1052], "storag": [37, 39, 41, 45, 46, 47, 48, 49, 135, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 320, 919], "storage_account": 33, "storage_opt": [37, 39, 41, 45, 46, 47, 48, 49, 135, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 320, 919], "store": [39, 135, 151, 199, 223, 254, 320, 392, 615, 805, 989, 1078, 1195, 1310], "store_id": [597, 805], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 69, 91, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 165, 168, 169, 170, 174, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 206, 207, 209, 210, 211, 213, 215, 218, 220, 221, 223, 225, 226, 227, 229, 231, 233, 235, 236, 237, 238, 241, 243, 245, 247, 249, 250, 251, 252, 253, 254, 256, 260, 261, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 329, 330, 331, 352, 357, 369, 373, 374, 375, 376, 379, 380, 385, 388, 390, 392, 402, 408, 410, 412, 420, 437, 441, 442, 444, 447, 455, 464, 467, 473, 475, 479, 480, 483, 490, 493, 514, 515, 524, 525, 526, 541, 545, 547, 556, 567, 569, 570, 571, 572, 574, 581, 582, 583, 584, 585, 586, 587, 588, 594, 597, 601, 604, 610, 611, 612, 614, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 642, 649, 650, 701, 702, 703, 704, 713, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 801, 805, 812, 821, 823, 826, 827, 829, 831, 832, 833, 834, 835, 837, 838, 841, 844, 845, 847, 849, 850, 851, 859, 860, 863, 864, 866, 867, 868, 872, 873, 875, 876, 877, 878, 882, 883, 884, 885, 886, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 923, 924, 925, 931, 951, 956, 968, 973, 988, 989, 1011, 1012, 1022, 1043, 1047, 1048, 1050, 1053, 1061, 1073, 1081, 1084, 1123, 1124, 1135, 1156, 1172, 1173, 1174, 1185, 1190, 1191, 1192, 1212, 1275, 1277, 1278, 1286, 1287, 1288, 1289, 1299, 1310, 1316, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1330, 1333, 1334, 1338, 1339, 1341], "str_date": 1333, "str_timestamp": 1333, "strategi": [37, 46, 51, 59, 135, 154, 162, 163, 164, 165, 166, 167, 169, 201, 211, 225, 226, 240, 289, 320, 472, 547, 556, 805, 840, 845, 849, 850, 886, 919, 1081, 1156, 1310], "stream": [14, 41, 42, 46, 47, 48, 49, 57, 58, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 210, 225, 285, 320, 555, 805, 826, 827, 837, 844, 849, 855, 859, 864, 875, 877, 883, 919], "streamabl": [855, 859, 885, 919], "strftime": [93, 447, 1053, 1331, 1333], "strict": [124, 125, 128, 132, 182, 191, 249, 320, 374, 391, 447, 654, 657, 666, 690, 692, 693, 695, 697, 805, 823, 833, 866, 919, 925, 972, 988, 1053, 1228, 1231, 1240, 1264, 1266, 1267, 1269, 1271, 1310], "strictli": [37, 46, 50, 90, 320, 919], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 43, 44, 46, 50, 63, 66, 69, 81, 88, 89, 90, 91, 93, 99, 117, 125, 129, 132, 135, 136, 137, 138, 149, 158, 159, 160, 161, 162, 169, 173, 181, 182, 185, 190, 195, 197, 204, 206, 209, 210, 211, 226, 243, 245, 252, 255, 257, 258, 259, 260, 266, 276, 277, 283, 284, 288, 290, 294, 295, 299, 320, 329, 352, 357, 374, 375, 376, 390, 393, 394, 397, 410, 437, 442, 444, 447, 455, 464, 467, 475, 479, 493, 526, 570, 572, 597, 601, 611, 612, 617, 620, 622, 624, 626, 628, 631, 633, 635, 650, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 713, 721, 723, 725, 730, 733, 734, 735, 736, 744, 746, 747, 749, 750, 756, 769, 771, 774, 783, 787, 789, 792, 793, 795, 801, 805, 817, 821, 823, 828, 832, 836, 837, 844, 845, 850, 868, 869, 870, 871, 872, 877, 882, 889, 890, 895, 919, 924, 925, 956, 972, 973, 974, 990, 991, 992, 1043, 1048, 1050, 1053, 1061, 1073, 1099, 1135, 1191, 1192, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1277, 1288, 1289, 1310, 1319, 1320, 1328, 1331, 1334, 1337, 1341], "stringcach": [89, 90, 225, 320, 817, 990, 993], "stringio": [144, 145, 479, 805], "strings_hex": 658, "strip": [28, 685, 686, 687, 688, 689, 1259, 1260, 1261, 1333], "strip_chars_end": [687, 689], "strip_chars_start": [686, 688], "strip_prefix": [687, 689], "strip_suffix": [686, 688], "strongli": [40, 171, 230, 253, 306, 320, 556, 805, 1164, 1310], "strpo": 1331, "strpost": 1333, "strptime": [252, 320, 441, 617, 805, 868, 919, 1047, 1331], "struct": [8, 118, 129, 241, 258, 281, 286, 294, 320, 369, 408, 488, 547, 555, 556, 582, 584, 586, 604, 615, 616, 664, 670, 682, 683, 711, 718, 741, 742, 744, 766, 805, 870, 884, 889, 902, 919, 968, 1011, 1156, 1164, 1185, 1195, 1238, 1244, 1256, 1257, 1291, 1293, 1310], "struct_col": [701, 703, 704], "struct_seri": 902, "structarrai": [197, 320, 1071, 1310], "structfieldnotfounderror": 703, "structur": [40, 41, 42, 99, 102, 116, 132, 199, 244, 255, 272, 278, 320, 601, 805, 863, 919, 1078, 1285, 1310, 1338], "student": [245, 320], "style": [7, 20, 40, 137, 245, 320], "sub": [306, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 371, 526, 533, 805, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 965, 966, 970, 1135, 1142], "subarrai": [348, 349, 947, 948], "subclass": [1, 320], "subexpress": [57, 58, 826, 827, 837, 864, 875, 919], "subinterv": 1327, "subject": [45, 245, 320], "sublist": [356, 512, 513, 515, 517, 521, 522, 523, 524, 525, 526, 527, 536, 541, 545, 547, 955, 1104, 1121, 1122, 1124, 1126, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1145, 1150, 1154, 1156, 1310], "subplan": [57, 58, 826, 827, 837, 864, 875, 919], "subsequ": [40, 147, 154, 248, 279, 320, 547, 784, 795, 837, 919, 1292, 1310, 1325], "subset": [193, 194, 241, 285, 320, 834, 835, 883, 919], "substr": [373, 376, 379, 654, 659, 666, 676, 677, 680, 681, 682, 683, 684, 925, 971, 974, 977, 1228, 1233, 1240, 1250, 1251, 1254, 1255, 1256, 1257, 1258, 1331], "subtl": [40, 320], "subtli": [477, 805], "subtract": [505, 706, 805, 1114, 1310], "succe": [135, 136, 149], "success": [33, 656, 663, 1230, 1237], "successfulli": [826, 919], "suffix": [225, 226, 227, 258, 294, 299, 320, 331, 376, 390, 500, 501, 502, 503, 561, 581, 583, 586, 587, 588, 614, 659, 686, 689, 713, 805, 849, 850, 851, 870, 889, 891, 895, 919, 925, 974, 1233, 1263], "suffix_field": [582, 584], "sugar": [289, 320, 611, 612, 678, 722, 724, 726, 738, 740, 743, 753, 758, 759, 760, 768, 770, 772, 773, 775, 777, 778, 783, 786, 788, 790, 794, 796, 805, 886, 919, 1191, 1192, 1225, 1252, 1310], "suggest": [320, 323, 1310, 1315], "suitabl": [51, 59, 137, 163, 230, 320, 556, 639, 805, 1164, 1211, 1310], "sum": [40, 197, 204, 210, 211, 221, 245, 252, 270, 299, 320, 405, 406, 410, 460, 473, 547, 556, 567, 569, 570, 571, 572, 573, 611, 612, 617, 632, 633, 720, 722, 734, 741, 743, 744, 755, 767, 779, 789, 805, 826, 827, 832, 837, 844, 845, 862, 864, 868, 872, 875, 895, 919, 923, 925, 1008, 1009, 1067, 1071, 1205, 1310, 1319, 1326, 1328, 1331, 1338], "sum_": [647, 805, 1222, 1310], "sum_a": [252, 320, 617, 805, 868, 919], "sum_horizont": [51, 320, 788], "summari": [189, 320, 831, 919, 1012, 1310, 1326], "summer": [676, 677], "sun": [320, 323, 690, 1264], "sundai": [211, 320, 415, 444, 447, 457, 732, 845, 919, 1017, 1050, 1053, 1063], "sunni": [676, 677, 1250, 1251], "supercast": [204, 320], "supertyp": [59, 201, 278, 282, 320, 335, 735, 805, 840, 919, 923, 1310], "suppli": [38, 40, 122, 124, 125, 126, 128, 137, 144, 145, 153, 202, 253, 277, 320, 473, 601, 805, 841, 919, 1289, 1310], "support": [1, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 59, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 162, 166, 169, 174, 223, 224, 225, 226, 254, 255, 265, 266, 274, 279, 282, 320, 447, 464, 541, 597, 611, 612, 648, 650, 655, 665, 667, 668, 676, 677, 678, 680, 691, 801, 805, 811, 826, 849, 850, 876, 877, 919, 925, 1053, 1073, 1150, 1191, 1192, 1223, 1229, 1239, 1241, 1242, 1250, 1251, 1252, 1254, 1265, 1292, 1294, 1310, 1314, 1328, 1333, 1334, 1336, 1337, 1338], "supportsinterchang": 123, "suppos": [179, 245, 320, 556, 805, 1164, 1310], "sure": [59, 122, 127, 135, 136, 139, 141, 143, 147, 150, 248, 320, 805, 923], "surreal": 137, "surreal_query_to_fram": 137, "surrealdb": 137, "surrealhttp": 137, "surrealql": 137, "suscept": 919, "swap": [866, 919], "swim": 736, "switch": [416, 826, 919, 1018], "sy": 174, "sydnei": 748, "symbol": [36, 37, 46, 320, 805, 919], "symmetr": [538, 925, 1147], "symmetri": [829, 836, 869, 888, 919], "synchron": 913, "syntact": [289, 320, 611, 612, 678, 722, 724, 726, 738, 740, 743, 753, 758, 759, 760, 768, 770, 772, 773, 775, 777, 778, 783, 786, 788, 790, 794, 796, 805, 886, 919, 1191, 1192, 1225, 1252, 1310], "syntax": [40, 113, 202, 230, 241, 320, 571, 654, 662, 663, 666, 676, 677, 761, 762, 801, 841, 875, 919, 1228, 1236, 1237, 1240, 1250, 1251, 1310, 1334, 1336], "system": [36, 135, 136, 320, 420, 826, 919, 1022], "t": [36, 37, 39, 46, 59, 134, 135, 140, 146, 149, 211, 226, 230, 244, 285, 288, 320, 407, 416, 424, 441, 447, 460, 463, 465, 466, 519, 556, 597, 601, 662, 666, 676, 677, 687, 690, 693, 698, 795, 805, 845, 850, 863, 883, 919, 925, 1010, 1047, 1053, 1067, 1072, 1074, 1075, 1128, 1164, 1236, 1240, 1250, 1251, 1260, 1261, 1264, 1267, 1272, 1310, 1322, 1323, 1333], "t_": [286, 320, 464, 805, 884, 919, 1073, 1310], "t_0": [252, 320, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 868, 919, 1073, 1310], "t_1": [252, 320, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 868, 919, 1073, 1310], "t_a": [286, 320, 884, 919], "t_b": [286, 320, 884, 919], "t_c": [286, 320, 884, 919], "t_d": [286, 320, 884, 919], "t_i": [464, 805, 1073, 1310], "t_id": [227, 320, 851, 919], "t_n": [252, 320, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 868, 919], "t_struct": [286, 320, 884, 919], "tab_spann": [320, 324], "tab_stub": [320, 324], "tab_styl": [320, 324], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 122, 129, 132, 139, 140, 146, 150, 151, 225, 227, 245, 267, 272, 279, 288, 289, 320, 324, 784, 817, 849, 851, 878, 886, 919, 1320, 1321, 1322, 1323, 1325, 1326, 1337, 1338], "table_nam": [38, 40, 267, 320, 878, 919], "table_path": [39, 139, 150, 151, 320], "table_styl": [40, 320], "tablemerg": [39, 320], "tablenotfounderror": [39, 320], "tables_scale_100": [131, 136], "tail": [209, 213, 320, 335, 647, 805, 919, 1094, 1222, 1310], "take": [40, 132, 140, 146, 165, 166, 174, 204, 205, 211, 234, 237, 244, 245, 249, 320, 345, 415, 437, 473, 480, 481, 522, 523, 555, 582, 584, 586, 650, 730, 732, 752, 754, 763, 805, 843, 845, 860, 866, 919, 944, 1017, 1043, 1086, 1087, 1131, 1132, 1301, 1310, 1328], "taken": [541, 680, 1150, 1254], "talkin": [698, 1272], "tan": [805, 1310, 1331], "tand": 1331, "tangent": [341, 342, 709, 710, 805, 940, 941, 1283, 1284, 1310, 1335], "tanh": [245, 320, 805, 1310], "target": [1, 38, 39, 40, 56, 140, 282, 320, 662, 676, 677, 690, 692, 693, 925, 1236, 1250, 1251, 1264, 1266, 1267, 1333], "target_alia": [39, 320], "target_t": [38, 320], "task": [58, 827, 919], "tau": [463, 464, 805, 1072, 1073, 1310], "tb": [158, 160, 197, 320, 378, 1071, 1310], "tbl": [131, 136, 1340], "tbl0": 1325, "tbl1": [1323, 1325], "tbl2": [1323, 1325], "tbl3": 1323, "tbl4": 1323, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 174], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 189, 320, 831, 919], "tbl_width_char": 751, "td": 447, "td1": 925, "td2": 925, "td3": 925, "tdf": [244, 320], "technic": 801, "tell": [655, 678, 1229, 1252], "tempor": [93, 182, 211, 223, 252, 254, 255, 274, 320, 397, 447, 493, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 817, 823, 845, 868, 919, 925, 999, 1053, 1099, 1310, 1331, 1337], "temporalliter": [397, 805, 999, 1032, 1033, 1310], "temporari": [38, 320], "temporarili": [171, 174, 211, 252, 320, 617, 805, 845, 868, 919], "tend": [158, 160], "tensor": [282, 320, 1294, 1310], "tensordataset": [282, 320], "term": [463, 465, 466, 668, 680, 691, 805, 1072, 1074, 1075, 1242, 1254, 1265, 1310], "termin": [37, 46, 320, 919], "test": [0, 38, 137, 138, 140, 146, 196, 245, 320, 817, 1070, 1310], "test1": 1325, "test2": 1325, "test3": 1325, "test_1": [245, 320], "test_1_math": [245, 320], "test_1_phys": [245, 320], "test_2": [245, 320], "test_2_math": [245, 320], "test_2_phys": [245, 320], "test_data": 137, "test_df_height": 165, "test_func": 766, "test_lf": [891, 919], "test_miscellan": 1341, "test_numer": 1341, "test_price_calcul": 1341, "test_series_len": 169, "test_tabl": 138, "test_unique_xyz": 163, "testdb": 138, "testing1234": 1325, "text": [134, 137, 393, 394, 660, 668, 672, 673, 676, 677, 679, 680, 691, 785, 991, 992, 1242, 1246, 1247, 1253, 1254, 1265, 1325, 1341], "text1": 677, "text2": 677, "textclaus": 137, "texttt": [647, 805, 1222, 1310], "th": [205, 320, 481, 523, 536, 647, 668, 691, 805, 843, 919, 1087, 1132, 1145, 1222, 1242, 1265, 1310], "than": [40, 46, 47, 48, 49, 57, 58, 96, 119, 126, 128, 135, 136, 137, 140, 146, 149, 155, 183, 210, 223, 225, 226, 230, 243, 253, 254, 256, 288, 306, 320, 393, 477, 479, 482, 484, 493, 507, 535, 554, 555, 556, 572, 604, 616, 638, 647, 668, 672, 674, 675, 683, 691, 700, 737, 767, 805, 826, 827, 844, 849, 850, 902, 919, 991, 1099, 1144, 1164, 1185, 1196, 1209, 1222, 1242, 1246, 1248, 1249, 1257, 1265, 1274, 1291, 1310, 1341], "the_aws_access_key_id": [39, 139, 150, 151, 320], "the_aws_region": [39, 320], "the_aws_secret_access_kei": [39, 139, 150, 151, 320], "thei": [37, 40, 46, 50, 58, 59, 89, 90, 125, 149, 174, 226, 228, 255, 320, 597, 678, 686, 687, 805, 826, 850, 919, 923, 925, 1252], "them": [58, 122, 124, 125, 126, 128, 137, 138, 140, 144, 145, 146, 147, 149, 152, 153, 154, 174, 198, 199, 211, 226, 237, 245, 252, 282, 290, 320, 357, 464, 493, 526, 589, 590, 597, 617, 735, 746, 747, 749, 750, 792, 793, 805, 827, 838, 845, 850, 860, 868, 919, 925, 956, 1073, 1078, 1135, 1173, 1174, 1310, 1328, 1338], "therebi": [149, 152, 153], "therefor": [197, 320, 556, 795, 805, 1071, 1310], "theta": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 65, 66, 67, 68, 69, 72, 82, 90, 97, 122, 124, 125, 126, 127, 128, 129, 131, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 184, 185, 187, 189, 190, 193, 194, 197, 199, 203, 204, 209, 210, 211, 212, 216, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 267, 268, 269, 272, 274, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 306, 319, 320, 323, 324, 332, 335, 336, 345, 357, 363, 364, 365, 370, 389, 390, 392, 397, 407, 408, 410, 416, 417, 428, 434, 435, 437, 441, 442, 444, 447, 458, 462, 469, 479, 486, 488, 490, 491, 493, 497, 519, 520, 526, 535, 536, 537, 538, 539, 540, 542, 547, 548, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 597, 604, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 648, 649, 650, 653, 655, 662, 665, 667, 669, 670, 674, 675, 678, 685, 686, 687, 688, 689, 694, 698, 700, 702, 705, 712, 713, 715, 716, 717, 718, 722, 726, 734, 735, 738, 740, 741, 754, 755, 757, 759, 760, 763, 764, 767, 770, 772, 775, 777, 781, 782, 783, 786, 790, 794, 795, 796, 801, 805, 817, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 844, 845, 847, 849, 850, 851, 853, 855, 859, 860, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 888, 889, 890, 891, 892, 893, 894, 897, 902, 916, 917, 918, 919, 923, 924, 925, 927, 934, 935, 944, 956, 962, 963, 964, 969, 987, 989, 993, 994, 999, 1000, 1010, 1011, 1018, 1019, 1021, 1030, 1040, 1041, 1043, 1047, 1048, 1050, 1053, 1064, 1066, 1069, 1071, 1077, 1078, 1087, 1089, 1093, 1095, 1104, 1113, 1128, 1129, 1135, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1157, 1162, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1176, 1179, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1223, 1224, 1226, 1227, 1229, 1236, 1239, 1241, 1243, 1244, 1248, 1249, 1252, 1259, 1260, 1261, 1268, 1272, 1274, 1275, 1277, 1280, 1281, 1285, 1287, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1298, 1299, 1300, 1310, 1315, 1319, 1320, 1321, 1325, 1333, 1336, 1337, 1338, 1339, 1341], "thing": [149, 156], "think": [434, 435, 1040, 1041], "third": [555, 805], "thoma": [237, 320, 860, 919], "those": [5, 30, 40, 135, 255, 279, 289, 320, 477, 607, 662, 767, 805, 886, 919, 925, 1187, 1236, 1292, 1310], "though": [38, 137, 211, 320, 801, 845, 919], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 46, 58, 131, 135, 136, 138, 171, 172, 266, 320, 519, 556, 650, 730, 805, 827, 877, 919, 964, 1128, 1151, 1224, 1310], "thread_loc": [556, 805], "thread_pool_s": 172, "threadpool": 57, "three": [40, 179, 252, 281, 320, 408, 604, 617, 639, 668, 676, 691, 805, 868, 919, 968, 1011, 1156, 1185, 1242, 1251, 1265, 1310], "threshold": [258, 320, 870, 919], "through": [123, 137, 801, 925, 1310, 1325], "throughout": 174, "throw": [39, 124, 125, 128, 191, 249, 320, 670, 671, 823, 833, 866, 919, 1244, 1245, 1310], "thu": [40, 199, 320, 323, 737, 1078, 1310], "thursdai": [211, 320, 415, 732, 845, 919, 1017], "ti": [607, 805, 1187, 1310], "time": [12, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 68, 106, 139, 145, 147, 149, 150, 152, 153, 154, 165, 166, 169, 189, 199, 211, 226, 227, 252, 290, 320, 352, 389, 390, 416, 417, 419, 420, 421, 424, 425, 434, 435, 437, 440, 441, 442, 444, 446, 447, 455, 458, 464, 514, 515, 547, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 643, 690, 693, 697, 711, 712, 713, 735, 736, 746, 747, 748, 749, 750, 751, 757, 792, 793, 805, 826, 827, 831, 845, 850, 851, 864, 868, 919, 925, 951, 987, 1018, 1019, 1021, 1022, 1026, 1027, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1061, 1064, 1073, 1078, 1123, 1124, 1196, 1218, 1264, 1267, 1271, 1293, 1295, 1310, 1319, 1325, 1334, 1341], "time_column": [290, 320], "time_format": [37, 46, 320, 919], "time_unit": [66, 68, 417, 419, 425, 446, 458, 693, 748, 749, 750, 751, 757, 924, 925, 1019, 1021, 1027, 1052, 1064, 1267], "time_unit_m": [417, 1019], "time_unit_n": [417, 1019], "time_unit_u": 458, "time_zon": [66, 420, 422, 441, 693, 748, 749, 750, 924, 925, 1018, 1022, 1026, 1047, 1267], "timedelta": [211, 226, 252, 290, 320, 437, 442, 447, 455, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 746, 747, 749, 750, 792, 793, 805, 845, 850, 868, 919, 924, 925, 1031, 1037, 1043, 1048, 1061, 1073, 1173, 1174, 1226, 1300, 1310], "timeout": [58, 827, 919], "timestamp": [129, 139, 150, 211, 320, 441, 442, 455, 757, 845, 919, 1047, 1048, 1061, 1331], "timestamp_m": 446, "timestamp_n": 1052, "timestamp_u": [446, 1052], "timestep": 757, "timeunit": [37, 46, 66, 68, 320, 417, 419, 446, 458, 693, 748, 749, 750, 751, 919, 925, 1019, 1021, 1052, 1064, 1267], "timezon": [66, 139, 150, 422, 925, 1334], "tip": [556, 805], "titl": [40, 320, 323, 1310, 1315, 1319], "titlecas": [698, 1272], "tm": [419, 447, 925, 1334], "to_arrow": [224, 320, 1291, 1310, 1338], "to_batch": [224, 320], "to_dict": [182, 255, 320, 823, 919, 925], "to_dummi": [277, 282, 320, 1310], "to_fram": [392, 425, 442, 446, 455, 690, 924, 1011, 1185, 1210, 1212, 1256, 1257, 1264, 1310, 1315], "to_init_repr": [129, 320, 1310], "to_jax": [282, 320, 1310], "to_list": [129, 252, 320, 1228, 1240, 1310], "to_lowercas": 588, "to_numpi": [277, 282, 320, 555, 805, 1310], "to_panda": [320, 1310], "to_phys": [805, 993, 1310], "to_python": 924, "to_seri": [52, 206, 320, 690, 731, 780, 1264], "to_sql": [38, 320], "to_str": [444, 1050], "to_struct": [320, 663], "to_torch": [277, 320, 1310], "to_uppercas": [331, 587, 664, 805], "togeth": 1333, "token": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 151, 152, 153, 154, 320, 919], "tokyo": [129, 925], "tokyo_tz": 925, "toler": [158, 159, 160, 161, 226, 320, 850, 919], "tone": [40, 320], "tonight": [655, 678, 1229, 1252], "too": [14, 245, 320, 377, 597, 805, 919, 975], "tooltip": [320, 323, 1310, 1315], "toomanyrowsreturnederror": [253, 320], "top": [40, 267, 283, 320, 323, 713, 805, 878, 882, 919, 1310, 1315, 1338], "top_col": [40, 320], "top_k": [181, 320, 389, 390, 713, 805, 821, 919, 987, 1310], "top_k_bi": [389, 390, 712, 805], "top_row": [40, 320], "tor_id": 129, "torch": [157, 282, 320, 1294, 1310], "torchexporttyp": [282, 320], "total": [40, 197, 301, 320, 448, 449, 450, 451, 452, 453, 454, 508, 528, 805, 897, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1071, 1117, 1137, 1310], "total_gross": 1319, "toward": [301, 508, 528, 805, 897, 1117, 1137, 1310], "tp": [1, 54], "tpu": [277, 320, 1289, 1310], "trace": 69, "traceback": [158, 159, 160, 161, 278, 320, 612, 805, 1192, 1291, 1310], "tracebacktyp": 1338, "track": [139, 150, 151, 230, 320, 547, 1338], "trail": [28, 209, 320, 685, 686, 1259, 1260], "train": [282, 320], "train_lf": [891, 919], "transfer": 138, "transferencod": [374, 375, 657, 658, 972, 973, 1231, 1232], "transform": [230, 267, 320, 555, 698, 784, 805, 878, 919, 1272], "transform_dens": [1310, 1315], "transit": [202, 320, 841, 919], "translat": 137, "transpar": [826, 919], "transpos": [245, 320], "travel": [139, 150], "travers": [619, 621, 623, 625, 627, 630, 632, 634, 805, 1198, 1199, 1201, 1204, 1205, 1206, 1310], "treat": [135, 136, 149, 176, 464, 654, 656, 666, 676, 677, 795, 805, 927, 1073, 1228, 1230, 1240, 1250, 1251, 1310], "tree": [572, 837, 919], "tree_format": [837, 919], "trend": [40, 320], "tri": [230, 320], "triangl": [306, 902], "trigger": [39, 228, 279, 320, 805, 923, 1292, 1310], "trigonometri": [1331, 1337], "trim": [129, 1333], "trim_decimal_zero": 28, "trip": 137, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 45, 46, 47, 48, 49, 57, 58, 59, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 136, 137, 139, 140, 141, 143, 146, 147, 149, 150, 152, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 174, 178, 182, 183, 184, 189, 191, 196, 201, 202, 204, 206, 208, 209, 210, 211, 216, 218, 219, 220, 223, 225, 226, 227, 228, 233, 234, 240, 241, 243, 245, 246, 249, 253, 254, 255, 256, 258, 266, 267, 270, 273, 275, 277, 278, 279, 282, 284, 285, 286, 288, 289, 290, 294, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 323, 330, 331, 332, 333, 334, 335, 346, 348, 349, 352, 356, 357, 365, 369, 373, 374, 376, 379, 380, 385, 388, 390, 391, 402, 403, 404, 405, 406, 408, 415, 417, 420, 423, 425, 427, 434, 435, 437, 438, 441, 442, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 465, 466, 473, 480, 482, 483, 484, 485, 488, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 510, 511, 515, 522, 524, 526, 542, 547, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 591, 592, 594, 596, 599, 600, 604, 609, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 642, 643, 647, 649, 650, 653, 654, 655, 656, 657, 659, 665, 666, 667, 669, 670, 671, 676, 677, 681, 682, 684, 690, 692, 693, 695, 697, 701, 703, 704, 713, 715, 718, 721, 722, 723, 724, 725, 727, 730, 731, 732, 737, 746, 749, 755, 761, 767, 771, 777, 780, 783, 784, 787, 789, 792, 795, 796, 805, 823, 824, 825, 826, 827, 831, 833, 837, 840, 841, 844, 845, 849, 850, 851, 853, 855, 859, 864, 866, 870, 875, 877, 878, 883, 884, 885, 886, 889, 894, 896, 898, 900, 903, 904, 905, 906, 907, 908, 909, 918, 919, 923, 924, 925, 932, 933, 945, 947, 948, 951, 955, 956, 964, 971, 972, 974, 977, 988, 990, 994, 997, 998, 1011, 1017, 1018, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1067, 1069, 1070, 1072, 1074, 1075, 1082, 1091, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1119, 1120, 1124, 1131, 1133, 1135, 1151, 1164, 1170, 1176, 1178, 1181, 1182, 1185, 1188, 1189, 1203, 1222, 1224, 1227, 1228, 1229, 1230, 1231, 1233, 1239, 1240, 1241, 1243, 1244, 1245, 1250, 1251, 1255, 1256, 1258, 1264, 1266, 1267, 1269, 1271, 1286, 1291, 1292, 1299, 1301, 1310, 1315, 1319, 1320, 1322, 1324, 1328, 1330, 1333, 1338, 1341], "truediv": [477, 805], "truncat": [20, 129, 135, 136, 149, 209, 211, 223, 254, 255, 274, 320, 845, 864, 919, 1337], "truncate_nod": [864, 919], "truncate_ragged_lin": [135, 136, 149], "truncate_str": 455, "truncate_td": 455, "trust": [410, 805, 832, 919], "try": [37, 41, 45, 46, 47, 48, 49, 57, 58, 116, 135, 136, 141, 145, 147, 149, 152, 153, 154, 320, 826, 827, 837, 864, 875, 919], "try_cast": 1331, "try_parse_d": [131, 135, 136, 149], "try_parse_hive_d": [147, 152, 154], "ts_local": [441, 1047], "tseri": [434, 435, 1040, 1041], "tstamp": 925, "tstamp_tokyo": 925, "tstamp_utc": 925, "tue": [320, 323], "tuesdai": [211, 320, 845, 919], "tupl": [40, 60, 138, 140, 146, 179, 223, 230, 243, 253, 254, 255, 262, 282, 298, 320, 571, 613, 805, 864, 875, 919, 924, 925, 1193, 1214, 1310], "turn": [8, 46, 47, 48, 49, 57, 58, 135, 136, 149, 225, 226, 320, 826, 827, 837, 849, 850, 855, 864, 919], "twice": [40, 320], "two": [40, 50, 89, 90, 124, 126, 128, 138, 179, 202, 204, 226, 227, 236, 237, 254, 281, 287, 300, 306, 320, 324, 330, 412, 419, 477, 480, 483, 547, 604, 649, 728, 729, 735, 737, 739, 746, 749, 781, 782, 784, 805, 841, 850, 851, 859, 860, 885, 896, 902, 919, 925, 968, 1014, 1021, 1156, 1185, 1310, 1325, 1326, 1327, 1330, 1339], "two_a": 1338, "tworld": [687, 1259, 1261], "txt": [1, 12, 149, 654, 666, 1240], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 46, 47, 48, 49, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 122, 124, 125, 126, 127, 128, 130, 135, 136, 137, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 176, 179, 185, 195, 198, 204, 209, 211, 212, 224, 225, 230, 252, 257, 272, 277, 278, 281, 282, 285, 297, 320, 332, 334, 337, 338, 339, 340, 341, 342, 345, 350, 351, 352, 354, 357, 368, 369, 373, 374, 375, 376, 377, 378, 379, 391, 392, 393, 394, 397, 398, 399, 400, 401, 408, 409, 415, 416, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 467, 469, 480, 483, 486, 493, 494, 495, 496, 497, 498, 499, 508, 512, 513, 515, 520, 526, 528, 546, 547, 555, 556, 604, 606, 610, 611, 612, 613, 615, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 644, 645, 646, 653, 656, 657, 658, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 680, 681, 682, 683, 690, 691, 695, 709, 710, 711, 718, 727, 735, 738, 745, 746, 747, 748, 749, 750, 751, 753, 761, 762, 764, 765, 766, 767, 777, 780, 791, 792, 793, 796, 801, 805, 817, 826, 827, 836, 837, 838, 845, 849, 864, 868, 869, 875, 883, 893, 919, 924, 927, 932, 933, 945, 947, 948, 949, 950, 951, 953, 955, 956, 967, 968, 969, 971, 972, 973, 975, 976, 988, 989, 991, 992, 999, 1011, 1012, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1073, 1077, 1093, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1119, 1120, 1121, 1122, 1124, 1129, 1135, 1137, 1155, 1156, 1178, 1185, 1191, 1192, 1193, 1195, 1196, 1217, 1219, 1227, 1228, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1241, 1242, 1243, 1245, 1246, 1247, 1254, 1255, 1256, 1257, 1264, 1265, 1269, 1290, 1291, 1293, 1301, 1310, 1319, 1326, 1331, 1333, 1337, 1338], "type_coercion": [46, 47, 48, 49, 57, 58, 826, 827, 837, 864, 875, 919], "typeerror": [39, 320], "typenam": [40, 320], "typic": [125, 137, 154, 230, 320, 424, 644, 805, 925, 1026, 1164, 1219, 1310], "tz": [693, 1267], "tzinfo": [139, 150, 925], "u": [40, 66, 68, 154, 167, 226, 320, 417, 419, 425, 446, 458, 690, 693, 723, 725, 748, 749, 750, 751, 757, 850, 919, 924, 925, 1019, 1021, 1027, 1052, 1064, 1264, 1267, 1323, 1334], "u1": [278, 320], "u16": [149, 1336, 1341], "u32": [12, 137, 180, 182, 188, 242, 296, 297, 301, 305, 311, 313, 320, 330, 336, 343, 344, 345, 346, 347, 350, 351, 353, 362, 378, 393, 394, 401, 402, 488, 508, 512, 513, 516, 528, 533, 579, 595, 607, 615, 616, 620, 622, 624, 626, 628, 631, 633, 635, 639, 656, 666, 667, 672, 673, 711, 716, 718, 722, 726, 730, 731, 738, 740, 761, 764, 775, 805, 820, 823, 830, 862, 892, 893, 897, 901, 907, 909, 919, 925, 944, 945, 946, 949, 950, 952, 961, 988, 991, 992, 993, 1005, 1095, 1121, 1122, 1125, 1137, 1142, 1187, 1195, 1196, 1211, 1230, 1240, 1241, 1246, 1247, 1293, 1297, 1299, 1310, 1319, 1327, 1328, 1329, 1333, 1338], "u64": [212, 297, 320, 486, 609, 805, 864, 893, 919, 925, 1093, 1189, 1310], "u8": [182, 275, 276, 288, 320, 612, 721, 805, 823, 919, 925, 1192, 1286, 1310, 1341], "udf": [171, 230, 244, 306, 320, 410, 556, 601, 767, 805, 832, 863, 902, 919, 1164, 1310], "ufunc": 96, "uid": 137, "uint": 1341, "uint16": [149, 405, 406, 707, 805, 925, 1008, 1009, 1281, 1291, 1294, 1310], "uint2": 1336, "uint32": [130, 157, 182, 197, 252, 297, 320, 345, 350, 351, 378, 393, 394, 401, 464, 480, 483, 508, 512, 513, 528, 610, 615, 616, 617, 620, 622, 624, 626, 628, 631, 633, 635, 656, 667, 672, 673, 711, 738, 761, 764, 805, 823, 868, 893, 919, 925, 945, 949, 950, 976, 988, 991, 992, 1071, 1073, 1121, 1122, 1137, 1195, 1196, 1230, 1241, 1246, 1247, 1293, 1294, 1310], "uint4": 1338, "uint64": [130, 212, 252, 297, 320, 350, 351, 464, 486, 512, 513, 609, 617, 620, 622, 624, 626, 628, 631, 633, 635, 805, 868, 893, 919, 925, 949, 950, 1073, 1093, 1121, 1122, 1189, 1294, 1310], "uint8": [137, 182, 276, 277, 278, 288, 320, 405, 406, 612, 707, 721, 805, 823, 919, 924, 925, 1008, 1009, 1192, 1281, 1294, 1310, 1341], "uint8_pair": 1341, "uit": [680, 1254], "uk": [663, 1237], "unabl": [98, 140], "unalias": 562, "unari": [593, 805], "unbias": [465, 466, 805, 1074, 1075, 1310], "unchang": [197, 320, 611, 711, 805, 855, 902, 919, 1071, 1191, 1293, 1310], "uncompress": [35, 41, 42, 45, 49, 141, 152, 320, 919], "undefin": [714, 805], "under": [37, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 89, 90, 145, 147, 149, 152, 153, 154, 245, 267, 320, 797, 798, 800, 801, 806, 807, 810, 812, 813, 814, 878, 919, 1302, 1304, 1306, 1311, 1316, 1317, 1318], "underli": [1, 50, 65, 66, 68, 82, 90, 95, 105, 122, 124, 125, 126, 128, 137, 138, 140, 144, 145, 146, 147, 153, 162, 165, 169, 198, 199, 223, 224, 254, 272, 278, 320, 374, 417, 418, 419, 423, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 439, 441, 443, 447, 456, 457, 458, 459, 609, 636, 654, 657, 666, 805, 838, 919, 925, 972, 993, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1042, 1044, 1045, 1047, 1049, 1053, 1062, 1063, 1064, 1065, 1078, 1189, 1207, 1217, 1228, 1231, 1240, 1285, 1291, 1310, 1338], "understood": 767, "undo": [573, 580, 581, 583, 585, 587, 588], "unexpect": [105, 114, 137, 555, 556, 805, 1164, 1310], "unhelpfulli": [158, 160], "unicod": [20, 394, 668, 673, 680, 691, 925, 992, 1242, 1247, 1254, 1265], "unifi": [40, 277, 282, 320, 925], "uniform": [40, 320, 604, 805, 1185, 1310], "unimod": [647, 805, 1222, 1310], "unintend": [202, 320, 841, 919], "union": [57, 58, 59, 539, 826, 827, 837, 864, 875, 919, 925, 1148, 1337, 1338], "uniqu": [45, 49, 51, 69, 162, 163, 164, 167, 169, 180, 220, 225, 241, 245, 255, 311, 320, 336, 347, 362, 408, 504, 533, 579, 604, 690, 692, 693, 697, 716, 718, 726, 775, 805, 820, 849, 907, 919, 923, 935, 946, 961, 1011, 1112, 1142, 1171, 1185, 1264, 1266, 1267, 1271, 1297, 1299, 1310, 1326, 1328], "unique_column_valu": [245, 320], "unique_count": [805, 1310], "uniquekeepstrategi": [285, 320, 883, 919], "unit": [40, 66, 68, 158, 159, 160, 161, 165, 169, 197, 320, 378, 417, 419, 425, 440, 446, 458, 464, 470, 553, 568, 690, 693, 717, 734, 748, 749, 750, 751, 757, 805, 864, 919, 923, 925, 976, 1019, 1021, 1027, 1046, 1052, 1064, 1071, 1073, 1079, 1162, 1264, 1267, 1298, 1310, 1341], "univers": [176, 927], "unix": [65, 66, 425, 757, 1027], "unknown": [547, 662, 765, 1236], "unless": [40, 51, 124, 277, 282, 320, 685, 686, 780, 919, 1259, 1333], "unlik": [132, 211, 320, 845, 919], "unnam": [664, 1238], "unnest": [132, 320, 408, 604, 615, 663, 664, 682, 683, 703, 705, 718, 805, 919, 968, 1011, 1156, 1185, 1195, 1256, 1257, 1310, 1331, 1337], "unpivot": [236, 320, 859, 919], "unregist": [1321, 1322, 1323, 1338, 1340], "unsaf": [805, 923], "unset": [38, 147, 152, 164, 305, 320, 382, 383, 384, 386, 387, 441, 547, 805, 901, 980, 981, 982, 984, 985, 1047, 1310, 1319], "unsign": [83, 84, 85, 86, 609, 805, 925, 1189, 1310], "unsigned_integ": 925, "unstabl": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 120, 132, 137, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 267, 277, 282, 288, 289, 320, 323, 324, 407, 408, 442, 488, 556, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 734, 781, 782, 805, 826, 827, 837, 878, 886, 919, 994, 1010, 1011, 1048, 1095, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1289, 1294, 1310, 1315], "unstack": 320, "unstackdirect": [288, 320], "unsuit": 121, "unsupport": [39, 320], "until": [89, 211, 228, 320, 674, 675, 700, 845, 919, 1248, 1249, 1274], "up": [10, 40, 81, 138, 223, 226, 245, 254, 255, 261, 274, 320, 396, 397, 556, 668, 676, 677, 691, 805, 849, 850, 855, 873, 919, 925, 996, 1242, 1250, 1251, 1265, 1310], "upcast": [335, 805], "upcast_integer_typ": [1, 54], "updat": [39, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 174, 189, 320, 831, 919], "upgrad": 101, "upheld": [855, 919], "upon": 136, "upper": [135, 136, 137, 197, 211, 320, 397, 488, 493, 547, 582, 717, 727, 746, 747, 749, 750, 792, 793, 805, 845, 919, 999, 1071, 1095, 1099, 1162, 1298, 1310, 1328, 1331], "upper_bound": [211, 320, 397, 493, 547, 805, 845, 919, 999, 1099, 1162, 1310], "uppercas": [588, 699, 1273, 1333], "upsampl": [211, 320, 845, 919], "urandom": [378, 976], "uri": [38, 39, 137, 138, 139, 150, 151, 320], "url": [137, 138, 147, 152, 154, 662, 664, 1236, 1238], "urllib": 138, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 57, 58, 59, 66, 81, 89, 90, 93, 97, 120, 123, 125, 126, 128, 130, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 180, 181, 182, 185, 189, 191, 193, 194, 200, 201, 202, 204, 210, 211, 218, 220, 222, 223, 224, 226, 230, 236, 240, 241, 243, 244, 245, 252, 253, 254, 255, 256, 258, 259, 261, 266, 267, 268, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 299, 306, 320, 323, 330, 332, 334, 336, 345, 346, 369, 374, 375, 377, 390, 393, 394, 397, 407, 410, 413, 414, 422, 440, 441, 442, 444, 447, 455, 458, 460, 463, 464, 465, 466, 467, 471, 472, 473, 477, 488, 491, 492, 493, 505, 519, 535, 543, 547, 549, 555, 556, 559, 580, 583, 585, 587, 588, 597, 604, 607, 609, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 640, 642, 643, 647, 649, 650, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 672, 673, 676, 677, 678, 680, 682, 684, 686, 687, 688, 689, 690, 692, 693, 697, 700, 701, 705, 713, 719, 720, 722, 723, 724, 725, 726, 729, 730, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 757, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 777, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 801, 804, 805, 816, 817, 820, 821, 822, 823, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 844, 845, 850, 853, 859, 868, 869, 870, 871, 873, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 902, 919, 924, 925, 932, 933, 935, 964, 968, 972, 973, 975, 991, 992, 994, 1010, 1012, 1015, 1016, 1024, 1032, 1033, 1046, 1047, 1048, 1050, 1053, 1061, 1064, 1067, 1072, 1073, 1074, 1075, 1080, 1081, 1086, 1092, 1095, 1097, 1098, 1099, 1114, 1128, 1144, 1151, 1156, 1164, 1185, 1187, 1189, 1191, 1193, 1195, 1196, 1197, 1209, 1210, 1212, 1213, 1216, 1222, 1224, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1239, 1240, 1241, 1246, 1247, 1250, 1251, 1252, 1254, 1256, 1264, 1266, 1267, 1271, 1274, 1285, 1286, 1288, 1291, 1292, 1300, 1310, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1333, 1334, 1338, 1341], "usag": [165, 169, 264, 320, 925, 1217, 1310], "usd": [209, 320, 1341], "use_pyarrow": [45, 49, 135, 139, 141, 143, 147, 150, 278, 320, 919, 1291, 1310], "use_pyarrow_extension_arrai": [279, 320, 1292, 1310], "use_pyarrow_write_to_dataset": [45, 320], "use_statist": [147, 154], "user": [38, 137, 138, 176, 230, 244, 306, 320, 555, 556, 601, 640, 767, 805, 863, 902, 919, 923, 927, 1164, 1213, 1310], "user_conn": 137, "usernam": [135, 138, 141, 143], "userwarn": 1, "usr": 137, "usual": [97, 138, 174, 282, 320, 416, 1018], "utc": [139, 150, 416, 420, 422, 424, 441, 690, 693, 924, 925, 1018, 1022, 1026, 1047, 1264, 1267], "utc_tz": 925, "utf": [37, 46, 80, 320, 919], "utf8": [20, 135, 136, 149, 668, 680, 691, 1242, 1254, 1265], "utf8_borders_onli": 20, "utf8_ful": [20, 51, 129], "utf8_full_condens": [7, 20, 129], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [282, 320, 757, 919, 923], "uvw": [663, 1237], "v": [8, 9, 45, 197, 320, 639, 723, 725, 805, 1211, 1310, 1322, 1323], "v1": 32, "v2": [8, 141, 152], "val": [40, 251, 320, 556, 601, 711, 795, 805, 867, 919], "valid": [37, 40, 46, 66, 135, 137, 141, 143, 147, 149, 169, 174, 191, 197, 225, 249, 320, 407, 654, 656, 662, 663, 664, 666, 671, 676, 677, 795, 805, 833, 849, 866, 894, 919, 925, 1010, 1071, 1228, 1230, 1236, 1237, 1238, 1240, 1245, 1250, 1251, 1310, 1319, 1320], "validate_output_schema": [855, 919], "vals_phys": [711, 805], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 45, 46, 49, 50, 51, 59, 60, 63, 69, 77, 78, 87, 90, 99, 124, 125, 127, 128, 135, 136, 137, 138, 147, 149, 152, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 178, 180, 181, 182, 189, 193, 194, 196, 199, 200, 201, 202, 206, 209, 211, 212, 213, 217, 221, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 243, 245, 246, 247, 249, 252, 253, 254, 255, 256, 263, 266, 268, 269, 270, 271, 273, 274, 278, 279, 283, 284, 287, 288, 289, 290, 291, 298, 301, 302, 304, 307, 308, 310, 311, 320, 323, 324, 328, 329, 330, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 407, 408, 411, 413, 414, 419, 423, 433, 438, 447, 456, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 512, 513, 516, 517, 518, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 540, 542, 543, 544, 545, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 564, 575, 576, 577, 578, 579, 589, 590, 591, 592, 595, 597, 598, 601, 602, 604, 605, 607, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 644, 645, 646, 647, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 662, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 691, 700, 702, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 730, 733, 735, 736, 738, 740, 741, 742, 743, 744, 754, 755, 760, 761, 762, 763, 765, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 788, 789, 795, 805, 820, 821, 831, 834, 835, 839, 840, 841, 845, 847, 848, 849, 850, 856, 857, 858, 859, 861, 862, 865, 866, 868, 874, 877, 879, 880, 882, 885, 886, 887, 897, 898, 900, 903, 904, 906, 907, 919, 925, 930, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 969, 970, 972, 973, 974, 975, 976, 977, 988, 991, 992, 996, 999, 1001, 1002, 1003, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1021, 1025, 1039, 1044, 1053, 1062, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1085, 1086, 1087, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1149, 1151, 1152, 1153, 1154, 1157, 1158, 1164, 1165, 1166, 1168, 1169, 1171, 1173, 1174, 1176, 1177, 1179, 1180, 1184, 1185, 1186, 1187, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1215, 1219, 1220, 1221, 1222, 1224, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1265, 1274, 1277, 1281, 1282, 1283, 1284, 1291, 1292, 1293, 1297, 1299, 1301, 1310, 1319, 1324, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1336, 1338, 1340, 1341], "value1": [650, 805], "value2": [650, 805], "value_a": 1338, "value_b": 1338, "value_count": [716, 805, 1310], "value_cum_sum": [406, 805], "value_cum_sum_all_fil": [406, 805], "value_nam": [236, 287, 320, 859, 885, 919], "value_var": [236, 287, 320, 859, 885, 919], "valueerror": [15, 20], "valueexcept": 765, "var": [40, 170, 320, 634, 635, 805, 919, 1310, 1327], "var_samp": 1327, "vari": [140, 146, 416, 1018, 1341], "variabl": [30, 37, 41, 45, 46, 47, 48, 49, 77, 145, 147, 149, 152, 153, 154, 168, 171, 236, 275, 287, 320, 859, 885, 919, 1286, 1310, 1320, 1322, 1338], "variable_nam": [236, 287, 320, 859, 885, 919], "variad": 137, "varianc": [291, 320, 466, 505, 634, 635, 719, 794, 805, 887, 919, 1075, 1114, 1206, 1300, 1310, 1331], "variou": [137, 179, 185, 320, 805, 828, 919, 924, 925, 1310], "vector": [619, 621, 623, 625, 627, 630, 632, 634, 805, 1198, 1199, 1201, 1204, 1205, 1206, 1310], "vectoris": [434, 435, 1040, 1041], "vein": 174, "verbos": [29, 158, 160, 174, 663, 1237], "veri": [137, 223, 284, 320, 556, 805, 902, 1332], "verifi": [226, 320, 850, 919], "versicolor": [320, 323], "version": [38, 39, 56, 135, 136, 139, 140, 150, 157, 162, 163, 164, 165, 169, 172, 178, 180, 190, 212, 225, 236, 260, 267, 277, 278, 282, 296, 301, 320, 323, 410, 422, 434, 435, 447, 458, 479, 486, 563, 564, 570, 574, 611, 653, 661, 705, 720, 729, 737, 779, 784, 805, 820, 832, 837, 849, 859, 872, 878, 891, 892, 897, 919, 925, 1024, 1032, 1033, 1040, 1041, 1053, 1064, 1092, 1093, 1191, 1227, 1235, 1289, 1291, 1294, 1310, 1315], "versu": [189, 320, 831, 919], "vertic": [59, 199, 288, 292, 320, 653, 669, 1227, 1243], "vertical_relax": 59, "via": [30, 135, 136, 137, 147, 149, 152, 153, 154, 177, 179, 190, 223, 254, 320, 410, 556, 664, 805, 832, 919, 928, 1238], "view": [556, 805], "visibl": [17, 197, 320, 1071, 1310], "visit": [407, 805, 1010, 1310], "visual": [218, 220, 320, 571, 875, 919], "volk": 132, "vote": [662, 664, 1236, 1238], "vowel": [676, 677, 1250, 1251], "vstack": [59, 199, 320], "w": [40, 137, 211, 255, 320, 656, 660, 662, 664, 723, 725, 845, 919, 925, 1230, 1234, 1236, 1238, 1260, 1322, 1323, 1326], "w_i": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "wa": [38, 56, 97, 140, 190, 277, 278, 320, 323, 410, 612, 678, 751, 805, 832, 919, 925, 1192, 1252, 1291, 1310, 1315], "wai": [89, 90, 122, 124, 125, 126, 128, 144, 145, 153, 210, 224, 244, 266, 299, 320, 442, 601, 650, 662, 738, 801, 805, 829, 836, 844, 863, 869, 877, 888, 895, 902, 919, 1048, 1236], "walk": 736, "want": [58, 125, 127, 135, 140, 149, 174, 199, 230, 241, 252, 267, 320, 393, 415, 473, 555, 556, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 655, 672, 676, 677, 678, 732, 741, 746, 749, 755, 777, 780, 796, 805, 827, 878, 894, 919, 925, 991, 1017, 1078, 1164, 1229, 1246, 1250, 1251, 1252, 1310, 1325], "warehous": 138, "warn": [92, 93, 96, 97, 100, 107, 109, 110, 120, 597, 805, 1310], "watermark": [45, 320], "wb": [40, 320], "we": [45, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 179, 189, 190, 211, 226, 245, 252, 290, 320, 323, 410, 437, 442, 455, 488, 519, 547, 555, 556, 617, 620, 622, 624, 626, 628, 631, 633, 635, 664, 676, 677, 695, 745, 746, 747, 748, 749, 750, 765, 792, 793, 795, 805, 831, 832, 845, 850, 855, 868, 919, 1043, 1048, 1061, 1095, 1128, 1164, 1238, 1251, 1269, 1310, 1315, 1322], "weather": [676, 677, 1250, 1251], "wed": [320, 323], "wednesdai": [211, 320, 444, 447, 845, 919, 1050, 1053], "week": [211, 226, 252, 290, 320, 415, 437, 442, 455, 457, 464, 617, 620, 622, 624, 626, 628, 631, 633, 635, 732, 746, 747, 749, 750, 751, 792, 793, 805, 845, 850, 868, 919, 925, 1017, 1043, 1048, 1061, 1063, 1073, 1310, 1334], "week_mask": [415, 732, 1017], "weekdai": [423, 438], "weekend": [415, 732, 1017], "weekli": [211, 320, 455, 845, 919, 1061], "weghorst": [664, 1238], "weight": [132, 463, 464, 465, 466, 618, 619, 621, 623, 625, 627, 630, 632, 634, 647, 805, 1072, 1073, 1074, 1075, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1222, 1310], "wei\u00df": 1333, "well": [40, 135, 136, 137, 149, 320, 493, 784, 805, 1099, 1310, 1338], "were": [174, 611, 612, 801, 805, 1191, 1192, 1310], "west": [69, 227, 320, 851, 919], "what": [179, 241, 320, 415, 555, 655, 678, 805, 1017, 1229, 1252], "whatev": 174, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 66, 81, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 132, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 174, 181, 189, 195, 197, 199, 201, 204, 211, 225, 227, 230, 244, 249, 253, 255, 258, 259, 263, 266, 272, 275, 277, 278, 282, 283, 285, 289, 295, 320, 364, 377, 393, 394, 397, 415, 463, 465, 466, 472, 540, 547, 568, 601, 611, 612, 641, 649, 650, 655, 661, 665, 667, 668, 672, 673, 678, 680, 685, 686, 687, 690, 691, 730, 732, 741, 755, 805, 821, 831, 840, 845, 849, 851, 855, 866, 870, 871, 874, 877, 882, 883, 886, 890, 916, 919, 963, 975, 991, 992, 999, 1012, 1017, 1071, 1072, 1074, 1075, 1078, 1081, 1149, 1191, 1192, 1210, 1212, 1215, 1229, 1235, 1239, 1241, 1242, 1246, 1247, 1252, 1254, 1259, 1260, 1261, 1264, 1265, 1285, 1286, 1291, 1310, 1325, 1338], "when_matched_update_al": [39, 320], "when_not_matched_insert_al": [39, 320], "where": [40, 51, 97, 137, 138, 140, 193, 194, 199, 202, 211, 223, 227, 236, 245, 254, 267, 268, 277, 282, 287, 289, 291, 320, 346, 447, 457, 460, 462, 464, 473, 543, 549, 555, 592, 610, 639, 647, 650, 652, 678, 698, 719, 731, 737, 739, 781, 782, 784, 786, 794, 795, 805, 834, 835, 841, 845, 851, 859, 878, 879, 885, 886, 887, 919, 945, 1053, 1063, 1067, 1069, 1073, 1078, 1082, 1176, 1211, 1222, 1226, 1252, 1272, 1300, 1301, 1310, 1319, 1327, 1337, 1338, 1340], "wherea": [135, 149, 252, 320, 442, 455, 589, 590, 617, 805, 868, 919, 1048, 1061, 1173, 1174, 1310], "wherev": [40, 230, 306, 320, 556, 805, 1164, 1310], "whether": [37, 46, 126, 128, 132, 140, 146, 147, 152, 154, 169, 173, 196, 222, 226, 261, 266, 320, 332, 334, 348, 349, 427, 443, 485, 510, 511, 640, 650, 665, 667, 730, 805, 850, 855, 873, 877, 919, 925, 932, 933, 947, 948, 990, 994, 1029, 1049, 1070, 1091, 1092, 1119, 1120, 1239, 1241, 1310, 1322, 1338], "which": [1, 6, 10, 20, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 125, 127, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 165, 168, 170, 174, 181, 182, 189, 190, 193, 194, 199, 200, 210, 211, 216, 225, 226, 245, 252, 260, 277, 278, 283, 285, 290, 320, 332, 369, 377, 410, 415, 437, 442, 444, 455, 464, 470, 493, 495, 498, 500, 501, 502, 503, 547, 555, 556, 568, 570, 617, 620, 622, 624, 626, 628, 631, 633, 635, 677, 695, 732, 746, 747, 749, 750, 751, 792, 793, 795, 805, 821, 823, 826, 829, 831, 832, 834, 835, 836, 837, 845, 849, 850, 868, 872, 882, 883, 888, 919, 925, 968, 975, 1017, 1043, 1048, 1050, 1061, 1073, 1078, 1079, 1099, 1102, 1105, 1107, 1108, 1109, 1110, 1156, 1212, 1269, 1289, 1291, 1310, 1320, 1326, 1338, 1341], "while": [39, 58, 136, 139, 140, 150, 154, 165, 169, 174, 223, 236, 284, 287, 289, 320, 394, 611, 673, 805, 827, 859, 885, 886, 919, 992, 1191, 1247, 1310], "white": [40, 320], "whitespac": [129, 685, 686, 687, 1259, 1260, 1261, 1333], "whole": [555, 649, 650, 662, 805, 902, 919, 1236], "whose": [51, 226, 245, 320, 467, 753, 805, 850, 919, 925], "why": [826, 919], "wide": [137, 209, 236, 245, 287, 288, 320, 859, 885, 919], "width": [26, 40, 60, 135, 136, 149, 320, 323, 546, 734, 919, 1155, 1310, 1315], "wiki": 20, "wikipedia": 20, "wildcard": [467, 701, 741, 742, 755, 779, 801, 805, 923], "win_loss": [40, 320], "window": [135, 136, 149, 211, 252, 320, 407, 463, 465, 466, 556, 597, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 735, 781, 782, 805, 845, 868, 919, 1010, 1072, 1074, 1075, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1310], "window_s": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 781, 782, 805, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1310], "windowmappingstrategi": [597, 805], "winter": [665, 667, 676, 677, 1239, 1241], "wise": [40, 51, 137, 204, 320, 337, 338, 339, 340, 341, 342, 398, 399, 400, 468, 551, 644, 645, 646, 709, 710, 755, 779, 805, 936, 937, 938, 939, 940, 941, 1001, 1002, 1003, 1076, 1160, 1161, 1219, 1220, 1221, 1283, 1284, 1310], "wish": [181, 283, 320, 389, 390, 712, 713, 805, 821, 882, 919, 987, 1295, 1310], "with_column": [1, 12, 54, 57, 58, 211, 244, 252, 282, 288, 295, 320, 329, 331, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 362, 363, 364, 365, 369, 374, 375, 377, 378, 391, 393, 394, 397, 402, 403, 404, 405, 406, 408, 411, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 456, 457, 459, 461, 462, 464, 471, 472, 477, 482, 484, 486, 491, 492, 493, 496, 497, 499, 500, 501, 502, 503, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 556, 576, 578, 580, 581, 583, 585, 587, 588, 591, 592, 593, 597, 598, 601, 602, 604, 607, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 641, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 698, 699, 700, 702, 705, 706, 711, 714, 721, 723, 725, 728, 732, 733, 734, 735, 736, 741, 742, 744, 745, 747, 748, 752, 762, 766, 769, 771, 774, 785, 789, 791, 793, 795, 801, 805, 826, 827, 837, 845, 847, 863, 864, 868, 875, 890, 919, 925, 1011, 1047, 1185, 1241, 1310, 1338], "with_column_nam": 149, "with_columns_seq": [320, 919], "with_context": 919, "with_field": [556, 805], "with_replac": [256, 320, 535, 638, 805, 1144, 1209, 1310], "with_row_count": [320, 919], "with_row_index": [1, 252, 296, 320, 620, 622, 624, 626, 628, 631, 633, 635, 805, 892, 919, 1210, 1310, 1315], "within": [45, 60, 77, 158, 159, 160, 161, 210, 211, 212, 226, 252, 290, 320, 486, 607, 650, 805, 845, 850, 868, 919, 1093, 1310, 1338], "without": [1, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 56, 57, 58, 67, 69, 72, 97, 100, 129, 132, 139, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 225, 227, 267, 277, 278, 282, 288, 289, 320, 323, 324, 407, 408, 442, 488, 556, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 655, 665, 667, 678, 734, 738, 781, 782, 783, 805, 826, 827, 837, 849, 851, 878, 886, 919, 990, 994, 1010, 1011, 1048, 1095, 1185, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1229, 1239, 1241, 1252, 1289, 1291, 1294, 1310, 1315, 1340], "without_fil": [139, 150, 151], "wod": [687, 1261], "womp": [286, 320, 884, 919], "word": [138, 676, 677, 686, 687, 698, 1272], "work": [40, 67, 69, 72, 136, 155, 259, 295, 320, 332, 334, 370, 393, 394, 396, 397, 467, 476, 519, 548, 555, 556, 580, 581, 583, 585, 587, 588, 597, 668, 672, 673, 680, 691, 715, 805, 871, 890, 919, 925, 932, 933, 969, 991, 992, 996, 999, 1085, 1128, 1157, 1242, 1246, 1247, 1254, 1265, 1296, 1310], "workaround": 320, "workbook": [40, 140, 146, 320], "working_with_conditional_format": [40, 320], "working_with_sparklin": [40, 320], "worksheet": [40, 140, 146, 320], "world": [1, 20, 655, 678, 685, 686, 687, 925, 1135, 1229, 1252, 1259, 1260, 1261, 1321, 1324], "wors": [877, 919], "worth": [519, 1128], "worthwhil": [158, 160], "would": [96, 135, 136, 149, 179, 278, 282, 320, 323, 345, 356, 415, 524, 555, 556, 567, 597, 607, 730, 732, 805, 944, 955, 1017, 1133, 1187, 1291, 1310, 1315, 1336], "wrap": [79, 129, 391, 493, 555, 805, 988, 1310], "wrap_numer": [391, 805, 988, 1310], "wrapper": [58, 827, 919], "writabl": [35, 37, 41, 42, 43, 44, 45, 260, 278, 320, 1291, 1310], "write": [35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 134, 136, 141, 174, 185, 320, 397, 571, 574, 805, 853, 875, 919, 925, 999, 1310], "write_avro": 320, "write_clipboard": [134, 320], "write_csv": [36, 136, 149, 320], "write_databas": 320, "write_delta": 320, "write_excel": 320, "write_ipc": [141, 320], "write_ipc_stream": 320, "write_json": 320, "write_markdown_frame_to_stdout": 174, "write_ndjson": [43, 320], "write_parquet": 320, "write_t": [45, 320], "write_to_dataset": [45, 320], "writeabl": [278, 320, 1291, 1310], "written": [6, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 260, 320, 570, 872, 919], "ww": [1333, 1340], "www": 703, "x": [27, 51, 59, 81, 99, 123, 129, 135, 136, 138, 140, 146, 149, 162, 163, 165, 178, 197, 215, 218, 220, 225, 245, 254, 255, 260, 284, 287, 288, 320, 323, 329, 331, 333, 352, 357, 378, 402, 409, 461, 462, 477, 482, 484, 486, 507, 514, 526, 552, 554, 555, 556, 570, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 596, 602, 610, 611, 612, 616, 644, 647, 682, 705, 706, 711, 714, 721, 723, 725, 728, 729, 735, 741, 742, 744, 755, 765, 766, 769, 771, 774, 779, 784, 789, 795, 805, 849, 855, 876, 878, 885, 919, 924, 925, 956, 993, 1005, 1081, 1164, 1191, 1192, 1219, 1222, 1256, 1289, 1293, 1294, 1310, 1315, 1322, 1323, 1326, 1332, 1338, 1340], "x00": [373, 374, 375, 376, 377, 379, 657, 971, 972, 973, 974, 975, 977, 1231], "x01": [377, 570, 975], "x01bb": [260, 320], "x02l": 570, "x05": [377, 975], "x07": 378, "x1": 378, "x10": [377, 975], "x15": [260, 320], "x80": [260, 320, 378, 570], "x81": 570, "x83": 378, "x88": 378, "x8e": 378, "x99": 378, "x_": [464, 805, 1073, 1310], "x_0": [288, 320, 463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310], "x_1": [288, 320, 464, 805, 1073, 1310], "x_2": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "x_i": [464, 805, 1073, 1310], "x_invers": [602, 805], "x_pow_8": 1332, "x_round": 1332, "x_round_1": 1332, "x_squar": [602, 805], "x_t": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "x_uniqu": [579, 805], "x_y": [357, 526], "xb": 378, "xb9neq": 378, "xbd": 378, "xc14": 378, "xd3": 378, "xdist": 1341, "xee": 378, "xf4v": 378, "xf9": 378, "xfb": 378, "xff": [373, 374, 375, 376, 379, 657, 971, 972, 973, 974, 977, 1231], "xi": [663, 1237], "xl": 140, "xlog2": [578, 602, 805], "xlsb": 140, "xlsx": [40, 140, 320], "xlsx2csv": [140, 157], "xlsxwriter": [40, 157, 320], "xor": [388, 805, 986, 1310, 1329], "xor_xi": [721, 805], "xx": [10, 52, 54, 169, 189, 267, 320, 831, 919, 925, 1326, 1333, 1340], "xxx": [193, 320, 703, 834, 919], "xy": [52, 54], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 329, 656, 663, 805, 1230, 1237, 1287, 1310], "y": [27, 51, 59, 81, 99, 123, 129, 162, 163, 165, 178, 197, 218, 220, 225, 245, 254, 255, 284, 287, 288, 320, 323, 329, 331, 333, 352, 357, 378, 444, 447, 461, 462, 482, 484, 507, 514, 526, 554, 556, 579, 581, 583, 585, 587, 588, 591, 592, 596, 610, 611, 612, 616, 690, 692, 693, 705, 714, 721, 723, 725, 728, 729, 744, 751, 765, 769, 771, 774, 784, 789, 805, 849, 876, 878, 885, 919, 924, 925, 956, 993, 1050, 1053, 1191, 1192, 1264, 1266, 1267, 1310, 1315, 1326, 1333, 1334, 1340], "y_": [463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310], "y_0": [288, 320, 463, 464, 465, 466, 805, 1072, 1073, 1074, 1075, 1310], "y_1": [288, 320], "y_i": [464, 805, 1073, 1310], "y_mul": 705, "y_t": [463, 465, 466, 805, 1072, 1074, 1075, 1310], "y_uniqu": [579, 805], "ya": [680, 1254], "ya29": 151, "year": [211, 226, 252, 267, 290, 320, 415, 427, 428, 437, 438, 440, 442, 455, 456, 617, 620, 622, 624, 626, 628, 631, 633, 635, 732, 745, 746, 747, 748, 749, 750, 792, 793, 805, 845, 850, 868, 919, 925, 1017, 1029, 1030, 1043, 1044, 1046, 1048, 1061, 1062, 1334], "yellow": [320, 324, 373, 374, 375, 376, 379], "yield": [126, 128, 135, 136, 137, 149, 197, 199, 222, 284, 320, 477, 555, 597, 805, 919, 1071, 1078, 1310], "you": [1, 10, 14, 40, 45, 49, 51, 58, 59, 122, 124, 125, 126, 127, 128, 135, 136, 137, 138, 140, 141, 144, 145, 149, 153, 155, 174, 181, 199, 202, 211, 222, 223, 226, 230, 241, 245, 252, 253, 254, 255, 267, 274, 277, 283, 284, 285, 287, 306, 320, 323, 389, 390, 393, 415, 434, 435, 437, 441, 444, 447, 467, 473, 493, 519, 547, 555, 556, 571, 597, 602, 609, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 655, 672, 676, 677, 678, 698, 701, 712, 713, 732, 741, 746, 749, 751, 755, 767, 777, 780, 784, 796, 805, 821, 827, 841, 845, 850, 868, 875, 878, 882, 883, 885, 894, 902, 919, 923, 925, 987, 991, 1017, 1040, 1041, 1047, 1050, 1053, 1078, 1099, 1128, 1164, 1183, 1189, 1229, 1246, 1250, 1251, 1252, 1272, 1289, 1295, 1310, 1315, 1320, 1325, 1341], "your": [38, 40, 50, 51, 90, 135, 136, 137, 138, 140, 155, 174, 223, 225, 230, 254, 255, 258, 274, 294, 299, 306, 320, 323, 420, 464, 479, 556, 664, 690, 692, 693, 700, 767, 805, 849, 855, 870, 889, 895, 902, 919, 1022, 1073, 1164, 1238, 1264, 1266, 1267, 1274, 1310, 1315, 1341], "yy": [10, 52, 54, 169, 189, 267, 320, 831, 919, 925, 1326, 1333, 1340], "yyi": [193, 320, 703, 834, 919], "yyyi": [40, 320], "yz": [52, 54], "z": [40, 59, 81, 129, 163, 197, 218, 220, 225, 254, 255, 284, 287, 288, 320, 329, 331, 333, 486, 514, 556, 581, 583, 585, 587, 588, 596, 610, 611, 612, 655, 663, 665, 667, 678, 690, 693, 723, 725, 744, 769, 771, 774, 780, 784, 789, 805, 849, 876, 878, 885, 919, 924, 925, 1081, 1191, 1192, 1229, 1237, 1239, 1241, 1252, 1264, 1267, 1310, 1322, 1326, 1338, 1340], "z_0": [288, 320], "z_1": [288, 320], "zap": 925, "zero": [28, 40, 122, 123, 133, 135, 136, 141, 143, 147, 164, 167, 178, 201, 211, 223, 253, 267, 272, 278, 279, 320, 472, 547, 552, 639, 647, 700, 714, 805, 824, 840, 845, 919, 998, 1081, 1156, 1222, 1274, 1285, 1291, 1292, 1310, 1332, 1338], "zero_copy_onli": [1291, 1310], "zfill": [675, 721, 805, 1249], "zip": 1341, "zip_with": [204, 320, 1310], "zone": [66, 165, 166, 169, 416, 420, 441, 464, 693, 748, 749, 750, 805, 925, 1018, 1022, 1047, 1073, 1267, 1310], "zoneinfo": [66, 925], "zoom": [40, 320], "zstd": [41, 42, 45, 47, 49, 320, 919], "zz": [169, 189, 267, 320, 831, 919, 1326, 1333, 1340], "zzz": 703, "\u03bc": [129, 182, 211, 223, 252, 254, 255, 274, 290, 320, 416, 417, 419, 420, 421, 422, 424, 426, 429, 431, 432, 434, 435, 436, 437, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 617, 620, 622, 624, 626, 628, 631, 633, 635, 690, 693, 748, 749, 750, 751, 757, 805, 823, 845, 868, 919, 925, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1264, 1267, 1333], "\u0441\u0438\u043d\u0438\u0439": 1333, "\u0967\u096f\u096f\u096f": 925, "\u0968\u0966\u096d\u096d": 925, "\u4eac\u90fd": 925, "\u5927\u962a": 925, "\u6771\u4eac": [393, 394, 672, 673, 925, 991, 992, 1246, 1247], "\u90fd\u5e02": 925, "\ud835\udf0b": 1332}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1326, 1339], "IF": 1330, "__array__": [176, 927], "__arrow_c_stream__": [177, 928], "__dataframe__": 178, "__getitem__": [179, 929], "__iter__": 298, "ab": [328, 930, 1332], "aco": 1335, "acosd": 1335, "add": 329, "add_business_dai": [415, 1017], "agg": [299, 895], "agg_group": 330, "aggreg": [175, 327, 819, 926, 1327], "alia": [331, 931], "alias": [1327, 1332, 1333], "align_fram": 51, "all": [300, 332, 348, 510, 722, 896, 932, 947, 1119, 1339], "all_horizont": 723, "and_": 333, "ani": [334, 349, 511, 724, 933, 948, 1120], "any_horizont": 725, "api": [1, 52, 53, 54, 55, 817, 1338], "append": [335, 934], "approx_n_uniqu": [180, 336, 726, 820, 935], "arang": 727, "arcco": [337, 936], "arccosh": [338, 937], "arcsin": [339, 938], "arcsinh": [340, 939], "arctan": [341, 940], "arctan2": 728, "arctan2d": 729, "arctanh": [342, 941], "arg_max": [343, 350, 512, 942, 949, 1121], "arg_min": [344, 351, 513, 943, 950, 1122], "arg_sort": [345, 944], "arg_sort_bi": 730, "arg_tru": [346, 945], "arg_uniqu": [347, 946], "arg_wher": 731, "arr": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970], "arrai": [60, 797, 1302, 1328], "array_agg": 1328, "array_contain": 1328, "array_get": 1328, "array_length": 1328, "array_low": 1328, "array_mean": 1328, "array_revers": 1328, "array_sum": 1328, "array_to_str": 1328, "array_uniqu": 1328, "array_upp": 1328, "asin": 1335, "asind": 1335, "assert": 1341, "assert_frame_equ": 158, "assert_frame_not_equ": 159, "assert_series_equ": 160, "assert_series_not_equ": 161, "atan": 1335, "atan2": 1335, "atan2d": 1335, "atand": 1335, "attribut": [315, 914, 1303], "avail": 1, "avg": 1327, "avro": 818, "backward_fil": 372, "base_utc_offset": [416, 1018], "batched_read": 131, "batchedcsvread": 131, "bin": [373, 374, 375, 376, 377, 378, 379, 971, 972, 973, 974, 975, 976, 977], "binari": [61, 798, 811, 1304], "bit_and": 1329, "bit_count": 1329, "bit_length": 1333, "bit_or": 1329, "bit_xor": 1329, "bitwise_and": [380, 978], "bitwise_count_on": [381, 979], "bitwise_count_zero": [382, 980], "bitwise_leading_on": [383, 981], "bitwise_leading_zero": [384, 982], "bitwise_or": [385, 983], "bitwise_trailing_on": [386, 984], "bitwise_trailing_zero": [387, 985], "bitwise_xor": [388, 986], "boolean": [62, 799, 1305], "bottom_k": [181, 389, 821, 987], "bottom_k_bi": 390, "build_info": 56, "business_day_count": 732, "cach": 822, "cancel": 911, "cast": [182, 391, 823, 988, 1336], "cast_time_unit": [417, 1019], "cat": [392, 393, 394, 989, 990, 991, 992, 993, 994], "categor": 63, "categori": [800, 1306], "categoricalremappingwarn": 92, "cbrt": [395, 995, 1332], "ceil": [396, 996, 1332], "centuri": [418, 1020], "chronoformatwarn": 93, "chunk_length": 997, "claus": 1326, "clear": [183, 824, 998], "clip": [397, 999], "clipboard": 818, "clone": [184, 825, 1000], "cloud": 818, "co": [398, 1001, 1335], "coalesc": [733, 1330], "col": 801, "collect": 826, "collect_al": 57, "collect_all_async": 58, "collect_async": 827, "collect_schema": [185, 828], "column": [162, 163, 186, 802, 829], "columnnotfounderror": 94, "combin": [419, 1021], "comparison": [811, 1314], "comput": [316, 803, 1307], "computeerror": 95, "concat": [59, 514, 653, 1123, 1227, 1333], "concat_arr": 734, "concat_list": 735, "concat_str": 736, "concat_w": 1333, "condit": 1330, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 174], "conjunct": 811, "contain": [352, 373, 515, 654, 951, 971, 1124, 1228], "contains_ani": [655, 1229], "context": 174, "convers": 816, "convert_time_zon": [420, 1022], "corr": [187, 737], "cosd": 1335, "cosh": [399, 1002], "cot": [400, 1003, 1335], "cotd": 1335, "count": [188, 301, 401, 738, 830, 897, 1004, 1327], "count_match": [353, 516, 656, 952, 1125, 1230], "cov": 739, "creat": 1340, "create_list_strategi": 164, "credenti": 818, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [131, 818], "cum_count": [402, 740, 1005], "cum_fold": 741, "cum_max": [403, 1006], "cum_min": [404, 1007], "cum_prod": [405, 1008], "cum_reduc": 742, "cum_sum": [406, 743, 1009], "cum_sum_horizont": 744, "cumulative_ev": [407, 1010], "customufuncwarn": 96, "cut": [408, 1011], "dai": [423, 1025], "data": 325, "databas": 818, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320], "dataorientationwarn": 97, "dataset": 818, "datatyp": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 325], "date": [65, 421, 745, 1023, 1333], "date_part": 1334, "date_rang": [746, 747], "datetim": [66, 422, 748, 1024], "datetime_rang": [749, 750], "decim": 67, "decod": [374, 657, 972, 1231], "decor": 174, "degre": [409, 1335], "delta": 818, "describ": [189, 831, 1012], "descript": [317, 915, 1308], "deseri": [190, 410, 832], "diff": [411, 517, 1013, 1126], "disable_string_cach": 89, "distinct": 1326, "div": 1332, "document": 1338, "dot": [412, 1014], "drop": [191, 833, 1340], "drop_in_plac": 192, "drop_nan": [193, 413, 834, 1015], "drop_nul": [194, 414, 518, 835, 1016, 1127], "dst_offset": [424, 1026], "dt": [415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "dtype": [166, 195, 836, 1066], "duplicateerror": 98, "durat": [68, 751], "element": 752, "enable_string_cach": 90, "encod": [375, 658, 973, 1232], "ends_with": [376, 659, 974, 1233, 1333], "engine_config": 894, "entropi": [460, 1067], "enum": 69, "epoch": [425, 1027], "eq": [461, 560, 1068], "eq_miss": [462, 1069], "equal": [196, 1070], "error": 326, "escape_regex": [91, 660, 1234], "estimated_s": [197, 1071], "eval": [519, 1128], "ewm_mean": [463, 1072], "ewm_mean_bi": [464, 1073], "ewm_std": [465, 1074], "ewm_var": [466, 1075], "exampl": [1, 925, 1341], "excel": 818, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 326, 1339], "exclud": [467, 753], "execut": 1319, "execute_glob": 1320, "exp": [468, 1076, 1332], "explain": [837, 1340], "explod": [198, 354, 469, 520, 661, 838, 953, 1077, 1129, 1235], "export": [318, 1309], "expr": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721], "express": [805, 1338], "extend": [1, 199, 1078], "extend_const": [470, 1079], "extract": [662, 1236, 1334], "extract_al": [663, 1237], "extract_group": [664, 1238], "extract_mani": [665, 1239], "feather": 818, "fetch": 912, "fetch_block": 913, "field": [701, 1275, 1276], "fill_nan": [200, 471, 839, 1080], "fill_nul": [201, 472, 840, 1081], "filter": [202, 473, 841, 1082], "find": [666, 1240], "find_mani": [667, 1241], "first": [302, 355, 474, 521, 754, 842, 898, 954, 1083, 1130, 1327], "flag": [203, 1084], "flatten": 475, "float32": 70, "float64": 71, "floor": [476, 1085, 1332], "floordiv": 477, "fold": [204, 755], "format": 756, "forward_fil": 478, "frame": 1338, "from": 1326, "from_arrow": 122, "from_datafram": 123, "from_dict": [124, 125], "from_epoch": 757, "from_json": 479, "from_numpi": 126, "from_panda": 127, "from_record": 128, "from_repr": 129, "function": [1, 804, 816, 925, 1331], "gather": [480, 522, 1086, 1131], "gather_everi": [205, 481, 523, 843, 1087, 1132], "ge": [482, 1088], "get": [356, 483, 524, 955, 1133], "get_categori": [392, 989], "get_chunk": 1089, "get_column": [206, 208], "get_column_index": 207, "get_index_typ": 130, "glimps": 209, "global": 1338, "gpuengin": [894, 916], "greatest": 1330, "group": [758, 1326], "group_bi": [210, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 844, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910], "group_by_dynam": [211, 845], "groupbi": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 917], "gt": [484, 1090], "has_multiple_output": 561, "has_nul": [485, 1091], "has_valid": 1092, "hash": [486, 1093], "hash_row": 212, "have": 1326, "head": [213, 303, 487, 525, 668, 759, 846, 899, 1094, 1134, 1242], "height": 214, "helper": 1341, "hist": [488, 1095], "hour": [426, 1028], "hstack": 215, "iceberg": 818, "ifnul": 1330, "implod": [489, 760, 1096], "import": 925, "in_process": [911, 912, 913], "index": 0, "initcap": 1333, "inprocessqueri": [911, 912, 913, 918], "input": 818, "insert_column": 216, "inspect": [490, 847], "instanc": 174, "int128": 72, "int16": 73, "int32": 74, "int64": 75, "int8": 76, "int_rang": [761, 762], "interfac": 1337, "interpol": [217, 491, 848, 1097], "interpolate_bi": [492, 1098], "intersect": 1339, "introduct": 1338, "invalidoperationerror": 99, "io": 131, "ipc": 818, "is_between": [493, 1099], "is_column": 562, "is_column_select": 563, "is_dupl": [218, 494, 1100], "is_empti": [219, 1101], "is_finit": [495, 1102], "is_first_distinct": [496, 1103], "is_in": [497, 1104], "is_infinit": [498, 1105], "is_last_distinct": [499, 1106], "is_leap_year": [427, 1029], "is_liter": 564, "is_loc": 990, "is_nan": [500, 1107], "is_not_nan": [501, 1108], "is_not_nul": [502, 1109], "is_nul": [503, 1110], "is_regex_project": 565, "is_sort": 1111, "is_uniqu": [220, 504, 1112], "iso_year": [428, 1030], "item": [221, 1113], "iter_column": 222, "iter_row": 223, "iter_slic": 224, "join": [225, 357, 526, 669, 849, 956, 1135, 1243, 1326], "join_asof": [226, 850], "join_wher": [227, 851], "json": 818, "json_decod": [670, 1244], "json_encod": [702, 1277], "json_norm": 132, "json_path_match": [671, 1245], "keep": 580, "kurtosi": [505, 1114], "lake": 818, "last": [304, 358, 506, 527, 763, 852, 900, 957, 1115, 1136, 1327], "lazi": [228, 853], "lazyfram": [46, 47, 48, 49, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919], "lazygroupbi": [895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910], "le": [507, 1116], "least": 1330, "left": 1333, "len": [305, 508, 528, 764, 901, 1117, 1137], "len_byt": [393, 672, 991, 1246], "len_char": [394, 673, 992, 1247], "length": 1333, "limit": [229, 509, 854, 1118, 1326], "list": [77, 167, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 806, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1311], "lit": 765, "ln": 1332, "load": [2, 174], "load_from_fil": 3, "load_profil": 168, "log": [550, 1159, 1332], "log10": [551, 1160, 1332], "log1p": [552, 1161, 1332], "log2": 1332, "lower": 1333, "lower_bound": [553, 1162], "lt": [554, 1163], "ltrim": 1333, "manag": 174, "manipul": [322, 809, 921, 1313], "map": 581, "map_batch": [555, 766, 855], "map_el": [556, 1164], "map_field": 582, "map_group": [306, 767, 902], "map_row": 230, "mapwithoutreturndtypewarn": 100, "math": 1332, "max": [231, 307, 359, 529, 557, 768, 856, 903, 958, 1031, 1138, 1165, 1327], "max_horizont": [232, 769], "mean": [233, 308, 530, 558, 770, 857, 904, 1032, 1139, 1166], "mean_horizont": [234, 771], "median": [235, 309, 360, 531, 559, 772, 858, 905, 959, 1033, 1140, 1167, 1327], "melt": [236, 859], "merge_sort": [237, 860], "meta": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 807], "metadata": 922, "method": 1338, "microsecond": [429, 1034], "millennium": [430, 1035], "millisecond": [431, 1036], "min": [238, 310, 361, 532, 575, 773, 861, 906, 960, 1037, 1141, 1168, 1327], "min_horizont": [239, 774], "minut": [432, 1038], "miscellan": [321, 808, 816, 920, 1312], "mod": [576, 1332], "mode": [577, 1169], "moduleupgraderequirederror": 101, "month": [433, 1039], "month_end": [434, 1040], "month_start": [435, 1041], "mul": 578, "multipl": 174, "n_chunk": [240, 1170], "n_uniqu": [241, 311, 362, 533, 579, 775, 907, 961, 1142, 1171], "name": [580, 581, 582, 583, 584, 585, 586, 587, 588, 802, 810, 1172, 1339], "nan_max": [589, 1173], "nan_min": [590, 1174], "nanosecond": [436, 1042], "ne": [566, 591, 1175], "ne_miss": [592, 1176], "neg": 593, "nest": 325, "new": 1, "new_from_index": 1177, "next_batch": 131, "nodataerror": 102, "norowsreturnederror": 103, "not_": [594, 1178], "nth": 776, "null": 78, "null_count": [242, 595, 862, 1179], "nullif": 1330, "numer": [325, 811, 1314], "object": 79, "octet_length": 1333, "od": 818, "offset": 1326, "offset_bi": [437, 1043], "ones": 777, "oper": [811, 925, 1314, 1339, 1340], "option": 174, "or_": 596, "order": 1326, "ordinal_dai": [438, 1044], "other": 325, "outofboundserror": 104, "output": 818, "output_nam": 567, "over": 597, "pad_end": [674, 1248], "pad_start": [675, 1249], "panic": 326, "panicexcept": 105, "parallel": 816, "parametercollisionerror": 106, "parametr": [162, 163, 164, 165, 166, 167, 168, 169, 170, 1341], "parquet": 818, "partition_bi": 243, "pct_chang": [598, 1180], "peak_max": [599, 1181], "peak_min": [600, 1182], "performancewarn": 107, "pi": 1332, "pipe": [244, 601, 863], "pivot": 245, "plot": [323, 1315], "plugin": 923, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1341], "polarserror": 108, "polarsinefficientmapwarn": 109, "polarswarn": 110, "pop": 568, "pow": [602, 1183, 1332], "prefix": 583, "prefix_field": 584, "product": [246, 603, 1184], "profil": [864, 1341], "provid": 1, "pyarrow": 818, "python": [817, 1338], "qcut": [604, 1185], "quantil": [247, 312, 605, 778, 865, 908, 1186], "quantile_cont": 1327, "quantile_disc": 1327, "quarter": [439, 1045], "queri": 1338, "radian": [606, 1335], "random": 816, "rank": [607, 1187], "read_avro": 133, "read_clipboard": 134, "read_csv": 135, "read_csv_batch": 136, "read_databas": 137, "read_database_uri": 138, "read_delta": 139, "read_excel": 140, "read_ipc": 141, "read_ipc_schema": 142, "read_ipc_stream": 143, "read_json": 144, "read_ndjson": 145, "read_od": 146, "read_parquet": 147, "read_parquet_schema": 148, "rechunk": [248, 608, 1188], "reduc": 779, "refer": 817, "regexp_lik": 1333, "regist": 1321, "register_dataframe_namespac": 52, "register_expr_namespac": 53, "register_glob": 1322, "register_lazyframe_namespac": 54, "register_mani": 1323, "register_series_namespac": 55, "registr": 1, "reinterpret": [377, 609, 975, 1189], "renam": [249, 866, 1190], "rename_field": [703, 1278], "repeat": 780, "repeat_bi": 610, "replac": [440, 611, 676, 1046, 1191, 1250, 1333], "replace_al": [677, 1251], "replace_column": 250, "replace_mani": [678, 1252], "replace_strict": [612, 1192], "replace_time_zon": [441, 1047], "reshap": [613, 1193], "restore_default": 4, "revers": [251, 363, 534, 614, 679, 867, 962, 1143, 1194, 1253, 1333], "right": 1333, "rle": [615, 1195], "rle_id": [616, 1196], "roll": [252, 617, 868], "rolling_corr": 781, "rolling_cov": 782, "rolling_map": [618, 1197], "rolling_max": [619, 1198], "rolling_max_bi": 620, "rolling_mean": [621, 1199], "rolling_mean_bi": 622, "rolling_median": [623, 1200], "rolling_median_bi": 624, "rolling_min": [625, 1201], "rolling_min_bi": 626, "rolling_quantil": [627, 1202], "rolling_quantile_bi": 628, "rolling_skew": [629, 1203], "rolling_std": [630, 1204], "rolling_std_bi": 631, "rolling_sum": [632, 1205], "rolling_sum_bi": 633, "rolling_var": [634, 1206], "rolling_var_bi": 635, "root_nam": 569, "round": [442, 636, 1048, 1207, 1332], "round_sig_fig": [637, 1208], "row": [253, 254], "rows_by_kei": 255, "rowserror": 111, "rtrim": 1333, "sampl": [256, 535, 638, 1144, 1209], "save": [5, 174], "save_to_fil": 6, "scan_csv": 149, "scan_delta": 150, "scan_iceberg": 151, "scan_ipc": 152, "scan_ndjson": 153, "scan_parquet": 154, "scan_pyarrow_dataset": 155, "scatter": 1210, "schema": [257, 869, 924, 1279], "schemaerror": 114, "schemafieldnotfounderror": 115, "search_sort": [639, 1211], "second": [443, 1049], "select": [258, 322, 783, 809, 870, 921, 1313, 1326], "select_seq": [259, 871], "selector": 925, "seri": [169, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1310], "serial": [260, 321, 570, 872, 920], "set": [925, 1212, 1339], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [536, 1145], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [537, 1146], "set_profil": 170, "set_random_se": 156, "set_sort": [261, 640, 873, 1213], "set_streaming_chunk_s": 14, "set_symmetric_differ": [538, 1147], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [539, 1148], "set_verbos": 29, "shape": [262, 1214], "shapeerror": 116, "shift": [263, 364, 540, 641, 874, 963, 1149, 1215], "show": 1340, "show_graph": [571, 875], "show_vers": 157, "shrink_dtyp": [642, 1216], "shrink_to_fit": [264, 1217], "shuffl": [643, 1218], "sign": [644, 1219, 1332], "sin": [645, 1220, 1335], "sind": 1335, "sinh": [646, 1221], "sink_csv": 46, "sink_ipc": 47, "sink_ndjson": 48, "sink_parquet": 49, "size": [378, 976], "skew": [647, 1222], "slice": [265, 541, 648, 680, 876, 1150, 1223, 1254], "sort": [266, 365, 542, 649, 877, 964, 1151, 1224], "sort_bi": 650, "split": [681, 1255], "split_exact": [682, 1256], "splitn": [683, 1257], "sql": [267, 784, 878, 1326, 1331, 1337, 1338], "sql_expr": 785, "sqlcontext": [1319, 1320, 1321, 1322, 1323, 1324, 1325, 1338], "sqlinterfaceerror": 112, "sqlsyntaxerror": 113, "sqrt": [651, 1225, 1332], "starts_with": [379, 684, 977, 1258, 1333], "state": [30, 174], "std": [268, 366, 543, 652, 786, 879, 965, 1152, 1226], "stddev": 1327, "str": [653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274], "strategi": 1341, "strftime": [444, 1050, 1334], "string": [80, 325, 812, 1316, 1333], "stringcach": [50, 816], "stringcachemismatcherror": 117, "strip_char": [685, 1259], "strip_chars_end": [686, 1260], "strip_chars_start": [687, 1261], "strip_prefix": [688, 1262], "strip_suffix": [689, 1263], "strpo": 1333, "strptime": [690, 1264, 1333], "struct": [81, 701, 702, 703, 704, 705, 787, 813, 1275, 1276, 1277, 1278, 1279, 1280, 1317], "structfieldnotfounderror": 118, "style": 324, "sub": 706, "substr": 1333, "suffix": 585, "suffix_field": 586, "sum": [269, 313, 367, 544, 707, 788, 880, 909, 966, 1153, 1281, 1327], "sum_horizont": [270, 789], "tabl": [1324, 1340], "tail": [271, 314, 545, 691, 708, 790, 881, 910, 1154, 1265, 1282], "tan": [709, 1283, 1335], "tand": 1335, "tanh": [710, 1284], "tempor": [325, 814, 1318, 1329, 1334], "test": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1341], "thread_pool_s": 171, "threadpool_s": 172, "time": [82, 445, 791, 1051], "time_rang": [792, 793], "timestamp": [446, 1052, 1333], "to_arrai": [546, 1155], "to_arrow": [272, 1285], "to_dat": [692, 1266], "to_datetim": [693, 1267], "to_decim": [694, 1268], "to_dict": [273, 274], "to_dummi": [275, 1286], "to_fram": 1287, "to_init_repr": [276, 1288], "to_integ": [695, 1269], "to_jax": [277, 1289], "to_list": [368, 967, 1290], "to_loc": 993, "to_lowercas": [587, 696, 1270], "to_numpi": [278, 1291], "to_panda": [279, 1292], "to_phys": [711, 1293], "to_seri": 280, "to_str": [447, 1053], "to_struct": [281, 369, 547, 968, 1156], "to_tim": [697, 1271], "to_titlecas": [698, 1272], "to_torch": [282, 1294], "to_uppercas": [588, 699, 1273], "toomanyrowsreturnederror": 119, "top_k": [283, 712, 882, 1295], "top_k_bi": 713, "total_dai": [448, 1054], "total_hour": [449, 1055], "total_microsecond": [450, 1056], "total_millisecond": [451, 1057], "total_minut": [452, 1058], "total_nanosecond": [453, 1059], "total_second": [454, 1060], "transpos": 284, "tree_format": 572, "trigonometri": 1335, "truediv": 714, "truncat": [455, 1061, 1340], "try_cast": 1336, "type": [325, 1336], "uint16": 83, "uint32": 84, "uint64": 85, "uint8": 86, "undo_alias": 573, "union": 1339, "uniqu": [285, 370, 548, 715, 883, 969, 1157, 1296], "unique_count": [716, 1297], "unknown": 87, "unnest": [286, 704, 884, 1280, 1328, 1340], "unpivot": [287, 885], "unregist": 1325, "unstablewarn": 120, "unstack": 288, "unsuitablesqlerror": 121, "updat": [289, 886], "upper": 1333, "upper_bound": [717, 1298], "upsampl": 290, "us": 174, "uses_lexical_ord": 994, "using_string_cach": 173, "utf8": 88, "value_count": [718, 1299], "var": [291, 371, 549, 719, 794, 887, 970, 1158, 1300], "varianc": 1327, "vstack": 292, "warn": 326, "week": [456, 1062], "weekdai": [457, 1063], "when": 795, "where": [720, 1326], "width": [293, 888], "window": 815, "with_column": [294, 889], "with_columns_seq": [295, 890], "with_context": 891, "with_field": 705, "with_row_count": [296, 892], "with_row_index": [297, 893], "with_time_unit": [458, 1064], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 574], "write_ndjson": 44, "write_parquet": 45, "xor": 721, "year": [459, 1065], "zero": 796, "zfill": [700, 1274], "zip_with": 1301}})